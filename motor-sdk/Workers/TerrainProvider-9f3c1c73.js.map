{"version":3,"file":"TerrainProvider-9f3c1c73.js","sources":["../../Source/Core/TerrainProvider.js"],"sourcesContent":["import defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\r\n     * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\r\n     * interface and is not intended to be instantiated directly.\r\n     *\r\n     * @alias TerrainProvider\r\n     * @constructor\r\n     *\r\n     * @see EllipsoidTerrainProvider\r\n     * @see CesiumTerrainProvider\r\n     * @see VRTheWorldTerrainProvider\r\n     * @see GoogleEarthEnterpriseTerrainProvider\r\n     */\r\n    function TerrainProvider() {\r\n        DeveloperError.throwInstantiationError();\r\n    }\r\n\r\n    Object.defineProperties(TerrainProvider.prototype, {\r\n        /**\r\n         * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\r\n         * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\r\n         * are passed an instance of {@link TileProviderError}.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Event}\r\n         */\r\n        errorEvent : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\r\n         * the source of the terrain. This function should\r\n         * not be called before {@link TerrainProvider#ready} returns true.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Credit}\r\n         */\r\n        credit : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets the tiling scheme used by the provider.  This function should\r\n         * not be called before {@link TerrainProvider#ready} returns true.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {TilingScheme}\r\n         */\r\n        tilingScheme : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets a value indicating whether or not the provider is ready for use.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Boolean}\r\n         */\r\n        ready : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets a promise that resolves to true when the provider is ready for use.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Promise.<Boolean>}\r\n         * @readonly\r\n         */\r\n        readyPromise : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets a value indicating whether or not the provider includes a water mask.  The water mask\r\n         * indicates which areas of the globe are water rather than land, so they can be rendered\r\n         * as a reflective surface with animated waves.  This function should not be\r\n         * called before {@link TerrainProvider#ready} returns true.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Boolean}\r\n         */\r\n        hasWaterMask : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets a value indicating whether or not the requested tiles include vertex normals.\r\n         * This function should not be called before {@link TerrainProvider#ready} returns true.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Boolean}\r\n         */\r\n        hasVertexNormals : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets an object that can be used to determine availability of terrain from this provider, such as\r\n         * at points and in rectangles.  This function should not be called before\r\n         * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\r\n         * information is not available.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {TileAvailability}\r\n         */\r\n        availability : {\r\n            get : DeveloperError.throwInstantiationError\r\n        }\r\n    });\r\n\r\n    var regularGridIndicesCache = [];\r\n\r\n    /**\r\n     * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\r\n     * this function multiple times with the same grid width and height returns the\r\n     * same list of indices.  The total number of vertices must be less than or equal\r\n     * to 65536.\r\n     *\r\n     * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\r\n     * @param {Number} height The number of vertices in the regular grid in the vertical direction.\r\n     * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\r\n     */\r\n    TerrainProvider.getRegularGridIndices = function(width, height) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var byWidth = regularGridIndicesCache[width];\r\n        if (!defined(byWidth)) {\r\n            regularGridIndicesCache[width] = byWidth = [];\r\n        }\r\n\r\n        var indices = byWidth[height];\r\n        if (!defined(indices)) {\r\n            if (width * height < CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n                indices = byWidth[height] = new Uint16Array((width - 1) * (height - 1) * 6);\r\n            } else {\r\n                indices = byWidth[height] = new Uint32Array((width - 1) * (height - 1) * 6);\r\n            }\r\n            addRegularGridIndices(width, height, indices, 0);\r\n        }\r\n\r\n        return indices;\r\n    };\r\n\r\n    var regularGridAndEdgeIndicesCache = [];\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    TerrainProvider.getRegularGridIndicesAndEdgeIndices = function(width, height) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var byWidth = regularGridAndEdgeIndicesCache[width];\r\n        if (!defined(byWidth)) {\r\n            regularGridAndEdgeIndicesCache[width] = byWidth = [];\r\n        }\r\n\r\n        var indicesAndEdges = byWidth[height];\r\n        if (!defined(indicesAndEdges)) {\r\n            var indices = TerrainProvider.getRegularGridIndices(width, height);\r\n\r\n            var edgeIndices = getEdgeIndices(width, height);\r\n            var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\r\n            var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\r\n            var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\r\n            var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\r\n\r\n            indicesAndEdges = byWidth[height] = {\r\n                indices : indices,\r\n                westIndicesSouthToNorth : westIndicesSouthToNorth,\r\n                southIndicesEastToWest : southIndicesEastToWest,\r\n                eastIndicesNorthToSouth : eastIndicesNorthToSouth,\r\n                northIndicesWestToEast : northIndicesWestToEast\r\n            };\r\n        }\r\n\r\n        return indicesAndEdges;\r\n    };\r\n\r\n    var regularGridAndSkirtAndEdgeIndicesCache = [];\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    TerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function(width, height) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\r\n        if (!defined(byWidth)) {\r\n            regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\r\n        }\r\n\r\n        var indicesAndEdges = byWidth[height];\r\n        if (!defined(indicesAndEdges)) {\r\n            var gridVertexCount = width * height;\r\n            var gridIndexCount = (width - 1) * (height - 1) * 6;\r\n            var edgeVertexCount = width * 2 + height * 2;\r\n            var edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\r\n            var vertexCount = gridVertexCount + edgeVertexCount;\r\n            var indexCount = gridIndexCount + edgeIndexCount;\r\n\r\n            var edgeIndices = getEdgeIndices(width, height);\r\n            var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\r\n            var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\r\n            var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\r\n            var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\r\n\r\n            var indices = IndexDatatype.createTypedArray(vertexCount, indexCount);\r\n            addRegularGridIndices(width, height, indices, 0);\r\n            TerrainProvider.addSkirtIndices(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, gridVertexCount, indices, gridIndexCount);\r\n\r\n            indicesAndEdges = byWidth[height] = {\r\n                indices : indices,\r\n                westIndicesSouthToNorth : westIndicesSouthToNorth,\r\n                southIndicesEastToWest : southIndicesEastToWest,\r\n                eastIndicesNorthToSouth : eastIndicesNorthToSouth,\r\n                northIndicesWestToEast : northIndicesWestToEast,\r\n                indexCountWithoutSkirts : gridIndexCount\r\n            };\r\n        }\r\n\r\n        return indicesAndEdges;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    TerrainProvider.addSkirtIndices = function(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, indexVer0, indexVer1, indexVer2, indexVer3, indices, offset) {\r\n        offset = addSkirtIndices(westIndicesSouthToNorth, northIndicesWestToEast, indexVer0, indexVer3, indices, offset);\r\n        offset = addSkirtIndices(southIndicesEastToWest, westIndicesSouthToNorth, indexVer1, indexVer0, indices, offset);\r\n        offset = addSkirtIndices(eastIndicesNorthToSouth, southIndicesEastToWest, indexVer2, indexVer1, indices, offset);\r\n        addSkirtIndices(northIndicesWestToEast, eastIndicesNorthToSouth, indexVer3, indexVer2, indices, offset);\r\n    };\r\n\r\n    function getEdgeIndices(width, height) {\r\n        var westIndicesSouthToNorth = new Array(height);\r\n        var southIndicesEastToWest = new Array(width);\r\n        var eastIndicesNorthToSouth = new Array(height);\r\n        var northIndicesWestToEast = new Array(width);\r\n\r\n        var i;\r\n        for (i = 0; i < width; ++i) {\r\n            northIndicesWestToEast[i] = i;\r\n            southIndicesEastToWest[i] = width * height - 1 - i;\r\n        }\r\n\r\n        for (i = 0; i < height; ++i) {\r\n            eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\r\n            westIndicesSouthToNorth[i] = (height - i - 1) * width;\r\n        }\r\n\r\n        return {\r\n            westIndicesSouthToNorth : westIndicesSouthToNorth,\r\n            southIndicesEastToWest : southIndicesEastToWest,\r\n            eastIndicesNorthToSouth : eastIndicesNorthToSouth,\r\n            northIndicesWestToEast : northIndicesWestToEast\r\n        };\r\n    }\r\n\r\n    function addRegularGridIndices(width, height, indices, offset) {\r\n        var index = 0;\r\n        for (var j = 0; j < height - 1; ++j) {\r\n            for (var i = 0; i < width - 1; ++i) {\r\n                var upperLeft = index;\r\n                var lowerLeft = upperLeft + width;\r\n                var lowerRight = lowerLeft + 1;\r\n                var upperRight = upperLeft + 1;\r\n\r\n                indices[offset++] = upperLeft;\r\n                indices[offset++] = lowerLeft;\r\n                indices[offset++] = upperRight;\r\n                indices[offset++] = upperRight;\r\n                indices[offset++] = lowerLeft;\r\n                indices[offset++] = lowerRight;\r\n\r\n                ++index;\r\n            }\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    function addSkirtIndices(edgeIndices, edgeNextIndices, vertexIndex, vertexNextIndex, indices, offset) {\r\n        var previousIndex = edgeIndices[0];\r\n\r\n        var length = edgeIndices.length - 1;\r\n        var index = 0;\r\n        for (var i = 1; i < length; ++i) {\r\n            index = edgeIndices[i];\r\n\r\n            indices[offset++] = previousIndex;\r\n            indices[offset++] = index;\r\n            indices[offset++] = vertexIndex;\r\n\r\n            indices[offset++] = vertexIndex;\r\n            indices[offset++] = index;\r\n            indices[offset++] = vertexIndex + 1;\r\n\r\n            previousIndex = index;\r\n            ++vertexIndex;\r\n        }\r\n\r\n        index = edgeNextIndices[0];\r\n        indices[offset++] = previousIndex;\r\n        indices[offset++] = index;\r\n        indices[offset++] = vertexIndex;\r\n\r\n        indices[offset++] = vertexIndex;\r\n        indices[offset++] = index;\r\n        indices[offset++] = vertexNextIndex;\r\n\r\n        return offset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\r\n     * ensure that adjacent heightmap vertices are separated by no more than\r\n     * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\r\n     * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\r\n     * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\r\n     * @type {Number}\r\n     */\r\n    TerrainProvider.heightmapTerrainQuality = 0.25;\r\n\r\n    /**\r\n     * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\r\n     * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\r\n     * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\r\n     * @returns {Number} An estimated geometric error.\r\n     */\r\n    TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function(ellipsoid, tileImageWidth, numberOfTilesAtLevelZero) {\r\n        return ellipsoid.maximumRadius * 2 * Math.PI * TerrainProvider.heightmapTerrainQuality / (tileImageWidth * numberOfTilesAtLevelZero);\r\n    };\r\n\r\n    /**\r\n     * Requests the geometry for a given tile.  This function should not be called before\r\n     * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\r\n     * may optionally include a water mask and an indication of which child tiles are available.\r\n     * @function\r\n     *\r\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n     * @param {Number} level The level of the tile for which to request geometry.\r\n     * @param {Request} [request] The request object. Intended for internal use only.\r\n     *\r\n     * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\r\n     *          returns undefined instead of a promise, it is an indication that too many requests are already\r\n     *          pending and the request will be retried later.\r\n     */\r\n    TerrainProvider.prototype.requestTileGeometry = DeveloperError.throwInstantiationError;\r\n\r\n    /**\r\n     * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\r\n     * called before {@link TerrainProvider#ready} returns true.\r\n     * @function\r\n     *\r\n     * @param {Number} level The tile level for which to get the maximum geometric error.\r\n     * @returns {Number} The maximum geometric error.\r\n     */\r\n    TerrainProvider.prototype.getLevelMaximumGeometricError = DeveloperError.throwInstantiationError;\r\n\r\n    /**\r\n     * Determines whether data for a tile is available to be loaded.\r\n     * @function\r\n     *\r\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n     * @param {Number} level The level of the tile for which to request geometry.\r\n     * @returns {Boolean} Undefined if not supported by the terrain provider, otherwise true or false.\r\n     */\r\n    TerrainProvider.prototype.getTileDataAvailable = DeveloperError.throwInstantiationError;\r\n\r\n    /**\r\n     * Makes sure we load availability data for a tile\r\n     * @function\r\n     *\r\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n     * @param {Number} level The level of the tile for which to request geometry.\r\n     * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\r\n     */\r\n    TerrainProvider.prototype.loadTileDataAvailability = DeveloperError.throwInstantiationError;\r\nexport default TerrainProvider;\r\n"],"names":["DeveloperError","CesiumMath","defined","IndexDatatype"],"mappings":"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"}