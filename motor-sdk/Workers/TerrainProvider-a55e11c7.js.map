{"version":3,"file":"TerrainProvider-a55e11c7.js","sources":["../../../../Source/Core/TerrainProvider.js"],"sourcesContent":["import defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\n\n    /**\n     * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\n     * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\n     * interface and is not intended to be instantiated directly.\n     *\n     * @alias TerrainProvider\n     * @constructor\n     *\n     * @see EllipsoidTerrainProvider\n     * @see CesiumTerrainProvider\n     * @see VRTheWorldTerrainProvider\n     * @see GoogleEarthEnterpriseTerrainProvider\n     */\n    function TerrainProvider() {\n        DeveloperError.throwInstantiationError();\n    }\n\n    Object.defineProperties(TerrainProvider.prototype, {\n        /**\n         * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\n         * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n         * are passed an instance of {@link TileProviderError}.\n         * @memberof TerrainProvider.prototype\n         * @type {Event}\n         */\n        errorEvent : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n         * the source of the terrain. This function should\n         * not be called before {@link TerrainProvider#ready} returns true.\n         * @memberof TerrainProvider.prototype\n         * @type {Credit}\n         */\n        credit : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets the tiling scheme used by the provider.  This function should\n         * not be called before {@link TerrainProvider#ready} returns true.\n         * @memberof TerrainProvider.prototype\n         * @type {TilingScheme}\n         */\n        tilingScheme : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets a value indicating whether or not the provider is ready for use.\n         * @memberof TerrainProvider.prototype\n         * @type {Boolean}\n         */\n        ready : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets a promise that resolves to true when the provider is ready for use.\n         * @memberof TerrainProvider.prototype\n         * @type {Promise.<Boolean>}\n         * @readonly\n         */\n        readyPromise : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n         * indicates which areas of the globe are water rather than land, so they can be rendered\n         * as a reflective surface with animated waves.  This function should not be\n         * called before {@link TerrainProvider#ready} returns true.\n         * @memberof TerrainProvider.prototype\n         * @type {Boolean}\n         */\n        hasWaterMask : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets a value indicating whether or not the requested tiles include vertex normals.\n         * This function should not be called before {@link TerrainProvider#ready} returns true.\n         * @memberof TerrainProvider.prototype\n         * @type {Boolean}\n         */\n        hasVertexNormals : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets an object that can be used to determine availability of terrain from this provider, such as\n         * at points and in rectangles.  This function should not be called before\n         * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n         * information is not available.\n         * @memberof TerrainProvider.prototype\n         * @type {TileAvailability}\n         */\n        availability : {\n            get : DeveloperError.throwInstantiationError\n        }\n    });\n\n    var regularGridIndicesCache = [];\n\n    /**\n     * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\n     * this function multiple times with the same grid width and height returns the\n     * same list of indices.  The total number of vertices must be less than or equal\n     * to 65536.\n     *\n     * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\n     * @param {Number} height The number of vertices in the regular grid in the vertical direction.\n     * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\n     */\n    TerrainProvider.getRegularGridIndices = function(width, height) {\n        //>>includeStart('debug', pragmas.debug);\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\n        }\n        //>>includeEnd('debug');\n\n        var byWidth = regularGridIndicesCache[width];\n        if (!defined(byWidth)) {\n            regularGridIndicesCache[width] = byWidth = [];\n        }\n\n        var indices = byWidth[height];\n        if (!defined(indices)) {\n            if (width * height < CesiumMath.SIXTY_FOUR_KILOBYTES) {\n                indices = byWidth[height] = new Uint16Array((width - 1) * (height - 1) * 6);\n            } else {\n                indices = byWidth[height] = new Uint32Array((width - 1) * (height - 1) * 6);\n            }\n            addRegularGridIndices(width, height, indices, 0);\n        }\n\n        return indices;\n    };\n\n    var regularGridAndEdgeIndicesCache = [];\n\n    /**\n     * @private\n     */\n    TerrainProvider.getRegularGridIndicesAndEdgeIndices = function(width, height) {\n        //>>includeStart('debug', pragmas.debug);\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\n        }\n        //>>includeEnd('debug');\n\n        var byWidth = regularGridAndEdgeIndicesCache[width];\n        if (!defined(byWidth)) {\n            regularGridAndEdgeIndicesCache[width] = byWidth = [];\n        }\n\n        var indicesAndEdges = byWidth[height];\n        if (!defined(indicesAndEdges)) {\n            var indices = TerrainProvider.getRegularGridIndices(width, height);\n\n            var edgeIndices = getEdgeIndices(width, height);\n            var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n            var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n            var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n            var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n            indicesAndEdges = byWidth[height] = {\n                indices : indices,\n                westIndicesSouthToNorth : westIndicesSouthToNorth,\n                southIndicesEastToWest : southIndicesEastToWest,\n                eastIndicesNorthToSouth : eastIndicesNorthToSouth,\n                northIndicesWestToEast : northIndicesWestToEast\n            };\n        }\n\n        return indicesAndEdges;\n    };\n\n    var regularGridAndSkirtAndEdgeIndicesCache = [];\n\n    /**\n     * @private\n     */\n    TerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function(width, height) {\n        //>>includeStart('debug', pragmas.debug);\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\n        }\n        //>>includeEnd('debug');\n\n        var byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\n        if (!defined(byWidth)) {\n            regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\n        }\n\n        var indicesAndEdges = byWidth[height];\n        if (!defined(indicesAndEdges)) {\n            var gridVertexCount = width * height;\n            var gridIndexCount = (width - 1) * (height - 1) * 6;\n            var edgeVertexCount = width * 2 + height * 2;\n            var edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\n            var vertexCount = gridVertexCount + edgeVertexCount;\n            var indexCount = gridIndexCount + edgeIndexCount;\n\n            var edgeIndices = getEdgeIndices(width, height);\n            var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n            var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n            var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n            var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n            var indices = IndexDatatype.createTypedArray(vertexCount, indexCount);\n            addRegularGridIndices(width, height, indices, 0);\n            TerrainProvider.addSkirtIndices(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, gridVertexCount, indices, gridIndexCount);\n\n            indicesAndEdges = byWidth[height] = {\n                indices : indices,\n                westIndicesSouthToNorth : westIndicesSouthToNorth,\n                southIndicesEastToWest : southIndicesEastToWest,\n                eastIndicesNorthToSouth : eastIndicesNorthToSouth,\n                northIndicesWestToEast : northIndicesWestToEast,\n                indexCountWithoutSkirts : gridIndexCount\n            };\n        }\n\n        return indicesAndEdges;\n    };\n\n    /**\n     * @private\n     */\n    TerrainProvider.addSkirtIndices = function(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, vertexCount, indices, offset) {\n        var vertexIndex = vertexCount;\n        offset = addSkirtIndices(westIndicesSouthToNorth, vertexIndex, indices, offset);\n        vertexIndex += westIndicesSouthToNorth.length;\n        offset = addSkirtIndices(southIndicesEastToWest, vertexIndex, indices, offset);\n        vertexIndex += southIndicesEastToWest.length;\n        offset = addSkirtIndices(eastIndicesNorthToSouth, vertexIndex, indices, offset);\n        vertexIndex += eastIndicesNorthToSouth.length;\n        addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);\n    };\n\n    function getEdgeIndices(width, height) {\n        var westIndicesSouthToNorth = new Array(height);\n        var southIndicesEastToWest = new Array(width);\n        var eastIndicesNorthToSouth = new Array(height);\n        var northIndicesWestToEast = new Array(width);\n\n        var i;\n        for (i = 0; i < width; ++i) {\n            northIndicesWestToEast[i] = i;\n            southIndicesEastToWest[i] = width * height - 1 - i;\n        }\n\n        for (i = 0; i < height; ++i) {\n            eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\n            westIndicesSouthToNorth[i] = (height - i - 1) * width;\n        }\n\n        return {\n            westIndicesSouthToNorth : westIndicesSouthToNorth,\n            southIndicesEastToWest : southIndicesEastToWest,\n            eastIndicesNorthToSouth : eastIndicesNorthToSouth,\n            northIndicesWestToEast : northIndicesWestToEast\n        };\n    }\n\n    function addRegularGridIndices(width, height, indices, offset) {\n        var index = 0;\n        for (var j = 0; j < height - 1; ++j) {\n            for (var i = 0; i < width - 1; ++i) {\n                var upperLeft = index;\n                var lowerLeft = upperLeft + width;\n                var lowerRight = lowerLeft + 1;\n                var upperRight = upperLeft + 1;\n\n                indices[offset++] = upperLeft;\n                indices[offset++] = lowerLeft;\n                indices[offset++] = upperRight;\n                indices[offset++] = upperRight;\n                indices[offset++] = lowerLeft;\n                indices[offset++] = lowerRight;\n\n                ++index;\n            }\n            ++index;\n        }\n    }\n\n    function addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {\n        var previousIndex = edgeIndices[0];\n\n        var length = edgeIndices.length;\n        for (var i = 1; i < length; ++i) {\n            var index = edgeIndices[i];\n\n            indices[offset++] = previousIndex;\n            indices[offset++] = index;\n            indices[offset++] = vertexIndex;\n\n            indices[offset++] = vertexIndex;\n            indices[offset++] = index;\n            indices[offset++] = vertexIndex + 1;\n\n            previousIndex = index;\n            ++vertexIndex;\n        }\n\n        return offset;\n    }\n\n    /**\n     * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\n     * ensure that adjacent heightmap vertices are separated by no more than\n     * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\n     * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\n     * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\n     * @type {Number}\n     */\n    TerrainProvider.heightmapTerrainQuality = 0.25;\n\n    /**\n     * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\n     *\n     * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\n     * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\n     * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\n     * @returns {Number} An estimated geometric error.\n     */\n    TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function(ellipsoid, tileImageWidth, numberOfTilesAtLevelZero) {\n        return ellipsoid.maximumRadius * 2 * Math.PI * TerrainProvider.heightmapTerrainQuality / (tileImageWidth * numberOfTilesAtLevelZero);\n    };\n\n    /**\n     * Requests the geometry for a given tile.  This function should not be called before\n     * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\n     * may optionally include a water mask and an indication of which child tiles are available.\n     * @function\n     *\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\n     * @param {Number} level The level of the tile for which to request geometry.\n     * @param {Request} [request] The request object. Intended for internal use only.\n     *\n     * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n     *          returns undefined instead of a promise, it is an indication that too many requests are already\n     *          pending and the request will be retried later.\n     */\n    TerrainProvider.prototype.requestTileGeometry = DeveloperError.throwInstantiationError;\n\n    /**\n     * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\n     * called before {@link TerrainProvider#ready} returns true.\n     * @function\n     *\n     * @param {Number} level The tile level for which to get the maximum geometric error.\n     * @returns {Number} The maximum geometric error.\n     */\n    TerrainProvider.prototype.getLevelMaximumGeometricError = DeveloperError.throwInstantiationError;\n\n    /**\n     * Determines whether data for a tile is available to be loaded.\n     * @function\n     *\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\n     * @param {Number} level The level of the tile for which to request geometry.\n     * @returns {Boolean} Undefined if not supported by the terrain provider, otherwise true or false.\n     */\n    TerrainProvider.prototype.getTileDataAvailable = DeveloperError.throwInstantiationError;\n\n    /**\n     * Makes sure we load availability data for a tile\n     * @function\n     *\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\n     * @param {Number} level The level of the tile for which to request geometry.\n     * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n     */\n    TerrainProvider.prototype.loadTileDataAvailability = DeveloperError.throwInstantiationError;\nexport default TerrainProvider;\n"],"names":["DeveloperError","CesiumMath","defined","IndexDatatype"],"mappings":"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"}