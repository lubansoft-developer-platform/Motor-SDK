define(["./when-45f3d25d","./Check-34538dad","./Cartesian3-ef6ea826","./Cartesian2-a652b463","./BoundingSphere-038d5fbc","./Transforms-c8a82813","./Matrix4-f54b529f","./RuntimeError-86da6af2","./WebGLConstants-3660bc8f","./ComponentDatatype-d28c2e26","./GeometryAttribute-dfebcc43","./PrimitiveType-30fa6f85","./GeometryAttributes-9d45f9e2","./IndexDatatype-6d2070e9","./IntersectionTests-b186d985","./Plane-a0c58786","./ArcType-39be7a32","./EllipsoidRhumbLine-0c6cd7c8","./EllipsoidGeodesic-1abfd38d","./PolylinePipeline-e4210f09","./Color-44055af0"],(function(e,o,r,t,a,i,l,n,s,p,d,f,c,y,u,h,C,T,g,m,v){"use strict";function P(e,o,r,t,a,i,l){var n,s=m.PolylinePipeline.numberOfPoints(e,o,a),p=r.red,d=r.green,f=r.blue,c=r.alpha,y=t.red,u=t.green,h=t.blue,C=t.alpha;if(v.Color.equals(r,t)){for(n=0;n<s;n++)i[l++]=v.Color.floatToByte(p),i[l++]=v.Color.floatToByte(d),i[l++]=v.Color.floatToByte(f),i[l++]=v.Color.floatToByte(c);return l}var T=(y-p)/s,g=(u-d)/s,P=(h-f)/s,b=(C-c)/s,_=l;for(n=0;n<s;n++)i[_++]=v.Color.floatToByte(p+n*T),i[_++]=v.Color.floatToByte(d+n*g),i[_++]=v.Color.floatToByte(f+n*P),i[_++]=v.Color.floatToByte(c+n*b);return _}function b(o){var a=(o=e.defaultValue(o,e.defaultValue.EMPTY_OBJECT)).positions,i=o.colors,l=e.defaultValue(o.colorsPerVertex,!1);this._positions=a,this._colors=i,this._colorsPerVertex=l,this._arcType=e.defaultValue(o.arcType,C.ArcType.GEODESIC),this._granularity=e.defaultValue(o.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.defaultValue(o.ellipsoid,t.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";var n=1+a.length*r.Cartesian3.packedLength;n+=e.defined(i)?1+i.length*v.Color.packedLength:1,this.packedLength=n+t.Ellipsoid.packedLength+3}b.pack=function(o,a,i){var l;i=e.defaultValue(i,0);var n=o._positions,s=n.length;for(a[i++]=s,l=0;l<s;++l,i+=r.Cartesian3.packedLength)r.Cartesian3.pack(n[l],a,i);var p=o._colors;for(s=e.defined(p)?p.length:0,a[i++]=s,l=0;l<s;++l,i+=v.Color.packedLength)v.Color.pack(p[l],a,i);return t.Ellipsoid.pack(o._ellipsoid,a,i),i+=t.Ellipsoid.packedLength,a[i++]=o._colorsPerVertex?1:0,a[i++]=o._arcType,a[i]=o._granularity,a},b.unpack=function(o,a,i){var l;a=e.defaultValue(a,0);var n=o[a++],s=new Array(n);for(l=0;l<n;++l,a+=r.Cartesian3.packedLength)s[l]=r.Cartesian3.unpack(o,a);var p=(n=o[a++])>0?new Array(n):void 0;for(l=0;l<n;++l,a+=v.Color.packedLength)p[l]=v.Color.unpack(o,a);var d=t.Ellipsoid.unpack(o,a);a+=t.Ellipsoid.packedLength;var f=1===o[a++],c=o[a++],y=o[a];return e.defined(i)?(i._positions=s,i._colors=p,i._ellipsoid=d,i._colorsPerVertex=f,i._arcType=c,i._granularity=y,i):new b({positions:s,colors:p,ellipsoid:d,colorsPerVertex:f,arcType:c,granularity:y})};var _=new Array(2),B=new Array(2),A={positions:_,height:B,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return b.createGeometry=function(o){var t,i,l,n,s,u=o._positions,h=o._colors,T=o._colorsPerVertex,g=o._arcType,b=o._granularity,E=o._ellipsoid,k=r.CesiumMath.chordLength(b,E.maximumRadius),G=e.defined(h)&&!T,w=u.length,D=0;if(g===C.ArcType.GEODESIC||g===C.ArcType.RHUMB){var L,V,x;g===C.ArcType.GEODESIC?(L=r.CesiumMath.chordLength(b,E.maximumRadius),V=m.PolylinePipeline.numberOfPoints,x=m.PolylinePipeline.generateArc):(L=b,V=m.PolylinePipeline.numberOfPointsRhumbLine,x=m.PolylinePipeline.generateRhumbArc);var S=m.PolylinePipeline.extractHeights(u,E),I=A;if(g===C.ArcType.GEODESIC?I.minDistance=k:I.granularity=b,I.ellipsoid=E,G){var R=0;for(t=0;t<w-1;t++)R+=V(u[t],u[t+1],L)+1;i=new Float64Array(3*R),n=new Uint8Array(4*R),I.positions=_,I.height=B;var O=0;for(t=0;t<w-1;++t){_[0]=u[t],_[1]=u[t+1],B[0]=S[t],B[1]=S[t+1];var M=x(I);if(e.defined(h)){var U=M.length/3;s=h[t];for(var N=0;N<U;++N)n[O++]=v.Color.floatToByte(s.red),n[O++]=v.Color.floatToByte(s.green),n[O++]=v.Color.floatToByte(s.blue),n[O++]=v.Color.floatToByte(s.alpha)}i.set(M,D),D+=M.length}}else if(I.positions=u,I.height=S,i=new Float64Array(x(I)),e.defined(h)){for(n=new Uint8Array(i.length/3*4),t=0;t<w-1;++t)D=P(u[t],u[t+1],h[t],h[t+1],k,n,D);var F=h[w-1];n[D++]=v.Color.floatToByte(F.red),n[D++]=v.Color.floatToByte(F.green),n[D++]=v.Color.floatToByte(F.blue),n[D++]=v.Color.floatToByte(F.alpha)}}else{l=G?2*w-2:w,i=new Float64Array(3*l),n=e.defined(h)?new Uint8Array(4*l):void 0;var H=0,W=0;for(t=0;t<w;++t){var Y=u[t];if(G&&t>0&&(r.Cartesian3.pack(Y,i,H),H+=3,s=h[t-1],n[W++]=v.Color.floatToByte(s.red),n[W++]=v.Color.floatToByte(s.green),n[W++]=v.Color.floatToByte(s.blue),n[W++]=v.Color.floatToByte(s.alpha)),G&&t===w-1)break;r.Cartesian3.pack(Y,i,H),H+=3,e.defined(h)&&(s=h[t],n[W++]=v.Color.floatToByte(s.red),n[W++]=v.Color.floatToByte(s.green),n[W++]=v.Color.floatToByte(s.blue),n[W++]=v.Color.floatToByte(s.alpha))}}var q=new c.GeometryAttributes;q.position=new d.GeometryAttribute({componentDatatype:p.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:i}),e.defined(h)&&(q.color=new d.GeometryAttribute({componentDatatype:p.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:n,normalize:!0}));var z=2*((l=i.length/3)-1),J=y.IndexDatatype.createTypedArray(l,z),j=0;for(t=0;t<l-1;++t)J[j++]=t,J[j++]=t+1;return new d.Geometry({attributes:q,indices:J,primitiveType:f.PrimitiveType.LINES,boundingSphere:a.BoundingSphere.fromPoints(u)})},function(o,r){return e.defined(r)&&(o=b.unpack(o,r)),o._ellipsoid=t.Ellipsoid.clone(o._ellipsoid),b.createGeometry(o)}}));