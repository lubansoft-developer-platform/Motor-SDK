{"version":3,"file":"Rectangle-c7d55cfa.js","sources":["../../../../Source/Core/Rectangle.js"],"sourcesContent":["import Cartographic from './Cartographic.js';\nimport Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport CesiumMath from './Math.js';\n\n    /**\n     * A two dimensional region specified as longitude and latitude coordinates.\n     *\n     * @alias Rectangle\n     * @constructor\n     *\n     * @param {Number} [west=0.0] The westernmost longitude, in radians, in the range [-Pi, Pi].\n     * @param {Number} [south=0.0] The southernmost latitude, in radians, in the range [-Pi/2, Pi/2].\n     * @param {Number} [east=0.0] The easternmost longitude, in radians, in the range [-Pi, Pi].\n     * @param {Number} [north=0.0] The northernmost latitude, in radians, in the range [-Pi/2, Pi/2].\n     *\n     * @see Packable\n     */\n    function Rectangle(west, south, east, north) {\n        /**\n         * The westernmost longitude in radians in the range [-Pi, Pi].\n         *\n         * @type {Number}\n         * @default 0.0\n         */\n        this.west = defaultValue(west, 0.0);\n\n        /**\n         * The southernmost latitude in radians in the range [-Pi/2, Pi/2].\n         *\n         * @type {Number}\n         * @default 0.0\n         */\n        this.south = defaultValue(south, 0.0);\n\n        /**\n         * The easternmost longitude in radians in the range [-Pi, Pi].\n         *\n         * @type {Number}\n         * @default 0.0\n         */\n        this.east = defaultValue(east, 0.0);\n\n        /**\n         * The northernmost latitude in radians in the range [-Pi/2, Pi/2].\n         *\n         * @type {Number}\n         * @default 0.0\n         */\n        this.north = defaultValue(north, 0.0);\n    }\n\n    Object.defineProperties(Rectangle.prototype, {\n        /**\n         * Gets the width of the rectangle in radians.\n         * @memberof Rectangle.prototype\n         * @type {Number}\n         */\n        width : {\n            get : function() {\n                return Rectangle.computeWidth(this);\n            }\n        },\n\n        /**\n         * Gets the height of the rectangle in radians.\n         * @memberof Rectangle.prototype\n         * @type {Number}\n         */\n        height : {\n            get : function() {\n                return Rectangle.computeHeight(this);\n            }\n        }\n    });\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    Rectangle.packedLength = 4;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {Rectangle} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    Rectangle.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        array[startingIndex++] = value.west;\n        array[startingIndex++] = value.south;\n        array[startingIndex++] = value.east;\n        array[startingIndex] = value.north;\n\n        return array;\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {Rectangle} [result] The object into which to store the result.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if one was not provided.\n     */\n    Rectangle.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        if (!defined(result)) {\n            result = new Rectangle();\n        }\n\n        result.west = array[startingIndex++];\n        result.south = array[startingIndex++];\n        result.east = array[startingIndex++];\n        result.north = array[startingIndex];\n        return result;\n    };\n\n    /**\n     * Computes the width of a rectangle in radians.\n     * @param {Rectangle} rectangle The rectangle to compute the width of.\n     * @returns {Number} The width.\n     */\n    Rectangle.computeWidth = function(rectangle) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        //>>includeEnd('debug');\n        var east = rectangle.east;\n        var west = rectangle.west;\n        if (east < west) {\n            east += CesiumMath.TWO_PI;\n        }\n        return east - west;\n    };\n\n    /**\n     * Computes the height of a rectangle in radians.\n     * @param {Rectangle} rectangle The rectangle to compute the height of.\n     * @returns {Number} The height.\n     */\n    Rectangle.computeHeight = function(rectangle) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        //>>includeEnd('debug');\n        return rectangle.north - rectangle.south;\n    };\n\n    /**\n     * Creates a rectangle given the boundary longitude and latitude in degrees.\n     *\n     * @param {Number} [west=0.0] The westernmost longitude in degrees in the range [-180.0, 180.0].\n     * @param {Number} [south=0.0] The southernmost latitude in degrees in the range [-90.0, 90.0].\n     * @param {Number} [east=0.0] The easternmost longitude in degrees in the range [-180.0, 180.0].\n     * @param {Number} [north=0.0] The northernmost latitude in degrees in the range [-90.0, 90.0].\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\n     *\n     * @example\n     * var rectangle = Cesium.Rectangle.fromDegrees(0.0, 20.0, 10.0, 30.0);\n     */\n    Rectangle.fromDegrees = function(west, south, east, north, result) {\n        west = CesiumMath.toRadians(defaultValue(west, 0.0));\n        south = CesiumMath.toRadians(defaultValue(south, 0.0));\n        east = CesiumMath.toRadians(defaultValue(east, 0.0));\n        north = CesiumMath.toRadians(defaultValue(north, 0.0));\n\n        if (!defined(result)) {\n            return new Rectangle(west, south, east, north);\n        }\n\n        result.west = west;\n        result.south = south;\n        result.east = east;\n        result.north = north;\n\n        return result;\n    };\n\n    /**\n     * Creates a rectangle given the boundary longitude and latitude in radians.\n     *\n     * @param {Number} [west=0.0] The westernmost longitude in radians in the range [-Math.PI, Math.PI].\n     * @param {Number} [south=0.0] The southernmost latitude in radians in the range [-Math.PI/2, Math.PI/2].\n     * @param {Number} [east=0.0] The easternmost longitude in radians in the range [-Math.PI, Math.PI].\n     * @param {Number} [north=0.0] The northernmost latitude in radians in the range [-Math.PI/2, Math.PI/2].\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\n     *\n     * @example\n     * var rectangle = Cesium.Rectangle.fromRadians(0.0, Math.PI/4, Math.PI/8, 3*Math.PI/4);\n     */\n    Rectangle.fromRadians = function(west, south, east, north, result) {\n        if (!defined(result)) {\n            return new Rectangle(west, south, east, north);\n        }\n\n        result.west = defaultValue(west, 0.0);\n        result.south = defaultValue(south, 0.0);\n        result.east = defaultValue(east, 0.0);\n        result.north = defaultValue(north, 0.0);\n\n        return result;\n    };\n\n    /**\n     * Creates the smallest possible Rectangle that encloses all positions in the provided array.\n     *\n     * @param {Cartographic[]} cartographics The list of Cartographic instances.\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\n     */\n    Rectangle.fromCartographicArray = function(cartographics, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('cartographics', cartographics);\n        //>>includeEnd('debug');\n\n        var west = Number.MAX_VALUE;\n        var east = -Number.MAX_VALUE;\n        var westOverIDL = Number.MAX_VALUE;\n        var eastOverIDL = -Number.MAX_VALUE;\n        var south = Number.MAX_VALUE;\n        var north = -Number.MAX_VALUE;\n\n        for ( var i = 0, len = cartographics.length; i < len; i++) {\n            var position = cartographics[i];\n            west = Math.min(west, position.longitude);\n            east = Math.max(east, position.longitude);\n            south = Math.min(south, position.latitude);\n            north = Math.max(north, position.latitude);\n\n            var lonAdjusted = position.longitude >= 0 ?  position.longitude : position.longitude +  CesiumMath.TWO_PI;\n            westOverIDL = Math.min(westOverIDL, lonAdjusted);\n            eastOverIDL = Math.max(eastOverIDL, lonAdjusted);\n        }\n\n        if(east - west > eastOverIDL - westOverIDL) {\n            west = westOverIDL;\n            east = eastOverIDL;\n\n            if (east > CesiumMath.PI) {\n                east = east - CesiumMath.TWO_PI;\n            }\n            if (west > CesiumMath.PI) {\n                west = west - CesiumMath.TWO_PI;\n            }\n        }\n\n        if (!defined(result)) {\n            return new Rectangle(west, south, east, north);\n        }\n\n        result.west = west;\n        result.south = south;\n        result.east = east;\n        result.north = north;\n        return result;\n    };\n\n    /**\n     * Creates the smallest possible Rectangle that encloses all positions in the provided array.\n     *\n     * @param {Cartesian3[]} cartesians The list of Cartesian instances.\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid the cartesians are on.\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\n     */\n    Rectangle.fromCartesianArray = function(cartesians, ellipsoid, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('cartesians', cartesians);\n        //>>includeEnd('debug');\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n        var west = Number.MAX_VALUE;\n        var east = -Number.MAX_VALUE;\n        var westOverIDL = Number.MAX_VALUE;\n        var eastOverIDL = -Number.MAX_VALUE;\n        var south = Number.MAX_VALUE;\n        var north = -Number.MAX_VALUE;\n\n        for ( var i = 0, len = cartesians.length; i < len; i++) {\n            var position = ellipsoid.cartesianToCartographic(cartesians[i]);\n            west = Math.min(west, position.longitude);\n            east = Math.max(east, position.longitude);\n            south = Math.min(south, position.latitude);\n            north = Math.max(north, position.latitude);\n\n            var lonAdjusted = position.longitude >= 0 ?  position.longitude : position.longitude +  CesiumMath.TWO_PI;\n            westOverIDL = Math.min(westOverIDL, lonAdjusted);\n            eastOverIDL = Math.max(eastOverIDL, lonAdjusted);\n        }\n\n        if(east - west > eastOverIDL - westOverIDL) {\n            west = westOverIDL;\n            east = eastOverIDL;\n\n            if (east > CesiumMath.PI) {\n                east = east - CesiumMath.TWO_PI;\n            }\n            if (west > CesiumMath.PI) {\n                west = west - CesiumMath.TWO_PI;\n            }\n        }\n\n        if (!defined(result)) {\n            return new Rectangle(west, south, east, north);\n        }\n\n        result.west = west;\n        result.south = south;\n        result.east = east;\n        result.north = north;\n        return result;\n    };\n\n    /**\n     * Duplicates a Rectangle.\n     *\n     * @param {Rectangle} rectangle The rectangle to clone.\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided. (Returns undefined if rectangle is undefined)\n     */\n    Rectangle.clone = function(rectangle, result) {\n        if (!defined(rectangle)) {\n            return undefined;\n        }\n\n        if (!defined(result)) {\n            return new Rectangle(rectangle.west, rectangle.south, rectangle.east, rectangle.north);\n        }\n\n        result.west = rectangle.west;\n        result.south = rectangle.south;\n        result.east = rectangle.east;\n        result.north = rectangle.north;\n        return result;\n    };\n\n    /**\n     * Compares the provided Rectangles componentwise and returns\n     * <code>true</code> if they pass an absolute or relative tolerance test,\n     * <code>false</code> otherwise.\n     *\n     * @param {Rectangle} [left] The first Rectangle.\n     * @param {Rectangle} [right] The second Rectangle.\n     * @param {Number} [absoluteEpsilon=0] The absolute epsilon tolerance to use for equality testing.\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n     */\n    Rectangle.equalsEpsilon = function(left, right, absoluteEpsilon) {\n        absoluteEpsilon = defaultValue(absoluteEpsilon, 0);\n\n        return (left === right) ||\n               (defined(left) &&\n                defined(right) &&\n                (Math.abs(left.west - right.west) <= absoluteEpsilon) &&\n                (Math.abs(left.south - right.south) <= absoluteEpsilon) &&\n                (Math.abs(left.east - right.east) <= absoluteEpsilon) &&\n                (Math.abs(left.north - right.north) <= absoluteEpsilon));\n    };\n\n    /**\n     * Duplicates this Rectangle.\n     *\n     * @param {Rectangle} [result] The object onto which to store the result.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\n     */\n    Rectangle.prototype.clone = function(result) {\n        return Rectangle.clone(this, result);\n    };\n\n    /**\n     * Compares the provided Rectangle with this Rectangle componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {Rectangle} [other] The Rectangle to compare.\n     * @returns {Boolean} <code>true</code> if the Rectangles are equal, <code>false</code> otherwise.\n     */\n    Rectangle.prototype.equals = function(other) {\n        return Rectangle.equals(this, other);\n    };\n\n    /**\n     * Compares the provided rectangles and returns <code>true</code> if they are equal,\n     * <code>false</code> otherwise.\n     *\n     * @param {Rectangle} [left] The first Rectangle.\n     * @param {Rectangle} [right] The second Rectangle.\n     * @returns {Boolean} <code>true</code> if left and right are equal; otherwise <code>false</code>.\n     */\n    Rectangle.equals = function(left, right) {\n        return (left === right) ||\n               ((defined(left)) &&\n                (defined(right)) &&\n                (left.west === right.west) &&\n                (left.south === right.south) &&\n                (left.east === right.east) &&\n                (left.north === right.north));\n    };\n\n    /**\n     * Compares the provided Rectangle with this Rectangle componentwise and returns\n     * <code>true</code> if they are within the provided epsilon,\n     * <code>false</code> otherwise.\n     *\n     * @param {Rectangle} [other] The Rectangle to compare.\n     * @param {Number} [epsilon=0] The epsilon to use for equality testing.\n     * @returns {Boolean} <code>true</code> if the Rectangles are within the provided epsilon, <code>false</code> otherwise.\n     */\n    Rectangle.prototype.equalsEpsilon = function(other, epsilon) {\n        epsilon = defaultValue(epsilon, 0);\n\n        return Rectangle.equalsEpsilon(this, other, epsilon);\n    };\n\n    /**\n     * Checks a Rectangle's properties and throws if they are not in valid ranges.\n     *\n     * @param {Rectangle} rectangle The rectangle to validate\n     *\n     * @exception {DeveloperError} <code>north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\n     * @exception {DeveloperError} <code>south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\n     * @exception {DeveloperError} <code>east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\n     * @exception {DeveloperError} <code>west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\n     */\n    Rectangle.validate = function(rectangle) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n\n        var north = rectangle.north;\n        Check.typeOf.number.greaterThanOrEquals('north', north, -CesiumMath.PI_OVER_TWO);\n        Check.typeOf.number.lessThanOrEquals('north', north, CesiumMath.PI_OVER_TWO);\n\n        var south = rectangle.south;\n        Check.typeOf.number.greaterThanOrEquals('south', south, -CesiumMath.PI_OVER_TWO);\n        Check.typeOf.number.lessThanOrEquals('south', south, CesiumMath.PI_OVER_TWO);\n\n        var west = rectangle.west;\n        Check.typeOf.number.greaterThanOrEquals('west', west, -Math.PI);\n        Check.typeOf.number.lessThanOrEquals('west', west, Math.PI);\n\n        var east = rectangle.east;\n        Check.typeOf.number.greaterThanOrEquals('east', east, -Math.PI);\n        Check.typeOf.number.lessThanOrEquals('east', east, Math.PI);\n        //>>includeEnd('debug');\n    };\n\n    /**\n     * Computes the southwest corner of a rectangle.\n     *\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\n     * @param {Cartographic} [result] The object onto which to store the result.\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\n     */\n    Rectangle.southwest = function(rectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            return new Cartographic(rectangle.west, rectangle.south);\n        }\n        result.longitude = rectangle.west;\n        result.latitude = rectangle.south;\n        result.height = 0.0;\n        return result;\n    };\n\n    /**\n     * Computes the northwest corner of a rectangle.\n     *\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\n     * @param {Cartographic} [result] The object onto which to store the result.\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\n     */\n    Rectangle.northwest = function(rectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            return new Cartographic(rectangle.west, rectangle.north);\n        }\n        result.longitude = rectangle.west;\n        result.latitude = rectangle.north;\n        result.height = 0.0;\n        return result;\n    };\n\n    /**\n     * Computes the northeast corner of a rectangle.\n     *\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\n     * @param {Cartographic} [result] The object onto which to store the result.\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\n     */\n    Rectangle.northeast = function(rectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            return new Cartographic(rectangle.east, rectangle.north);\n        }\n        result.longitude = rectangle.east;\n        result.latitude = rectangle.north;\n        result.height = 0.0;\n        return result;\n    };\n\n    /**\n     * Computes the southeast corner of a rectangle.\n     *\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\n     * @param {Cartographic} [result] The object onto which to store the result.\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\n     */\n    Rectangle.southeast = function(rectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            return new Cartographic(rectangle.east, rectangle.south);\n        }\n        result.longitude = rectangle.east;\n        result.latitude = rectangle.south;\n        result.height = 0.0;\n        return result;\n    };\n\n    /**\n     * Computes the center of a rectangle.\n     *\n     * @param {Rectangle} rectangle The rectangle for which to find the center\n     * @param {Cartographic} [result] The object onto which to store the result.\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\n     */\n    Rectangle.center = function(rectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        //>>includeEnd('debug');\n\n        var east = rectangle.east;\n        var west = rectangle.west;\n\n        if (east < west) {\n            east += CesiumMath.TWO_PI;\n        }\n\n        var longitude = CesiumMath.negativePiToPi((west + east) * 0.5);\n        var latitude = (rectangle.south + rectangle.north) * 0.5;\n\n        if (!defined(result)) {\n            return new Cartographic(longitude, latitude);\n        }\n\n        result.longitude = longitude;\n        result.latitude = latitude;\n        result.height = 0.0;\n        return result;\n    };\n\n    /**\n     * Computes the intersection of two rectangles.  This function assumes that the rectangle's coordinates are\n     * latitude and longitude in radians and produces a correct intersection, taking into account the fact that\n     * the same angle can be represented with multiple values as well as the wrapping of longitude at the\n     * anti-meridian.  For a simple intersection that ignores these factors and can be used with projected\n     * coordinates, see {@link Rectangle.simpleIntersection}.\n     *\n     * @param {Rectangle} rectangle On rectangle to find an intersection\n     * @param {Rectangle} otherRectangle Another rectangle to find an intersection\n     * @param {Rectangle} [result] The object onto which to store the result.\n     * @returns {Rectangle|undefined} The modified result parameter, a new Rectangle instance if none was provided or undefined if there is no intersection.\n     */\n    Rectangle.intersection = function(rectangle, otherRectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        Check.typeOf.object('otherRectangle', otherRectangle);\n        //>>includeEnd('debug');\n\n        var rectangleEast = rectangle.east;\n        var rectangleWest = rectangle.west;\n\n        var otherRectangleEast = otherRectangle.east;\n        var otherRectangleWest = otherRectangle.west;\n\n        if (rectangleEast < rectangleWest && otherRectangleEast > 0.0) {\n            rectangleEast += CesiumMath.TWO_PI;\n        } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0.0) {\n            otherRectangleEast += CesiumMath.TWO_PI;\n        }\n\n        if (rectangleEast < rectangleWest && otherRectangleWest < 0.0) {\n            otherRectangleWest += CesiumMath.TWO_PI;\n        } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0.0) {\n            rectangleWest += CesiumMath.TWO_PI;\n        }\n\n        var west = CesiumMath.negativePiToPi(Math.max(rectangleWest, otherRectangleWest));\n        var east = CesiumMath.negativePiToPi(Math.min(rectangleEast, otherRectangleEast));\n\n        if ((rectangle.west < rectangle.east || otherRectangle.west < otherRectangle.east) && east <= west) {\n            return undefined;\n        }\n\n        var south = Math.max(rectangle.south, otherRectangle.south);\n        var north = Math.min(rectangle.north, otherRectangle.north);\n\n        if (south >= north) {\n            return undefined;\n        }\n\n        if (!defined(result)) {\n            return new Rectangle(west, south, east, north);\n        }\n        result.west = west;\n        result.south = south;\n        result.east = east;\n        result.north = north;\n        return result;\n    };\n\n    /**\n     * Computes a simple intersection of two rectangles.  Unlike {@link Rectangle.intersection}, this function\n     * does not attempt to put the angular coordinates into a consistent range or to account for crossing the\n     * anti-meridian.  As such, it can be used for rectangles where the coordinates are not simply latitude\n     * and longitude (i.e. projected coordinates).\n     *\n     * @param {Rectangle} rectangle On rectangle to find an intersection\n     * @param {Rectangle} otherRectangle Another rectangle to find an intersection\n     * @param {Rectangle} [result] The object onto which to store the result.\n     * @returns {Rectangle|undefined} The modified result parameter, a new Rectangle instance if none was provided or undefined if there is no intersection.\n     */\n    Rectangle.simpleIntersection = function(rectangle, otherRectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        Check.typeOf.object('otherRectangle', otherRectangle);\n        //>>includeEnd('debug');\n\n        var west = Math.max(rectangle.west, otherRectangle.west);\n        var south = Math.max(rectangle.south, otherRectangle.south);\n        var east = Math.min(rectangle.east, otherRectangle.east);\n        var north = Math.min(rectangle.north, otherRectangle.north);\n\n        if (south >= north || west >= east) {\n            return undefined;\n        }\n\n        if (!defined(result)) {\n            return new Rectangle(west, south, east, north);\n        }\n\n        result.west = west;\n        result.south = south;\n        result.east = east;\n        result.north = north;\n        return result;\n    };\n\n    /**\n     * Computes a rectangle that is the union of two rectangles.\n     *\n     * @param {Rectangle} rectangle A rectangle to enclose in rectangle.\n     * @param {Rectangle} otherRectangle A rectangle to enclose in a rectangle.\n     * @param {Rectangle} [result] The object onto which to store the result.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\n     */\n    Rectangle.union = function(rectangle, otherRectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        Check.typeOf.object('otherRectangle', otherRectangle);\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new Rectangle();\n        }\n\n        var rectangleEast = rectangle.east;\n        var rectangleWest = rectangle.west;\n\n        var otherRectangleEast = otherRectangle.east;\n        var otherRectangleWest = otherRectangle.west;\n\n        if (rectangleEast < rectangleWest && otherRectangleEast > 0.0) {\n            rectangleEast += CesiumMath.TWO_PI;\n        } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0.0) {\n            otherRectangleEast += CesiumMath.TWO_PI;\n        }\n\n        if (rectangleEast < rectangleWest && otherRectangleWest < 0.0) {\n            otherRectangleWest += CesiumMath.TWO_PI;\n        } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0.0) {\n            rectangleWest += CesiumMath.TWO_PI;\n        }\n\n        var west = CesiumMath.convertLongitudeRange(Math.min(rectangleWest, otherRectangleWest));\n        var east = CesiumMath.convertLongitudeRange(Math.max(rectangleEast, otherRectangleEast));\n\n        result.west = west;\n        result.south = Math.min(rectangle.south, otherRectangle.south);\n        result.east = east;\n        result.north = Math.max(rectangle.north, otherRectangle.north);\n\n        return result;\n    };\n\n    /**\n     * Computes a rectangle by enlarging the provided rectangle until it contains the provided cartographic.\n     *\n     * @param {Rectangle} rectangle A rectangle to expand.\n     * @param {Cartographic} cartographic A cartographic to enclose in a rectangle.\n     * @param {Rectangle} [result] The object onto which to store the result.\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if one was not provided.\n     */\n    Rectangle.expand = function(rectangle, cartographic, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        Check.typeOf.object('cartographic', cartographic);\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new Rectangle();\n        }\n\n        result.west = Math.min(rectangle.west, cartographic.longitude);\n        result.south = Math.min(rectangle.south, cartographic.latitude);\n        result.east = Math.max(rectangle.east, cartographic.longitude);\n        result.north = Math.max(rectangle.north, cartographic.latitude);\n\n        return result;\n    };\n\n    /**\n     * Returns true if the cartographic is on or inside the rectangle, false otherwise.\n     *\n     * @param {Rectangle} rectangle The rectangle\n     * @param {Cartographic} cartographic The cartographic to test.\n     * @returns {Boolean} true if the provided cartographic is inside the rectangle, false otherwise.\n     */\n    Rectangle.contains = function(rectangle, cartographic) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        Check.typeOf.object('cartographic', cartographic);\n        //>>includeEnd('debug');\n\n        var longitude = cartographic.longitude;\n        var latitude = cartographic.latitude;\n\n        var west = rectangle.west;\n        var east = rectangle.east;\n\n        if (east < west) {\n            east += CesiumMath.TWO_PI;\n            if (longitude < 0.0) {\n                longitude += CesiumMath.TWO_PI;\n            }\n        }\n        return (longitude > west || CesiumMath.equalsEpsilon(longitude, west, CesiumMath.EPSILON14)) &&\n               (longitude < east || CesiumMath.equalsEpsilon(longitude, east, CesiumMath.EPSILON14)) &&\n               latitude >= rectangle.south &&\n               latitude <= rectangle.north;\n    };\n\n    var subsampleLlaScratch = new Cartographic();\n    /**\n     * Samples a rectangle so that it includes a list of Cartesian points suitable for passing to\n     * {@link BoundingSphere#fromPoints}.  Sampling is necessary to account\n     * for rectangles that cover the poles or cross the equator.\n     *\n     * @param {Rectangle} rectangle The rectangle to subsample.\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\n     * @param {Number} [surfaceHeight=0.0] The height of the rectangle above the ellipsoid.\n     * @param {Cartesian3[]} [result] The array of Cartesians onto which to store the result.\n     * @returns {Cartesian3[]} The modified result parameter or a new Array of Cartesians instances if none was provided.\n     */\n    Rectangle.subsample = function(rectangle, ellipsoid, surfaceHeight, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('rectangle', rectangle);\n        //>>includeEnd('debug');\n\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n        surfaceHeight = defaultValue(surfaceHeight, 0.0);\n\n        if (!defined(result)) {\n            result = [];\n        }\n        var length = 0;\n\n        var north = rectangle.north;\n        var south = rectangle.south;\n        var east = rectangle.east;\n        var west = rectangle.west;\n\n        var lla = subsampleLlaScratch;\n        lla.height = surfaceHeight;\n\n        lla.longitude = west;\n        lla.latitude = north;\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\n        length++;\n\n        lla.longitude = east;\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\n        length++;\n\n        lla.latitude = south;\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\n        length++;\n\n        lla.longitude = west;\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\n        length++;\n\n        if (north < 0.0) {\n            lla.latitude = north;\n        } else if (south > 0.0) {\n            lla.latitude = south;\n        } else {\n            lla.latitude = 0.0;\n        }\n\n        for ( var i = 1; i < 8; ++i) {\n            lla.longitude = -Math.PI + i * CesiumMath.PI_OVER_TWO;\n            if (Rectangle.contains(rectangle, lla)) {\n                result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\n                length++;\n            }\n        }\n\n        if (lla.latitude === 0.0) {\n            lla.longitude = west;\n            result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\n            length++;\n            lla.longitude = east;\n            result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\n            length++;\n        }\n        result.length = length;\n        return result;\n    };\n\n    /**\n     * The largest possible rectangle.\n     *\n     * @type {Rectangle}\n     * @constant\n    */\n    Rectangle.MAX_VALUE = Object.freeze(new Rectangle(-Math.PI, -CesiumMath.PI_OVER_TWO, Math.PI, CesiumMath.PI_OVER_TWO));\nexport default Rectangle;\n"],"names":["defaultValue","Check","defined","CesiumMath","Ellipsoid","Cartographic"],"mappings":"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"}