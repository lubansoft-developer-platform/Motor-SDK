define(["exports","./when-45f3d25d","./Check-34538dad","./Cartesian3-eab74dc0","./Cartesian2-174fefc1","./Matrix4-ed224189","./IntersectionTests-bcbcfcb9","./Plane-87957166","./EllipsoidRhumbLine-de5cdc57","./EllipsoidGeodesic-96429ebd"],(function(a,e,r,t,i,n,o,s,c,u){"use strict";var l={getTriangleArea:function(a){let e=t.Cartesian3.subtract(a[0],a[1],new t.Cartesian3),r=t.Cartesian3.subtract(a[0],a[2],new t.Cartesian3),i=t.Cartesian3.cross(e,r,new t.Cartesian3);return.5*t.Cartesian3.magnitude(i)},numberOfPoints:function(a,e,r){var i=t.Cartesian3.distance(a,e);return Math.ceil(i/r)},numberOfPointsRhumbLine:function(a,e,r){var t=Math.pow(a.longitude-e.longitude,2)+Math.pow(a.latitude-e.latitude,2);return Math.ceil(Math.sqrt(t/(r*r)))}},h=new i.Cartographic;l.extractHeights=function(a,e){for(var r=a.length,t=new Array(r),i=0;i<r;i++){var n=a[i];t[i]=e.cartesianToCartographic(n,h).height}return t};var f=new n.Matrix4,d=new t.Cartesian3,C=new t.Cartesian3,g=new s.Plane(t.Cartesian3.UNIT_X,0),p=new t.Cartesian3,v=new s.Plane(t.Cartesian3.UNIT_X,0),m=new t.Cartesian3,w=new t.Cartesian3,T=[];function P(a,e,r){var t,i=T;if(i.length=a,e===r){for(t=0;t<a;t++)i[t]=e;return i}var n=r-e,o=n/a;for(t=0;t<a;t++){var s=e+t*o;i[t]=s}return i}var y=new i.Cartographic,b=new i.Cartographic,A=new t.Cartesian3,E=new t.Cartesian3,S=new t.Cartesian3,R=new u.EllipsoidGeodesic,D=new c.EllipsoidRhumbLine;function M(a,e,r,i,n,o,s,c){var u=i.scaleToGeodeticSurface(a,E),h=i.scaleToGeodeticSurface(e,S),f=l.numberOfPoints(a,e,r),d=i.cartesianToCartographic(u,y),C=i.cartesianToCartographic(h,b),g=P(f,n,o);R.setEndPoints(d,C);var p=R.surfaceDistance/f,v=c;d.height=n;var m=i.cartographicToCartesian(d,A);t.Cartesian3.pack(m,s,v),v+=3;for(var w=1;w<f;w++){var T=R.interpolateUsingSurfaceDistance(w*p,b);T.height=g[w],m=i.cartographicToCartesian(T,A),t.Cartesian3.pack(m,s,v),v+=3}return v}function x(a,e,r,i,n,o,s,u){var h=i.scaleToGeodeticSurface(a,E),f=i.scaleToGeodeticSurface(e,S),d=i.cartesianToCartographic(h,y),C=i.cartesianToCartographic(f,b),g=l.numberOfPointsRhumbLine(d,C,r),p=P(g,n,o);D.ellipsoid.equals(i)||(D=new c.EllipsoidRhumbLine(void 0,void 0,i)),D.setEndPoints(d,C);var v=D.surfaceDistance/g,m=u;d.height=n;var w=i.cartographicToCartesian(d,A);t.Cartesian3.pack(w,s,m),m+=3;for(var T=1;T<g;T++){var R=D.interpolateUsingSurfaceDistance(T*v,b);R.height=p[T],w=i.cartographicToCartesian(R,A),t.Cartesian3.pack(w,s,m),m+=3}return m}l.wrapLongitude=function(a,r){var i=[],c=[];if(e.defined(a)&&a.length>0){r=e.defaultValue(r,n.Matrix4.IDENTITY);var u=n.Matrix4.inverseTransformation(r,f),l=n.Matrix4.multiplyByPoint(u,t.Cartesian3.ZERO,d),h=t.Cartesian3.normalize(n.Matrix4.multiplyByPointAsVector(u,t.Cartesian3.UNIT_Y,C),C),T=s.Plane.fromPointNormal(l,h,g),P=t.Cartesian3.normalize(n.Matrix4.multiplyByPointAsVector(u,t.Cartesian3.UNIT_X,p),p),y=s.Plane.fromPointNormal(l,P,v),b=1;i.push(t.Cartesian3.clone(a[0]));for(var A=i[0],E=a.length,S=1;S<E;++S){var R=a[S];if(s.Plane.getPointDistance(y,A)<0||s.Plane.getPointDistance(y,R)<0){var D=o.IntersectionTests.lineSegmentPlane(A,R,T,m);if(e.defined(D)){var M=t.Cartesian3.multiplyByScalar(h,5e-9,w);s.Plane.getPointDistance(T,A)<0&&t.Cartesian3.negate(M,M),i.push(t.Cartesian3.add(D,M,new t.Cartesian3)),c.push(b+1),t.Cartesian3.negate(M,M),i.push(t.Cartesian3.add(D,M,new t.Cartesian3)),b=1}}i.push(t.Cartesian3.clone(a[S])),b++,A=R}c.push(b)}return{positions:i,lengths:c}},l.generateArc=function(a){e.defined(a)||(a={});var n=a.positions;if(!e.defined(n))throw new r.DeveloperError("options.positions is required.");var o=n.length,s=e.defaultValue(a.ellipsoid,i.Ellipsoid.WGS84),c=e.defaultValue(a.height,0),u=Array.isArray(c);if(o<1)return[];if(1===o){var h=s.scaleToGeodeticSurface(n[0],E);if(c=u?c[0]:c,0!==c){var f=s.geodeticSurfaceNormal(h,A);t.Cartesian3.multiplyByScalar(f,c,f),t.Cartesian3.add(h,f,h)}return[h.x,h.y,h.z]}var d=a.minDistance;if(!e.defined(d)){var C=e.defaultValue(a.granularity,t.CesiumMath.RADIANS_PER_DEGREE);d=t.CesiumMath.chordLength(C,s.maximumRadius)}var g,p=0;for(g=0;g<o-1;g++)p+=l.numberOfPoints(n[g],n[g+1],d);var v=3*(p+1),m=new Array(v),w=0;for(g=0;g<o-1;g++){var P=n[g],b=n[g+1],S=u?c[g]:c,R=u?c[g+1]:c;w=M(P,b,d,s,S,R,m,w)}T.length=0;var D=n[o-1],x=s.cartesianToCartographic(D,y);x.height=u?c[o-1]:c;var G=s.cartographicToCartesian(x,A);return t.Cartesian3.pack(G,m,v-3),m};var G=new i.Cartographic,N=new i.Cartographic;l.generateRhumbArc=function(a){e.defined(a)||(a={});var n=a.positions;if(!e.defined(n))throw new r.DeveloperError("options.positions is required.");var o=n.length,s=e.defaultValue(a.ellipsoid,i.Ellipsoid.WGS84),c=e.defaultValue(a.height,0),u=Array.isArray(c);if(o<1)return[];if(1===o){var h=s.scaleToGeodeticSurface(n[0],E);if(c=u?c[0]:c,0!==c){var f=s.geodeticSurfaceNormal(h,A);t.Cartesian3.multiplyByScalar(f,c,f),t.Cartesian3.add(h,f,h)}return[h.x,h.y,h.z]}var d,C,g=e.defaultValue(a.granularity,t.CesiumMath.RADIANS_PER_DEGREE),p=0,v=s.cartesianToCartographic(n[0],G);for(d=0;d<o-1;d++)C=s.cartesianToCartographic(n[d+1],N),p+=l.numberOfPointsRhumbLine(v,C,g),v=i.Cartographic.clone(C,G);var m=3*(p+1),w=new Array(m),P=0;for(d=0;d<o-1;d++){var b=n[d],S=n[d+1],R=u?c[d]:c,D=u?c[d+1]:c;P=x(b,S,g,s,R,D,w,P)}T.length=0;var M=n[o-1],I=s.cartesianToCartographic(M,y);I.height=u?c[o-1]:c;var k=s.cartographicToCartesian(I,A);return t.Cartesian3.pack(k,w,m-3),w},l.generateCartesianArc=function(a){for(var e=l.generateArc(a),r=e.length/3,i=new Array(r),n=0;n<r;n++)i[n]=t.Cartesian3.unpack(e,3*n);return i},l.generateCartesianRhumbArc=function(a){for(var e=l.generateRhumbArc(a),r=e.length/3,i=new Array(r),n=0;n<r;n++)i[n]=t.Cartesian3.unpack(e,3*n);return i},a.PolylinePipeline=l}));