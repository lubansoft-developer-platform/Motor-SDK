{"version":3,"file":"EllipsoidTangentPlane-64b84590.js","sources":["../../Source/Core/EllipsoidTangentPlane.js"],"sourcesContent":["import AxisAlignedBoundingBox from './AxisAlignedBoundingBox.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport IntersectionTests from './IntersectionTests.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport Plane from './Plane.js';\r\nimport Ray from './Ray.js';\r\nimport Transforms from './Transforms.js';\r\n\r\n    var scratchCart4 = new Cartesian4();\r\n    /**\r\n     * A plane tangent to the provided ellipsoid at the provided origin.\r\n     * If origin is not on the surface of the ellipsoid, it's surface projection will be used.\r\n     * If origin is at the center of the ellipsoid, an exception will be thrown.\r\n     * @alias EllipsoidTangentPlane\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} origin The point on the surface of the ellipsoid where the tangent plane touches.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n     *\r\n     * @exception {DeveloperError} origin must not be at the center of the ellipsoid.\r\n     */\r\n    function EllipsoidTangentPlane(origin, ellipsoid) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('origin', origin);\r\n        //>>includeEnd('debug');\r\n\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        origin = ellipsoid.scaleToGeodeticSurface(origin);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(origin)) {\r\n            throw new DeveloperError('origin must not be at the center of the ellipsoid.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var eastNorthUp = Transforms.eastNorthUpToFixedFrame(origin, ellipsoid);\r\n        this._ellipsoid = ellipsoid;\r\n        this._origin = origin;\r\n        this._xAxis = Cartesian3.fromCartesian4(Matrix4.getColumn(eastNorthUp, 0, scratchCart4));\r\n        this._yAxis = Cartesian3.fromCartesian4(Matrix4.getColumn(eastNorthUp, 1, scratchCart4));\r\n\r\n        var normal = Cartesian3.fromCartesian4(Matrix4.getColumn(eastNorthUp, 2, scratchCart4));\r\n        this._plane = Plane.fromPointNormal(origin, normal);\r\n    }\r\n\r\n    Object.defineProperties(EllipsoidTangentPlane.prototype, {\r\n        /**\r\n         * Gets the ellipsoid.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @type {Ellipsoid}\r\n         */\r\n        ellipsoid : {\r\n            get : function() {\r\n                return this._ellipsoid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the origin.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @type {Cartesian3}\r\n         */\r\n        origin : {\r\n            get : function() {\r\n                return this._origin;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the plane which is tangent to the ellipsoid.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @readonly\r\n         * @type {Plane}\r\n         */\r\n        plane : {\r\n            get : function() {\r\n                return this._plane;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the local X-axis (east) of the tangent plane.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @readonly\r\n         * @type {Cartesian3}\r\n         */\r\n        xAxis : {\r\n            get : function() {\r\n                return this._xAxis;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the local Y-axis (north) of the tangent plane.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @readonly\r\n         * @type {Cartesian3}\r\n         */\r\n        yAxis : {\r\n            get : function() {\r\n                return this._yAxis;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the local Z-axis (up) of the tangent plane.\r\n         * @member EllipsoidTangentPlane.prototype\r\n         * @readonly\r\n         * @type {Cartesian3}\r\n         */\r\n        zAxis : {\r\n            get : function() {\r\n                return this._plane.normal;\r\n            }\r\n        }\r\n    });\r\n\r\n    var tmp = new AxisAlignedBoundingBox();\r\n    /**\r\n     * Creates a new instance from the provided ellipsoid and the center\r\n     * point of the provided Cartesians.\r\n     *\r\n     * @param {Cartesian3} cartesians The list of positions surrounding the center point.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n     */\r\n    EllipsoidTangentPlane.fromPoints = function(cartesians, ellipsoid) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesians', cartesians);\r\n        //>>includeEnd('debug');\r\n\r\n        var box = AxisAlignedBoundingBox.fromPoints(cartesians, tmp);\r\n        return new EllipsoidTangentPlane(box.center, ellipsoid);\r\n    };\r\n\r\n    var scratchProjectPointOntoPlaneRay = new Ray();\r\n    var scratchProjectPointOntoPlaneCartesian3 = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the projection of the provided 3D position onto the 2D plane, radially outward from the {@link EllipsoidTangentPlane.ellipsoid} coordinate system origin.\r\n     *\r\n     * @param {Cartesian3} cartesian The point to project.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided. Undefined if there is no intersection point\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointOntoPlane = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        var ray = scratchProjectPointOntoPlaneRay;\r\n        ray.origin = cartesian;\r\n        Cartesian3.normalize(cartesian, ray.direction);\r\n\r\n        var intersectionPoint = IntersectionTests.rayPlane(ray, this._plane, scratchProjectPointOntoPlaneCartesian3);\r\n        if (!defined(intersectionPoint)) {\r\n            Cartesian3.negate(ray.direction, ray.direction);\r\n            intersectionPoint = IntersectionTests.rayPlane(ray, this._plane, scratchProjectPointOntoPlaneCartesian3);\r\n        }\r\n\r\n        if (defined(intersectionPoint)) {\r\n            var v = Cartesian3.subtract(intersectionPoint, this._origin, intersectionPoint);\r\n            var x = Cartesian3.dot(this._xAxis, v);\r\n            var y = Cartesian3.dot(this._yAxis, v);\r\n\r\n            if (!defined(result)) {\r\n                return new Cartesian2(x, y);\r\n            }\r\n            result.x = x;\r\n            result.y = y;\r\n            return result;\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Computes the projection of the provided 3D positions onto the 2D plane (where possible), radially outward from the global origin.\r\n     * The resulting array may be shorter than the input array - if a single projection is impossible it will not be included.\r\n     *\r\n     * @see EllipsoidTangentPlane.projectPointOntoPlane\r\n     *\r\n     * @param {Cartesian3[]} cartesians The array of points to project.\r\n     * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\r\n     * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointsOntoPlane = function(cartesians, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesians', cartesians);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n\r\n        var count = 0;\r\n        var length = cartesians.length;\r\n        for ( var i = 0; i < length; i++) {\r\n            var p = this.projectPointOntoPlane(cartesians[i], result[count]);\r\n            if (defined(p)) {\r\n                result[count] = p;\r\n                count++;\r\n            }\r\n        }\r\n        result.length = count;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the projection of the provided 3D position onto the 2D plane, along the plane normal.\r\n     *\r\n     * @param {Cartesian3} cartesian The point to project.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointToNearestOnPlane = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian2();\r\n        }\r\n\r\n        var ray = scratchProjectPointOntoPlaneRay;\r\n        ray.origin = cartesian;\r\n        Cartesian3.clone(this._plane.normal, ray.direction);\r\n\r\n        var intersectionPoint = IntersectionTests.rayPlane(ray, this._plane, scratchProjectPointOntoPlaneCartesian3);\r\n        if (!defined(intersectionPoint)) {\r\n            Cartesian3.negate(ray.direction, ray.direction);\r\n            intersectionPoint = IntersectionTests.rayPlane(ray, this._plane, scratchProjectPointOntoPlaneCartesian3);\r\n        }\r\n\r\n        var v = Cartesian3.subtract(intersectionPoint, this._origin, intersectionPoint);\r\n        var x = Cartesian3.dot(this._xAxis, v);\r\n        var y = Cartesian3.dot(this._yAxis, v);\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the projection of the provided 3D positions onto the 2D plane, along the plane normal.\r\n     *\r\n     * @see EllipsoidTangentPlane.projectPointToNearestOnPlane\r\n     *\r\n     * @param {Cartesian3[]} cartesians The array of points to project.\r\n     * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\r\n     * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided. This will have the same length as <code>cartesians</code>.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointsToNearestOnPlane = function(cartesians, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesians', cartesians);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n\r\n        var length = cartesians.length;\r\n        result.length = length;\r\n        for (var i = 0; i < length; i++) {\r\n            result[i] = this.projectPointToNearestOnPlane(cartesians[i], result[i]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    var projectPointsOntoEllipsoidScratch = new Cartesian3();\r\n    /**\r\n     * Computes the projection of the provided 2D position onto the 3D ellipsoid.\r\n     *\r\n     * @param {Cartesian2} cartesian The points to project.\r\n     * @param {Cartesian3} [result] The Cartesian3 instance to store result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointOntoEllipsoid = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var ellipsoid = this._ellipsoid;\r\n        var origin = this._origin;\r\n        var xAxis = this._xAxis;\r\n        var yAxis = this._yAxis;\r\n        var tmp = projectPointsOntoEllipsoidScratch;\r\n\r\n        Cartesian3.multiplyByScalar(xAxis, cartesian.x, tmp);\r\n        result = Cartesian3.add(origin, tmp, result);\r\n        Cartesian3.multiplyByScalar(yAxis, cartesian.y, tmp);\r\n        Cartesian3.add(result, tmp, result);\r\n        ellipsoid.scaleToGeocentricSurface(result, result);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the projection of the provided 2D positions onto the 3D ellipsoid.\r\n     *\r\n     * @param {Cartesian2[]} cartesians The array of points to project.\r\n     * @param {Cartesian3[]} [result] The array of Cartesian3 instances onto which to store results.\r\n     * @returns {Cartesian3[]} The modified result parameter or a new array of Cartesian3 instances if none was provided.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointsOntoEllipsoid = function(cartesians, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesians', cartesians);\r\n        //>>includeEnd('debug');\r\n\r\n        var length = cartesians.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length);\r\n        } else {\r\n            result.length = length;\r\n        }\r\n\r\n        for ( var i = 0; i < length; ++i) {\r\n            result[i] = this.projectPointOntoEllipsoid(cartesians[i], result[i]);\r\n        }\r\n\r\n        return result;\r\n    };\r\nexport default EllipsoidTangentPlane;\r\n"],"names":["Cartesian4","Check","defaultValue","Ellipsoid","defined","DeveloperError","Transforms","Cartesian3","Matrix4","Plane","AxisAlignedBoundingBox","Ray","IntersectionTests","Cartesian2"],"mappings":"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"}