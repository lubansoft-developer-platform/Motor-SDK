define(["./when-45f3d25d","./Check-34538dad","./Cartesian3-ef6ea826","./Cartesian2-a652b463","./BoundingSphere-038d5fbc","./Transforms-c8a82813","./Matrix4-f54b529f","./RuntimeError-86da6af2","./WebGLConstants-3660bc8f","./ComponentDatatype-d28c2e26","./GeometryAttribute-dfebcc43","./PrimitiveType-30fa6f85","./GeometryAttributes-9d45f9e2","./IndexDatatype-6d2070e9","./IntersectionTests-b186d985","./Plane-a0c58786","./VertexFormat-06aa4e32","./AxisAlignedBoundingBox-9187558e","./EllipsoidTangentPlane-dd3d1016","./EllipsoidRhumbLine-0c6cd7c8","./PolygonPipeline-28c8c9d7","./EllipsoidGeodesic-1abfd38d","./PolylinePipeline-e4210f09","./WallGeometryLibrary-35ddfbc5"],(function(e,t,a,i,n,r,o,s,m,l,d,p,u,c,f,y,g,h,v,C,x,A,b,_){"use strict";var E=new a.Cartesian3,w=new a.Cartesian3,F=new a.Cartesian3,L=new a.Cartesian3,P=new a.Cartesian3,k=new a.Cartesian3,G=new a.Cartesian3,H=new a.Cartesian3;function T(t){var n=(t=e.defaultValue(t,e.defaultValue.EMPTY_OBJECT)).positions,r=t.maximumHeights,o=t.minimumHeights,s=e.defaultValue(t.vertexFormat,g.VertexFormat.DEFAULT),m=e.defaultValue(t.granularity,a.CesiumMath.RADIANS_PER_DEGREE),l=e.defaultValue(t.ellipsoid,i.Ellipsoid.WGS84);this._positions=n,this._minimumHeights=o,this._maximumHeights=r,this._vertexFormat=g.VertexFormat.clone(s),this._granularity=m,this._ellipsoid=i.Ellipsoid.clone(l),this._workerName="createWallGeometry";var d=1+n.length*a.Cartesian3.packedLength+2;e.defined(o)&&(d+=o.length),e.defined(r)&&(d+=r.length),this.packedLength=d+i.Ellipsoid.packedLength+g.VertexFormat.packedLength+1}T.pack=function(t,n,r){var o;r=e.defaultValue(r,0);var s=t._positions,m=s.length;for(n[r++]=m,o=0;o<m;++o,r+=a.Cartesian3.packedLength)a.Cartesian3.pack(s[o],n,r);var l=t._minimumHeights;if(m=e.defined(l)?l.length:0,n[r++]=m,e.defined(l))for(o=0;o<m;++o)n[r++]=l[o];var d=t._maximumHeights;if(m=e.defined(d)?d.length:0,n[r++]=m,e.defined(d))for(o=0;o<m;++o)n[r++]=d[o];return i.Ellipsoid.pack(t._ellipsoid,n,r),r+=i.Ellipsoid.packedLength,g.VertexFormat.pack(t._vertexFormat,n,r),n[r+=g.VertexFormat.packedLength]=t._granularity,n};var V=i.Ellipsoid.clone(i.Ellipsoid.UNIT_SPHERE),D=new g.VertexFormat,z={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:V,vertexFormat:D,granularity:void 0};return T.unpack=function(t,n,r){var o;n=e.defaultValue(n,0);var s,m,l=t[n++],d=new Array(l);for(o=0;o<l;++o,n+=a.Cartesian3.packedLength)d[o]=a.Cartesian3.unpack(t,n);if((l=t[n++])>0)for(s=new Array(l),o=0;o<l;++o)s[o]=t[n++];if((l=t[n++])>0)for(m=new Array(l),o=0;o<l;++o)m[o]=t[n++];var p=i.Ellipsoid.unpack(t,n,V);n+=i.Ellipsoid.packedLength;var u=g.VertexFormat.unpack(t,n,D),c=t[n+=g.VertexFormat.packedLength];return e.defined(r)?(r._positions=d,r._minimumHeights=s,r._maximumHeights=m,r._ellipsoid=i.Ellipsoid.clone(p,r._ellipsoid),r._vertexFormat=g.VertexFormat.clone(u,r._vertexFormat),r._granularity=c,r):(z.positions=d,z.minimumHeights=s,z.maximumHeights=m,z.granularity=c,new T(z))},T.fromConstantHeights=function(t){var a,i,n=(t=e.defaultValue(t,e.defaultValue.EMPTY_OBJECT)).positions,r=t.minimumHeight,o=t.maximumHeight,s=e.defined(r),m=e.defined(o);if(s||m){var l=n.length;a=s?new Array(l):void 0,i=m?new Array(l):void 0;for(var d=0;d<l;++d)s&&(a[d]=r),m&&(i[d]=o)}return new T({positions:n,maximumHeights:i,minimumHeights:a,ellipsoid:t.ellipsoid,vertexFormat:t.vertexFormat})},T.createGeometry=function(t){var i=t._positions,r=t._minimumHeights,o=t._maximumHeights,s=t._vertexFormat,m=t._granularity,f=t._ellipsoid,y=_.WallGeometryLibrary.computePositions(f,i,o,r,m,!0);if(e.defined(y)){var g,h=y.bottomPositions,v=y.topPositions,C=y.numCorners,x=v.length,A=2*x,b=s.position?new Float64Array(A):void 0,T=s.normal?new Float32Array(A):void 0,V=s.tangent?new Float32Array(A):void 0,D=s.bitangent?new Float32Array(A):void 0,z=s.st?new Float32Array(A/3*2):void 0,S=0,O=0,I=0,R=0,B=0,M=H,N=G,W=k,U=!0,q=0,J=1/((x/=3)-i.length+1);for(g=0;g<x;++g){var Y=3*g,Z=a.Cartesian3.fromArray(v,Y,E),j=a.Cartesian3.fromArray(h,Y,w);if(s.position&&(b[S++]=j.x,b[S++]=j.y,b[S++]=j.z,b[S++]=Z.x,b[S++]=Z.y,b[S++]=Z.z),s.st&&(z[B++]=q,z[B++]=0,z[B++]=q,z[B++]=1),s.normal||s.tangent||s.bitangent){var K,Q=a.Cartesian3.clone(a.Cartesian3.ZERO,P),X=f.scaleToGeodeticSurface(a.Cartesian3.fromArray(v,Y,w),w);if(g+1<x&&(K=f.scaleToGeodeticSurface(a.Cartesian3.fromArray(v,Y+3,F),F),Q=a.Cartesian3.fromArray(v,Y+3,P)),U){var $=a.Cartesian3.subtract(Q,Z,L),ee=a.Cartesian3.subtract(X,Z,E);M=a.Cartesian3.normalize(a.Cartesian3.cross(ee,$,M),M),U=!1}a.Cartesian3.equalsEpsilon(K,X,a.CesiumMath.EPSILON10)?U=!0:(q+=J,s.tangent&&(N=a.Cartesian3.normalize(a.Cartesian3.subtract(K,X,N),N)),s.bitangent&&(W=a.Cartesian3.normalize(a.Cartesian3.cross(M,N,W),W))),s.normal&&(T[O++]=M.x,T[O++]=M.y,T[O++]=M.z,T[O++]=M.x,T[O++]=M.y,T[O++]=M.z),s.tangent&&(V[R++]=N.x,V[R++]=N.y,V[R++]=N.z,V[R++]=N.x,V[R++]=N.y,V[R++]=N.z),s.bitangent&&(D[I++]=W.x,D[I++]=W.y,D[I++]=W.z,D[I++]=W.x,D[I++]=W.y,D[I++]=W.z)}}var te=new u.GeometryAttributes;s.position&&(te.position=new d.GeometryAttribute({componentDatatype:l.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:b})),s.normal&&(te.normal=new d.GeometryAttribute({componentDatatype:l.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:T})),s.tangent&&(te.tangent=new d.GeometryAttribute({componentDatatype:l.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:V})),s.bitangent&&(te.bitangent=new d.GeometryAttribute({componentDatatype:l.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:D})),s.st&&(te.st=new d.GeometryAttribute({componentDatatype:l.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:z}));var ae=A/3;A-=6*(C+1);var ie=c.IndexDatatype.createTypedArray(ae,A),ne=0;for(g=0;g<ae-2;g+=2){var re=g,oe=g+2,se=a.Cartesian3.fromArray(b,3*re,E),me=a.Cartesian3.fromArray(b,3*oe,w);if(!a.Cartesian3.equalsEpsilon(se,me,a.CesiumMath.EPSILON10)){var le=g+1,de=g+3;ie[ne++]=le,ie[ne++]=re,ie[ne++]=de,ie[ne++]=de,ie[ne++]=re,ie[ne++]=oe}}return new d.Geometry({attributes:te,indices:ie,primitiveType:p.PrimitiveType.TRIANGLES,boundingSphere:new n.BoundingSphere.fromVertices(b)})}},function(t,a){return e.defined(a)&&(t=T.unpack(t,a)),t._ellipsoid=i.Ellipsoid.clone(t._ellipsoid),T.createGeometry(t)}}));