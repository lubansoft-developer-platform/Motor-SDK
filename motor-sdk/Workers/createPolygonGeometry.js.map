{"version":3,"file":"createPolygonGeometry.js","sources":["../../../../Source/Core/PolygonGeometry.js","../../../../Source/WorkersES6/createPolygonGeometry.js"],"sourcesContent":["import earcut from \"../ThirdParty/earcut-2.2.1.js\";\nimport ArcType from \"./ArcType.js\";\nimport arrayFill from \"./arrayFill.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport EllipsoidGeodesic from \"./EllipsoidGeodesic.js\";\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport Plane from \"./Plane.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nvar scratchCarto1 = new Cartographic();\nvar scratchCarto2 = new Cartographic();\nfunction adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\n    var carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\n    var height = carto1.height;\n    var p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\n    p1Carto.height = height;\n    ellipsoid.cartographicToCartesian(p1Carto, p1);\n\n    var p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\n    p2Carto.height = height - 100;\n    ellipsoid.cartographicToCartesian(p2Carto, p2);\n}\n\nvar scratchBoundingRectangle = new BoundingRectangle();\nvar scratchPosition = new Cartesian3();\nvar scratchNormal = new Cartesian3();\nvar scratchTangent = new Cartesian3();\nvar scratchBitangent = new Cartesian3();\nvar p1Scratch = new Cartesian3();\nvar p2Scratch = new Cartesian3();\nvar scratchPerPosNormal = new Cartesian3();\nvar scratchPerPosTangent = new Cartesian3();\nvar scratchPerPosBitangent = new Cartesian3();\n\nvar appendTextureCoordinatesOrigin = new Cartesian2();\nvar appendTextureCoordinatesCartesian2 = new Cartesian2();\nvar appendTextureCoordinatesCartesian3 = new Cartesian3();\nvar appendTextureCoordinatesQuaternion = new Quaternion();\nvar appendTextureCoordinatesMatrix3 = new Matrix3();\nvar tangentMatrixScratch = new Matrix3();\n\nfunction computeAttributes(options) {\n    var vertexFormat = options.vertexFormat;\n    var geometry = options.geometry;\n    var shadowVolume = options.shadowVolume;\n    var flatPositions = geometry.attributes.position.values;\n    var length = flatPositions.length;\n    var wall = options.wall;\n    var top = options.top || wall;\n    var bottom = options.bottom || wall;\n    let isPlaneMode = options.isPlaneMode;\n    if (\n        vertexFormat.st ||\n        vertexFormat.normal ||\n        vertexFormat.tangent ||\n        vertexFormat.bitangent ||\n        shadowVolume\n    ) {\n        // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\n        // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\n        var boundingRectangle = options.boundingRectangle;\n        var tangentPlane = options.tangentPlane;\n        var ellipsoid = options.ellipsoid;\n        var stRotation = options.stRotation;\n        var perPositionHeight = options.perPositionHeight;\n\n        var origin = appendTextureCoordinatesOrigin;\n        origin.x = boundingRectangle.x;\n        origin.y = boundingRectangle.y;\n\n        var textureCoordinates = vertexFormat.st\n            ? new Float32Array(2 * (length / 3))\n            : undefined;\n        var normals;\n        if (vertexFormat.normal) {\n            if (perPositionHeight && top && !wall) {\n                normals = geometry.attributes.normal.values;\n            } else {\n                normals = new Float32Array(length);\n            }\n        }\n        var tangents = vertexFormat.tangent\n            ? new Float32Array(length)\n            : undefined;\n        var bitangents = vertexFormat.bitangent\n            ? new Float32Array(length)\n            : undefined;\n        var extrudeNormals = shadowVolume\n            ? new Float32Array(length)\n            : undefined;\n\n        var textureCoordIndex = 0;\n        var attrIndex = 0;\n\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n        var recomputeNormal = true;\n\n        var textureMatrix = appendTextureCoordinatesMatrix3;\n        var tangentRotationMatrix = tangentMatrixScratch;\n        if (stRotation !== 0.0) {\n            var rotation = Quaternion.fromAxisAngle(\n                tangentPlane._plane.normal,\n                stRotation,\n                appendTextureCoordinatesQuaternion\n            );\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n            rotation = Quaternion.fromAxisAngle(\n                tangentPlane._plane.normal,\n                -stRotation,\n                appendTextureCoordinatesQuaternion\n            );\n            tangentRotationMatrix = Matrix3.fromQuaternion(\n                rotation,\n                tangentRotationMatrix\n            );\n        } else {\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n            tangentRotationMatrix = Matrix3.clone(\n                Matrix3.IDENTITY,\n                tangentRotationMatrix\n            );\n        }\n\n        var bottomOffset = 0;\n        var bottomOffset2 = 0;\n\n        if (top && bottom) {\n            bottomOffset = length / 2;\n            bottomOffset2 = length / 3;\n\n            length /= 2;\n        }\n\n        for (var i = 0; i < length; i += 3) {\n            var position = Cartesian3.fromArray(\n                flatPositions,\n                i,\n                appendTextureCoordinatesCartesian3\n            );\n\n            if (vertexFormat.st) {\n                var p = Matrix3.multiplyByVector(\n                    textureMatrix,\n                    position,\n                    scratchPosition\n                );\n                p = ellipsoid.scaleToGeodeticSurface(p, p);\n                var st = tangentPlane.projectPointOntoPlane(\n                    p,\n                    appendTextureCoordinatesCartesian2\n                );\n                Cartesian2.subtract(st, origin, st);\n\n                var stx = CesiumMath.clamp(\n                    st.x / boundingRectangle.width,\n                    0,\n                    1\n                );\n                var sty = CesiumMath.clamp(\n                    st.y / boundingRectangle.height,\n                    0,\n                    1\n                );\n                if (bottom) {\n                    textureCoordinates[textureCoordIndex + bottomOffset2] = stx;\n                    textureCoordinates[\n                        textureCoordIndex + 1 + bottomOffset2\n                    ] = sty;\n                }\n                if (top) {\n                    textureCoordinates[textureCoordIndex] = stx;\n                    textureCoordinates[textureCoordIndex + 1] = sty;\n                }\n\n                textureCoordIndex += 2;\n            }\n\n            if (\n                vertexFormat.normal ||\n                vertexFormat.tangent ||\n                vertexFormat.bitangent ||\n                shadowVolume\n            ) {\n                var attrIndex1 = attrIndex + 1;\n                var attrIndex2 = attrIndex + 2;\n\n                if (wall) {\n                    if (i + 3 < length) {\n                        var p1 = Cartesian3.fromArray(\n                            flatPositions,\n                            i + 3,\n                            p1Scratch\n                        );\n\n                        if (recomputeNormal) {\n                            var p2 = Cartesian3.fromArray(\n                                flatPositions,\n                                i + length,\n                                p2Scratch\n                            );\n                            if (perPositionHeight && !isPlaneMode) {\n                                adjustPosHeightsForNormal(\n                                    position,\n                                    p1,\n                                    p2,\n                                    ellipsoid\n                                );\n                            }else if(isPlaneMode){\n                                p1.z = position.z\n                                p2.z = p1.z - 100;\n                            }\n                            Cartesian3.subtract(p1, position, p1);\n                            Cartesian3.subtract(p2, position, p2);\n                            normal = Cartesian3.normalize(\n                                Cartesian3.cross(p2, p1, normal),\n                                normal\n                            );\n                            recomputeNormal = false;\n                        }\n\n                        if (\n                            Cartesian3.equalsEpsilon(\n                                p1,\n                                position,\n                                CesiumMath.EPSILON10\n                            )\n                        ) {\n                            // if we've reached a corner\n                            recomputeNormal = true;\n                        }\n                    }\n\n                    if (vertexFormat.tangent || vertexFormat.bitangent) {\n                        bitangent = ellipsoid.geodeticSurfaceNormal(\n                            position,\n                            bitangent\n                        );\n                        if (vertexFormat.tangent) {\n                            tangent = Cartesian3.normalize(\n                                Cartesian3.cross(bitangent, normal, tangent),\n                                tangent\n                            );\n                        }\n                    }\n                } else {\n                    if(isPlaneMode){\n                        normal = Cartesian3.UNIT_Z;\n                    }else{\n                        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n                    }\n                    if (vertexFormat.tangent || vertexFormat.bitangent) {\n                        if (perPositionHeight) {\n                            scratchPerPosNormal = Cartesian3.fromArray(\n                                normals,\n                                attrIndex,\n                                scratchPerPosNormal\n                            );\n                            scratchPerPosTangent = Cartesian3.cross(\n                                Cartesian3.UNIT_Z,\n                                scratchPerPosNormal,\n                                scratchPerPosTangent\n                            );\n                            scratchPerPosTangent = Cartesian3.normalize(\n                                Matrix3.multiplyByVector(\n                                    tangentRotationMatrix,\n                                    scratchPerPosTangent,\n                                    scratchPerPosTangent\n                                ),\n                                scratchPerPosTangent\n                            );\n                            if (vertexFormat.bitangent) {\n                                scratchPerPosBitangent = Cartesian3.normalize(\n                                    Cartesian3.cross(\n                                        scratchPerPosNormal,\n                                        scratchPerPosTangent,\n                                        scratchPerPosBitangent\n                                    ),\n                                    scratchPerPosBitangent\n                                );\n                            }\n                        }\n\n                        tangent = Cartesian3.cross(\n                            Cartesian3.UNIT_Z,\n                            normal,\n                            tangent\n                        );\n                        tangent = Cartesian3.normalize(\n                            Matrix3.multiplyByVector(\n                                tangentRotationMatrix,\n                                tangent,\n                                tangent\n                            ),\n                            tangent\n                        );\n                        if (vertexFormat.bitangent) {\n                            bitangent = Cartesian3.normalize(\n                                Cartesian3.cross(normal, tangent, bitangent),\n                                bitangent\n                            );\n                        }\n                    }\n                }\n\n                if (vertexFormat.normal) {\n                    if (options.wall) {\n                        normals[attrIndex + bottomOffset] = normal.x;\n                        normals[attrIndex1 + bottomOffset] = normal.y;\n                        normals[attrIndex2 + bottomOffset] = normal.z;\n                    } else if (bottom) {\n                        normals[attrIndex + bottomOffset] = -normal.x;\n                        normals[attrIndex1 + bottomOffset] = -normal.y;\n                        normals[attrIndex2 + bottomOffset] = -normal.z;\n                    }\n\n                    if ((top && !perPositionHeight) || wall) {\n                        normals[attrIndex] = normal.x;\n                        normals[attrIndex1] = normal.y;\n                        normals[attrIndex2] = normal.z;\n                    }\n                }\n\n                if (shadowVolume) {\n                    if (wall) {\n                        normal = ellipsoid.geodeticSurfaceNormal(\n                            position,\n                            normal\n                        );\n                    }\n                    extrudeNormals[attrIndex + bottomOffset] = -normal.x;\n                    extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\n                    extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\n                }\n\n                if (vertexFormat.tangent) {\n                    if (options.wall) {\n                        tangents[attrIndex + bottomOffset] = tangent.x;\n                        tangents[attrIndex1 + bottomOffset] = tangent.y;\n                        tangents[attrIndex2 + bottomOffset] = tangent.z;\n                    } else if (bottom) {\n                        tangents[attrIndex + bottomOffset] = -tangent.x;\n                        tangents[attrIndex1 + bottomOffset] = -tangent.y;\n                        tangents[attrIndex2 + bottomOffset] = -tangent.z;\n                    }\n\n                    if (top) {\n                        if (perPositionHeight) {\n                            tangents[attrIndex] = scratchPerPosTangent.x;\n                            tangents[attrIndex1] = scratchPerPosTangent.y;\n                            tangents[attrIndex2] = scratchPerPosTangent.z;\n                        } else {\n                            tangents[attrIndex] = tangent.x;\n                            tangents[attrIndex1] = tangent.y;\n                            tangents[attrIndex2] = tangent.z;\n                        }\n                    }\n                }\n\n                if (vertexFormat.bitangent) {\n                    if (bottom) {\n                        bitangents[attrIndex + bottomOffset] = bitangent.x;\n                        bitangents[attrIndex1 + bottomOffset] = bitangent.y;\n                        bitangents[attrIndex2 + bottomOffset] = bitangent.z;\n                    }\n                    if (top) {\n                        if (perPositionHeight) {\n                            bitangents[attrIndex] = scratchPerPosBitangent.x;\n                            bitangents[attrIndex1] = scratchPerPosBitangent.y;\n                            bitangents[attrIndex2] = scratchPerPosBitangent.z;\n                        } else {\n                            bitangents[attrIndex] = bitangent.x;\n                            bitangents[attrIndex1] = bitangent.y;\n                            bitangents[attrIndex2] = bitangent.z;\n                        }\n                    }\n                }\n                attrIndex += 3;\n            }\n        }\n\n        if (vertexFormat.st) {\n            geometry.attributes.st = new GeometryAttribute({\n                componentDatatype: ComponentDatatype.FLOAT,\n                componentsPerAttribute: 2,\n                values: textureCoordinates,\n            });\n        }\n\n        if (vertexFormat.normal) {\n            geometry.attributes.normal = new GeometryAttribute({\n                componentDatatype: ComponentDatatype.FLOAT,\n                componentsPerAttribute: 3,\n                values: normals,\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            geometry.attributes.tangent = new GeometryAttribute({\n                componentDatatype: ComponentDatatype.FLOAT,\n                componentsPerAttribute: 3,\n                values: tangents,\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            geometry.attributes.bitangent = new GeometryAttribute({\n                componentDatatype: ComponentDatatype.FLOAT,\n                componentsPerAttribute: 3,\n                values: bitangents,\n            });\n        }\n\n        if (shadowVolume) {\n            geometry.attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype: ComponentDatatype.FLOAT,\n                componentsPerAttribute: 3,\n                values: extrudeNormals,\n            });\n        }\n    }\n\n    if (options.extrude && defined(options.offsetAttribute)) {\n        var size = flatPositions.length / 3;\n        var offsetAttribute = new Uint8Array(size);\n\n        if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n            if ((top && bottom) || wall) {\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n            } else if (top) {\n                offsetAttribute = arrayFill(offsetAttribute, 1);\n            }\n        } else {\n            var offsetValue =\n                options.offsetAttribute === GeometryOffsetAttribute.NONE\n                    ? 0\n                    : 1;\n            offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n        }\n\n        geometry.attributes.applyOffset = new GeometryAttribute({\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n            componentsPerAttribute: 1,\n            values: offsetAttribute,\n        });\n    }\n\n    return geometry;\n}\n\nvar startCartographicScratch = new Cartographic();\nvar endCartographicScratch = new Cartographic();\nvar idlCross = {\n    westOverIDL: 0.0,\n    eastOverIDL: 0.0,\n};\nvar ellipsoidGeodesic = new EllipsoidGeodesic();\nfunction computeRectangle(positions, ellipsoid, arcType, granularity, result) {\n    result = defaultValue(result, new Rectangle());\n    if (!defined(positions) || positions.length < 3) {\n        result.west = 0.0;\n        result.north = 0.0;\n        result.south = 0.0;\n        result.east = 0.0;\n        return result;\n    }\n\n    if (arcType === ArcType.RHUMB) {\n        return Rectangle.fromCartesianArray(positions, ellipsoid, result);\n    }\n\n    if (!ellipsoidGeodesic.ellipsoid.equals(ellipsoid)) {\n        ellipsoidGeodesic = new EllipsoidGeodesic(\n            undefined,\n            undefined,\n            ellipsoid\n        );\n    }\n\n    result.west = Number.POSITIVE_INFINITY;\n    result.east = Number.NEGATIVE_INFINITY;\n    result.south = Number.POSITIVE_INFINITY;\n    result.north = Number.NEGATIVE_INFINITY;\n\n    idlCross.westOverIDL = Number.POSITIVE_INFINITY;\n    idlCross.eastOverIDL = Number.NEGATIVE_INFINITY;\n\n    var inverseChordLength =\n        1.0 / CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n    var positionsLength = positions.length;\n    var endCartographic = ellipsoid.cartesianToCartographic(\n        positions[0],\n        endCartographicScratch\n    );\n    var startCartographic = startCartographicScratch;\n    var swap;\n\n    for (var i = 1; i < positionsLength; i++) {\n        swap = startCartographic;\n        startCartographic = endCartographic;\n        endCartographic = ellipsoid.cartesianToCartographic(positions[i], swap);\n        ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n        interpolateAndGrowRectangle(\n            ellipsoidGeodesic,\n            inverseChordLength,\n            result,\n            idlCross\n        );\n    }\n\n    swap = startCartographic;\n    startCartographic = endCartographic;\n    endCartographic = ellipsoid.cartesianToCartographic(positions[0], swap);\n    ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n    interpolateAndGrowRectangle(\n        ellipsoidGeodesic,\n        inverseChordLength,\n        result,\n        idlCross\n    );\n\n    if (\n        result.east - result.west >\n        idlCross.eastOverIDL - idlCross.westOverIDL\n    ) {\n        result.west = idlCross.westOverIDL;\n        result.east = idlCross.eastOverIDL;\n\n        if (result.east > CesiumMath.PI) {\n            result.east = result.east - CesiumMath.TWO_PI;\n        }\n        if (result.west > CesiumMath.PI) {\n            result.west = result.west - CesiumMath.TWO_PI;\n        }\n    }\n\n    return result;\n}\n\nvar interpolatedCartographicScratch = new Cartographic();\nfunction interpolateAndGrowRectangle(\n    ellipsoidGeodesic,\n    inverseChordLength,\n    result,\n    idlCross\n) {\n    var segmentLength = ellipsoidGeodesic.surfaceDistance;\n\n    var numPoints = Math.ceil(segmentLength * inverseChordLength);\n    var subsegmentDistance =\n        numPoints > 0\n            ? segmentLength / (numPoints - 1)\n            : Number.POSITIVE_INFINITY;\n    var interpolationDistance = 0.0;\n\n    for (var i = 0; i < numPoints; i++) {\n        var interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(\n            interpolationDistance,\n            interpolatedCartographicScratch\n        );\n        interpolationDistance += subsegmentDistance;\n        var longitude = interpolatedCartographic.longitude;\n        var latitude = interpolatedCartographic.latitude;\n\n        result.west = Math.min(result.west, longitude);\n        result.east = Math.max(result.east, longitude);\n        result.south = Math.min(result.south, latitude);\n        result.north = Math.max(result.north, latitude);\n\n        var lonAdjusted =\n            longitude >= 0 ? longitude : longitude + CesiumMath.TWO_PI;\n        idlCross.westOverIDL = Math.min(idlCross.westOverIDL, lonAdjusted);\n        idlCross.eastOverIDL = Math.max(idlCross.eastOverIDL, lonAdjusted);\n    }\n}\n\nvar createGeometryFromPositionsExtrudedPositions = [];\n\nfunction createGeometryFromPositionsExtruded(\n    ellipsoid,\n    polygon,\n    granularity,\n    hierarchy,\n    perPositionHeight,\n    closeTop,\n    closeBottom,\n    vertexFormat,\n    arcType,\n    isPlaneMode\n) {\n    var geos = {\n        walls: [],\n    };\n    var i;\n\n    if (closeTop || closeBottom) {\n        var topGeo = PolygonGeometryLibrary.createGeometryFromPositions(\n            ellipsoid,\n            polygon,\n            granularity,\n            perPositionHeight,\n            vertexFormat,\n            arcType,\n            isPlaneMode\n        );\n\n        var edgePoints = topGeo.attributes.position.values;\n        var indices = topGeo.indices;\n        var numPositions;\n        var newIndices;\n\n        if (closeTop && closeBottom) {\n            var topBottomPositions = edgePoints.concat(edgePoints);\n\n            numPositions = topBottomPositions.length / 3;\n\n            newIndices = IndexDatatype.createTypedArray(\n                numPositions,\n                indices.length * 2\n            );\n            newIndices.set(indices);\n            var ilength = indices.length;\n\n            var length = numPositions / 2;\n\n            for (i = 0; i < ilength; i += 3) {\n                var i0 = newIndices[i] + length;\n                var i1 = newIndices[i + 1] + length;\n                var i2 = newIndices[i + 2] + length;\n\n                newIndices[i + ilength] = i2;\n                newIndices[i + 1 + ilength] = i1;\n                newIndices[i + 2 + ilength] = i0;\n            }\n\n            topGeo.attributes.position.values = topBottomPositions;\n            if (perPositionHeight && vertexFormat.normal) {\n                var normals = topGeo.attributes.normal.values;\n                topGeo.attributes.normal.values = new Float32Array(\n                    topBottomPositions.length\n                );\n                topGeo.attributes.normal.values.set(normals);\n            }\n            topGeo.indices = newIndices;\n        } else if (closeBottom) {\n            numPositions = edgePoints.length / 3;\n            newIndices = IndexDatatype.createTypedArray(\n                numPositions,\n                indices.length\n            );\n\n            for (i = 0; i < indices.length; i += 3) {\n                newIndices[i] = indices[i + 2];\n                newIndices[i + 1] = indices[i + 1];\n                newIndices[i + 2] = indices[i];\n            }\n\n            topGeo.indices = newIndices;\n        }\n\n        geos.topAndBottom = new GeometryInstance({\n            geometry: topGeo,\n        });\n    }\n\n    var outerRing = hierarchy.outerRing;\n    var tangentPlane;\n    if(isPlaneMode){\n        tangentPlane = Plane.fromPointNormal(outerRing[0], Cartesian3.UNIT_Z);\n    }else{\n        tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\n    }\n    var positions2D = tangentPlane.projectPointsOntoPlane(\n        outerRing,\n        createGeometryFromPositionsExtrudedPositions\n    );\n\n    var windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n    if (windingOrder === WindingOrder.CLOCKWISE) {\n        outerRing = outerRing.slice().reverse();\n    }\n\n    var wallGeo = PolygonGeometryLibrary.computeWallGeometry(\n        outerRing,\n        ellipsoid,\n        granularity,\n        perPositionHeight,\n        arcType,\n        isPlaneMode\n    );\n    geos.walls.push(\n        new GeometryInstance({\n            geometry: wallGeo,\n        })\n    );\n\n    var holes = hierarchy.holes;\n    for (i = 0; i < holes.length; i++) {\n        var hole = holes[i];\n\n        // tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\n        if(isPlaneMode){\n            tangentPlane = Plane.fromPointNormal(hole[0], Cartesian3.UNIT_Z);\n        }else{\n            tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\n        }\n        positions2D = tangentPlane.projectPointsOntoPlane(\n            hole,\n            createGeometryFromPositionsExtrudedPositions\n        );\n\n        windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n        if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\n            hole = hole.slice().reverse();\n        }\n\n        wallGeo = PolygonGeometryLibrary.computeWallGeometry(\n            hole,\n            ellipsoid,\n            granularity,\n            perPositionHeight,\n            arcType,\n            isPlaneMode\n        );\n        geos.walls.push(\n            new GeometryInstance({\n                geometry: wallGeo,\n            })\n        );\n    }\n\n    return geos;\n}\n\n/**\n * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias PolygonGeometry\n * @constructor\n * @extends Geometry\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n *\n * @see PolygonGeometry#createGeometry\n * @see PolygonGeometry#fromPositions\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n *\n * @example\n * // 1. create a polygon from points\n * var polygon = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   )\n * });\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * // 2. create a nested polygon with holes\n * var polygonWithHole = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -109.0, 30.0,\n *       -95.0, 30.0,\n *       -95.0, 40.0,\n *       -109.0, 40.0\n *     ]),\n *     [new Cesium.PolygonHierarchy(\n *       Cesium.Cartesian3.fromDegreesArray([\n *         -107.0, 31.0,\n *         -107.0, 39.0,\n *         -97.0, 39.0,\n *         -97.0, 31.0\n *       ]),\n *       [new Cesium.PolygonHierarchy(\n *         Cesium.Cartesian3.fromDegreesArray([\n *           -105.0, 33.0,\n *           -99.0, 33.0,\n *           -99.0, 37.0,\n *           -105.0, 37.0\n *         ]),\n *         [new Cesium.PolygonHierarchy(\n *           Cesium.Cartesian3.fromDegreesArray([\n *             -103.0, 34.0,\n *             -101.0, 34.0,\n *             -101.0, 36.0,\n *             -103.0, 36.0\n *           ])\n *         )]\n *       )]\n *     )]\n *   )\n * });\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\n *\n * // 3. create extruded polygon\n * var extrudedPolygon = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   ),\n *   extrudedHeight: 300000\n * });\n * var geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\n */\nfunction PolygonGeometry(options) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.object(\"options\", options);\n    Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n    if (\n        defined(options.perPositionHeight) &&\n        options.perPositionHeight &&\n        defined(options.height)\n    ) {\n        throw new DeveloperError(\n            \"Cannot use both options.perPositionHeight and options.height\"\n        );\n    }\n    if (\n        defined(options.arcType) &&\n        options.arcType !== ArcType.GEODESIC &&\n        options.arcType !== ArcType.RHUMB\n    ) {\n        throw new DeveloperError(\n            \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n        );\n    }\n    //>>includeEnd('debug');\n\n    var polygonHierarchy = options.polygonHierarchy;\n    var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n    var granularity = defaultValue(\n        options.granularity,\n        CesiumMath.RADIANS_PER_DEGREE\n    );\n    var stRotation = defaultValue(options.stRotation, 0.0);\n    var perPositionHeight = defaultValue(options.perPositionHeight, false);\n    var perPositionHeightExtrude =\n        perPositionHeight && defined(options.extrudedHeight);\n    var height = defaultValue(options.height, 0.0);\n    var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n    if (!perPositionHeightExtrude) {\n        var h = Math.max(height, extrudedHeight);\n        extrudedHeight = Math.min(height, extrudedHeight);\n        height = h;\n    }\n\n    this._vertexFormat = VertexFormat.clone(vertexFormat);\n    this._ellipsoid = Ellipsoid.clone(ellipsoid);\n    this._granularity = granularity;\n    this._stRotation = stRotation;\n    this._height = height;\n    this._extrudedHeight = extrudedHeight;\n    this._closeTop = defaultValue(options.closeTop, true);\n    this._closeBottom = defaultValue(options.closeBottom, true);\n    this._polygonHierarchy = polygonHierarchy;\n    this._perPositionHeight = perPositionHeight;\n    this._perPositionHeightExtrude = perPositionHeightExtrude;\n    this._shadowVolume = defaultValue(options.shadowVolume, false);\n    this._workerName = \"createPolygonGeometry\";\n    this._offsetAttribute = options.offsetAttribute;\n    this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n    this._rectangle = undefined;\n    this._textureCoordinateRotationPoints = undefined;\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    this.packedLength =\n        PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) +\n        Ellipsoid.packedLength +\n        VertexFormat.packedLength +\n        12;\n}\n\n/**\n * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {Number} [options.height=0.0] The height of the polygon.\n * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @returns {PolygonGeometry}\n *\n *\n * @example\n * // create a polygon from points\n * var polygon = Cesium.PolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nPolygonGeometry.fromPositions = function (options) {\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.defined(\"options.positions\", options.positions);\n    //>>includeEnd('debug');\n\n    var newOptions = {\n        polygonHierarchy: {\n            positions: options.positions,\n        },\n        height: options.height,\n        extrudedHeight: options.extrudedHeight,\n        vertexFormat: options.vertexFormat,\n        stRotation: options.stRotation,\n        ellipsoid: options.ellipsoid,\n        granularity: options.granularity,\n        perPositionHeight: options.perPositionHeight,\n        closeTop: options.closeTop,\n        closeBottom: options.closeBottom,\n        offsetAttribute: options.offsetAttribute,\n        arcType: options.arcType,\n    };\n    return new PolygonGeometry(newOptions);\n};\n\n/**\n * @param {Object} params\n * @param {Cartesian3[]} params.positions\n * @param {Boolean} [params.compressPlane] 强制在平面下\n * @param {Number} [params.height]\n * @returns {Geometry}\n */\nPolygonGeometry.createBorderLine = function(params){\n    let positionHigh, positionLow;\n    let points = params.positions;\n    let height = params.height;\n\n    if(params.compressPlane === true){\n        // 压到一个平面上\n        let min = Infinity;\n        points.forEach( p=>{\n            min = Math.min(min, p.z);\n        });\n        positionHigh = points.map( p=>{\n            return new Cartesian3(p.x, p.y, min+height);\n        });\n        positionLow = points.map( p=>{\n            return new Cartesian3(p.x, p.y, min);\n        });\n    }else{\n        positionHigh = points.map( p=>{\n            return new Cartesian3(p.x, p.y, p.z+height);\n        });\n        positionLow = points.map( p=>{\n            return new Cartesian3(p.x, p.y, p.z);\n        });\n    }\n\n    let ps = [...positionLow, ...positionHigh];\n    let positions = [];\n    ps.forEach(p=>{\n        positions.push(p.x, p.y, p.z);\n    });\n    let indices = [];\n    positionHigh.pop();\n    positionHigh.forEach( (p, i)=>{\n        indices.push(i, i+1);\n    });\n    indices.push(positionHigh.length, 0);\n    let length = positionLow.length;\n    let indices2 = indices.map( i=>{\n        return i+length;\n    })\n    indices.push( ...indices2);\n    indices2.forEach( i=>{\n        indices.push(i-length, i);\n    });\n\n    let boundingSphere = BoundingSphere.fromPoints(points);\n    let geometry = new Geometry({\n        attributes: new GeometryAttributes({\n            position: new GeometryAttribute({\n                values: new Float64Array(positions),\n                componentsPerAttribute: 3,\n                componentDatatype: ComponentDatatype.DOUBLE,\n            }),\n        }),\n        indices: new Uint16Array(indices),\n        primitiveType : PrimitiveType.LINES,\n        boundingSphere : boundingSphere,\n    });\n    return geometry;\n}\n// 根据一个平面，生成一个PolygonGeometry(平面模式下)\n/**\n *\n * @param {Object} params\n * @param {Cartesian3[]} params.positions\n * @param {Boolean} [params.compressPlane] 强制在平面下\n * @param {Number} [params.height]\n * @returns {Geometry}\n */\nPolygonGeometry.fromPositionsPlaneMode = function(params){\n\n    let positionHigh, positionLow;\n    let points = params.positions;\n    let height = params.height;\n\n    let position2D = new Array(points.length * 2);\n    points.forEach( (p,i)=>{\n        position2D[i*2] = p.x;\n        position2D[i*2+1] = p.y;\n    });\n    let indices = earcut(position2D);\n    if(params.compressPlane === true){\n        // 压到一个平面上\n        let min = Infinity;\n        points.forEach( p=>{\n            min = Math.min(min, p.z);\n        });\n        positionHigh = points.map( p=>{\n            return new Cartesian3(p.x, p.y, min+height);\n        });\n        positionLow = points.map( p=>{\n            return new Cartesian3(p.x, p.y, min);\n        });\n    }else{\n        positionHigh = points.map( p=>{\n            return new Cartesian3(p.x, p.y, p.z+height);\n        });\n        positionLow = points.map( p=>{\n            return new Cartesian3(p.x, p.y, p.z);\n        });\n    }\n\n    // indices\n    let ps = [...positionLow];\n    let is = [...indices.slice().reverse()];\n\n    if(params.height){\n\n        // 侧面\n        let length = positionLow.length\n        positionLow.forEach( (p,i)=>{\n            if(i+1===length){\n                is.push(\n                    i, 0, length,\n                    i, length, i+length\n                );\n            }else{\n                //\n                is.push(\n                    i, i+1, i+length+1,\n                    i, i+length+1, i+length\n                );\n            }\n        });\n\n        //上面\n        ps.push(...positionHigh);\n        let highIndices = indices.map(i=>{\n            return i+length;\n        })\n        is.push(...highIndices);\n    }\n    let positions = new Array(ps.length*3);\n    ps.forEach( (p,i)=>{\n        positions[i*3] = p.x;\n        positions[i*3+1] = p.y;\n        positions[i*3+2] = p.z;\n    });\n\n    let boundingSphere = BoundingSphere.fromPoints(points);\n    // 让boundingSphere向上进行移动，距离为 height/2，同时扩充半径\n    BoundingSphere.expandDistance(boundingSphere, height / 2, Cartesian3.UNIT_Z, boundingSphere);\n    let geometry = new Geometry({\n        attributes: new GeometryAttributes({\n            position: new GeometryAttribute({\n                values: new Float64Array(positions),\n                componentsPerAttribute: 3,\n                componentDatatype: ComponentDatatype.DOUBLE,\n            }),\n        }),\n        indices: new Uint16Array(is),\n        primitiveType : PrimitiveType.TRIANGLES,\n        boundingSphere : boundingSphere,\n    });\n    return geometry;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolygonGeometry.pack = function (value, array, startingIndex) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.object(\"value\", value);\n    Check.defined(\"array\", array);\n    //>>includeEnd('debug');\n\n    startingIndex = defaultValue(startingIndex, 0);\n\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n        value._polygonHierarchy,\n        array,\n        startingIndex\n    );\n\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n    if(PolygonGeometry.isPlaneMode){\n        array[startingIndex++] = 0;\n        array[startingIndex++] = 0;\n        array[startingIndex++] = 1;\n    }else{\n        startingIndex += Ellipsoid.packedLength;\n    }\n\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\n    startingIndex += VertexFormat.packedLength;\n\n    array[startingIndex++] = value._height;\n    array[startingIndex++] = value._extrudedHeight;\n    array[startingIndex++] = value._granularity;\n    array[startingIndex++] = value._stRotation;\n    array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n    array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n    array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\n    array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\n    array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n    array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n    array[startingIndex++] = value._arcType;\n    array[startingIndex] = value.packedLength;\n\n    return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\n\n//Only used to avoid inability to default construct.\nvar dummyOptions = {\n    polygonHierarchy: {},\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolygonGeometry} [result] The object into which to store the result.\n */\nPolygonGeometry.unpack = function (array, startingIndex, result) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.defined(\"array\", array);\n    //>>includeEnd('debug');\n\n    startingIndex = defaultValue(startingIndex, 0);\n\n    var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n        array,\n        startingIndex\n    );\n    startingIndex = polygonHierarchy.startingIndex;\n    delete polygonHierarchy.startingIndex;\n\n    let isPlaneMode = array[startingIndex + 1] === 0;\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n    startingIndex += Ellipsoid.packedLength;\n\n    var vertexFormat = VertexFormat.unpack(\n        array,\n        startingIndex,\n        scratchVertexFormat\n    );\n    startingIndex += VertexFormat.packedLength;\n\n    var height = array[startingIndex++];\n    var extrudedHeight = array[startingIndex++];\n    var granularity = array[startingIndex++];\n    var stRotation = array[startingIndex++];\n    var perPositionHeightExtrude = array[startingIndex++] === 1.0;\n    var perPositionHeight = array[startingIndex++] === 1.0;\n    var closeTop = array[startingIndex++] === 1.0;\n    var closeBottom = array[startingIndex++] === 1.0;\n    var shadowVolume = array[startingIndex++] === 1.0;\n    var offsetAttribute = array[startingIndex++];\n    var arcType = array[startingIndex++];\n    var packedLength = array[startingIndex];\n\n    if (!defined(result)) {\n        result = new PolygonGeometry(dummyOptions);\n    }\n\n    result._polygonHierarchy = polygonHierarchy;\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n    result._vertexFormat = VertexFormat.clone(\n        vertexFormat,\n        result._vertexFormat\n    );\n    result._height = height;\n    result._extrudedHeight = extrudedHeight;\n    result._granularity = granularity;\n    result._stRotation = stRotation;\n    result._perPositionHeightExtrude = perPositionHeightExtrude;\n    result._perPositionHeight = perPositionHeight;\n    result._closeTop = closeTop;\n    result._closeBottom = closeBottom;\n    result._shadowVolume = shadowVolume;\n    result._isPlaneMode = isPlaneMode;\n    result._offsetAttribute =\n        offsetAttribute === -1 ? undefined : offsetAttribute;\n    result._arcType = arcType;\n    result.packedLength = packedLength;\n    return result;\n};\n\n/**\n * Returns the bounding rectangle given the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions sampled.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Rectangle} [result] An object in which to store the result.\n *\n * @returns {Rectangle} The result rectangle\n */\nPolygonGeometry.computeRectangle = function (options, result) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.object(\"options\", options);\n    Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n    //>>includeEnd('debug');\n\n    var granularity = defaultValue(\n        options.granularity,\n        CesiumMath.RADIANS_PER_DEGREE\n    );\n    var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n    //>>includeStart('debug', pragmas.debug);\n    if (arcType !== ArcType.GEODESIC && arcType !== ArcType.RHUMB) {\n        throw new DeveloperError(\n            \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n        );\n    }\n    //>>includeEnd('debug');\n\n    var polygonHierarchy = options.polygonHierarchy;\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n    return computeRectangle(\n        polygonHierarchy.positions,\n        ellipsoid,\n        arcType,\n        granularity,\n        result\n    );\n};\n\n/**\n * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolygonGeometry.createGeometry = function (polygonGeometry) {\n    var vertexFormat = polygonGeometry._vertexFormat;\n    var ellipsoid = polygonGeometry._ellipsoid;\n    var granularity = polygonGeometry._granularity;\n    var stRotation = polygonGeometry._stRotation;\n    var polygonHierarchy = polygonGeometry._polygonHierarchy;\n    var perPositionHeight = polygonGeometry._perPositionHeight;\n    var closeTop = polygonGeometry._closeTop;\n    var closeBottom = polygonGeometry._closeBottom;\n    var arcType = polygonGeometry._arcType;\n    let isPlaneMode = polygonGeometry._isPlaneMode;\n\n    var outerPositions = polygonHierarchy.positions;\n    if (outerPositions.length < 3) {\n        return;\n    }\n\n    var tangentPlane;\n    if(isPlaneMode){\n        tangentPlane = Plane.fromPointNormal(outerPositions[0], Cartesian3.UNIT_Z);\n    }else{\n        tangentPlane = EllipsoidTangentPlane.fromPoints(\n            outerPositions,\n            ellipsoid\n        );\n    }\n\n    var results = PolygonGeometryLibrary.polygonsFromHierarchy(\n        polygonHierarchy,\n        isPlaneMode? undefined : tangentPlane.projectPointsOntoPlane.bind(tangentPlane),\n        !perPositionHeight,\n        ellipsoid\n    );\n\n    var hierarchy = results.hierarchy;\n    var polygons = results.polygons;\n\n    if (hierarchy.length === 0) {\n        return;\n    }\n\n    outerPositions = hierarchy[0].outerRing;\n    var boundingRectangle;\n    if(isPlaneMode){\n        boundingRectangle = PolygonGeometryLibrary.computeBoundingRectanglePlaneMode(outerPositions, scratchBoundingRectangle);\n    }else{\n        boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n            tangentPlane.plane.normal,\n            tangentPlane.projectPointOntoPlane.bind(tangentPlane),\n            outerPositions,\n            stRotation,\n            scratchBoundingRectangle\n        );\n    }\n\n    var geometries = [];\n\n    var height = polygonGeometry._height;\n    var extrudedHeight = polygonGeometry._extrudedHeight;\n    var extrude =\n        polygonGeometry._perPositionHeightExtrude ||\n        !CesiumMath.equalsEpsilon(\n            height,\n            extrudedHeight,\n            0,\n            CesiumMath.EPSILON2\n        );\n\n    var options = {\n        perPositionHeight: perPositionHeight,\n        vertexFormat: vertexFormat,\n        geometry: undefined,\n        tangentPlane: tangentPlane,\n        boundingRectangle: boundingRectangle,\n        ellipsoid: ellipsoid,\n        stRotation: stRotation,\n        bottom: false,\n        top: true,\n        wall: false,\n        extrude: false,\n        arcType: arcType,\n        isPlaneMode: isPlaneMode,\n    };\n\n    var i;\n\n    if (extrude) {\n        options.extrude = true;\n        options.top = closeTop;\n        options.bottom = closeBottom;\n        options.shadowVolume = polygonGeometry._shadowVolume;\n        options.offsetAttribute = polygonGeometry._offsetAttribute;\n        for (i = 0; i < polygons.length; i++) {\n            var splitGeometry = createGeometryFromPositionsExtruded(\n                ellipsoid,\n                polygons[i],\n                granularity,\n                hierarchy[i],\n                perPositionHeight,\n                closeTop,\n                closeBottom,\n                vertexFormat,\n                arcType,\n                isPlaneMode\n            );\n\n            var topAndBottom;\n            if (closeTop && closeBottom) {\n                topAndBottom = splitGeometry.topAndBottom;\n                options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n                    topAndBottom.geometry,\n                    height,\n                    extrudedHeight,\n                    ellipsoid,\n                    perPositionHeight,\n                    isPlaneMode\n                );\n            } else if (closeTop) {\n                topAndBottom = splitGeometry.topAndBottom;\n                topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n                    topAndBottom.geometry.attributes.position.values,\n                    height,\n                    ellipsoid,\n                    !perPositionHeight,\n                    isPlaneMode\n                );\n                options.geometry = topAndBottom.geometry;\n            } else if (closeBottom) {\n                topAndBottom = splitGeometry.topAndBottom;\n                topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n                    topAndBottom.geometry.attributes.position.values,\n                    extrudedHeight,\n                    ellipsoid,\n                    true,\n                    isPlaneMode\n                );\n                options.geometry = topAndBottom.geometry;\n            }\n            if (closeTop || closeBottom) {\n                options.wall = false;\n                topAndBottom.geometry = computeAttributes(options);\n                geometries.push(topAndBottom);\n            }\n\n            var walls = splitGeometry.walls;\n            options.wall = true;\n            for (var k = 0; k < walls.length; k++) {\n                var wall = walls[k];\n                options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n                    wall.geometry,\n                    height,\n                    extrudedHeight,\n                    ellipsoid,\n                    perPositionHeight,\n                    isPlaneMode\n                );\n                wall.geometry = computeAttributes(options);\n                geometries.push(wall);\n            }\n        }\n    } else {\n        for (i = 0; i < polygons.length; i++) {\n            var geometryInstance = new GeometryInstance({\n                geometry: PolygonGeometryLibrary.createGeometryFromPositions(\n                    ellipsoid,\n                    polygons[i],\n                    granularity,\n                    perPositionHeight,\n                    vertexFormat,\n                    arcType,\n                    isPlaneMode\n                ),\n            });\n            geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n                geometryInstance.geometry.attributes.position.values,\n                height,\n                ellipsoid,\n                !perPositionHeight,\n                isPlaneMode\n            );\n            options.geometry = geometryInstance.geometry;\n            geometryInstance.geometry = computeAttributes(options);\n\n            if (defined(polygonGeometry._offsetAttribute)) {\n                var length =\n                    geometryInstance.geometry.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue =\n                    polygonGeometry._offsetAttribute ===\n                    GeometryOffsetAttribute.NONE\n                        ? 0\n                        : 1;\n                arrayFill(applyOffset, offsetValue);\n                geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute(\n                    {\n                        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n                        componentsPerAttribute: 1,\n                        values: applyOffset,\n                    }\n                );\n            }\n\n            geometries.push(geometryInstance);\n        }\n    }\n\n    var geometry = GeometryPipeline.combineInstances(geometries)[0];\n    geometry.attributes.position.values = new Float64Array(\n        geometry.attributes.position.values\n    );\n    geometry.indices = IndexDatatype.createTypedArray(\n        geometry.attributes.position.values.length / 3,\n        geometry.indices\n    );\n\n    var attributes = geometry.attributes;\n    var boundingSphere = BoundingSphere.fromVertices(\n        attributes.position.values\n    );\n\n    if (!vertexFormat.position) {\n        delete attributes.position;\n    }\n\n    return new Geometry({\n        attributes: attributes,\n        indices: geometry.indices,\n        primitiveType: geometry.primitiveType,\n        boundingSphere: boundingSphere,\n        offsetAttribute: polygonGeometry._offsetAttribute,\n    });\n};\n\n/**\n * @private\n */\nPolygonGeometry.createShadowVolume = function (\n    polygonGeometry,\n    minHeightFunc,\n    maxHeightFunc\n) {\n    var granularity = polygonGeometry._granularity;\n    var ellipsoid = polygonGeometry._ellipsoid;\n\n    var minHeight = minHeightFunc(granularity, ellipsoid);\n    var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n    return new PolygonGeometry({\n        polygonHierarchy: polygonGeometry._polygonHierarchy,\n        ellipsoid: ellipsoid,\n        stRotation: polygonGeometry._stRotation,\n        granularity: granularity,\n        perPositionHeight: false,\n        extrudedHeight: minHeight,\n        height: maxHeight,\n        vertexFormat: VertexFormat.POSITION_ONLY,\n        shadowVolume: true,\n        arcType: polygonGeometry._arcType,\n    });\n};\n\nfunction textureCoordinateRotationPoints(polygonGeometry) {\n    var stRotation = -polygonGeometry._stRotation;\n    if (stRotation === 0.0) {\n        return [0, 0, 0, 1, 1, 0];\n    }\n    var ellipsoid = polygonGeometry._ellipsoid;\n    var positions = polygonGeometry._polygonHierarchy.positions;\n    var boundingRectangle = polygonGeometry.rectangle;\n    return Geometry._textureCoordinateRotationPoints(\n        positions,\n        stRotation,\n        ellipsoid,\n        boundingRectangle\n    );\n}\n\nObject.defineProperties(PolygonGeometry.prototype, {\n    /**\n     * @private\n     */\n    rectangle: {\n        get: function () {\n            if (!defined(this._rectangle)) {\n                var positions = this._polygonHierarchy.positions;\n                this._rectangle = computeRectangle(\n                    positions,\n                    this._ellipsoid,\n                    this._arcType,\n                    this._granularity\n                );\n            }\n\n            return this._rectangle;\n        },\n    },\n    /**\n     * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\n     * @private\n     */\n    textureCoordinateRotationPoints: {\n        get: function () {\n            if (!defined(this._textureCoordinateRotationPoints)) {\n                this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(\n                    this\n                );\n            }\n            return this._textureCoordinateRotationPoints;\n        },\n    },\n});\nexport default PolygonGeometry;\n","import defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport PolygonGeometry from '../Core/PolygonGeometry.js';\n\n    function createPolygonGeometry(polygonGeometry, offset) {\n        if (defined(offset)) {\n            polygonGeometry = PolygonGeometry.unpack(polygonGeometry, offset);\n        }\n        polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\n        return PolygonGeometry.createGeometry(polygonGeometry);\n    }\nexport default createPolygonGeometry;\n"],"names":["Cartographic","BoundingRectangle","Cartesian3","Cartesian2","Quaternion","Matrix3","CesiumMath","GeometryAttribute","ComponentDatatype","defined","GeometryOffsetAttribute","arrayFill","EllipsoidGeodesic","defaultValue","Rectangle","ArcType","PolygonGeometryLibrary","IndexDatatype","GeometryInstance","Plane","EllipsoidTangentPlane","PolygonPipeline","WindingOrder","Check","DeveloperError","VertexFormat","Ellipsoid","BoundingSphere","Geometry","GeometryAttributes","PrimitiveType","earcut","GeometryPipeline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAkCA,IAAI,aAAa,GAAG,IAAIA,uBAAY,EAAE,CAAC;IACvC,IAAI,aAAa,GAAG,IAAIA,uBAAY,EAAE,CAAC;IACvC,SAAS,yBAAyB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE;IAChE,IAAI,IAAI,MAAM,GAAG,SAAS,CAAC,uBAAuB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC5E,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC/B,IAAI,IAAI,OAAO,GAAG,SAAS,CAAC,uBAAuB,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;IACvE,IAAI,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;IAC5B,IAAI,SAAS,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACnD;IACA,IAAI,IAAI,OAAO,GAAG,SAAS,CAAC,uBAAuB,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;IACvE,IAAI,OAAO,CAAC,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC;IAClC,IAAI,SAAS,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC;AACD;IACA,IAAI,wBAAwB,GAAG,IAAIC,mCAAiB,EAAE,CAAC;IACvD,IAAI,eAAe,GAAG,IAAIC,qBAAU,EAAE,CAAC;IACvC,IAAI,aAAa,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACrC,IAAI,cAAc,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACtC,IAAI,gBAAgB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACxC,IAAI,SAAS,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACjC,IAAI,SAAS,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACjC,IAAI,mBAAmB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC3C,IAAI,oBAAoB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC5C,IAAI,sBAAsB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC9C;IACA,IAAI,8BAA8B,GAAG,IAAIC,qBAAU,EAAE,CAAC;IACtD,IAAI,kCAAkC,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC1D,IAAI,kCAAkC,GAAG,IAAID,qBAAU,EAAE,CAAC;IAC1D,IAAI,kCAAkC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC1D,IAAI,+BAA+B,GAAG,IAAIC,eAAO,EAAE,CAAC;IACpD,IAAI,oBAAoB,GAAG,IAAIA,eAAO,EAAE,CAAC;AACzC;IACA,SAAS,iBAAiB,CAAC,OAAO,EAAE;IACpC,IAAI,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAC5C,IAAI,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACpC,IAAI,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAC5C,IAAI,IAAI,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC5D,IAAI,IAAI,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IACtC,IAAI,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC5B,IAAI,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC;IAClC,IAAI,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC;IACxC,IAAI,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IAC1C,IAAI;IACJ,QAAQ,YAAY,CAAC,EAAE;IACvB,QAAQ,YAAY,CAAC,MAAM;IAC3B,QAAQ,YAAY,CAAC,OAAO;IAC5B,QAAQ,YAAY,CAAC,SAAS;IAC9B,QAAQ,YAAY;IACpB,MAAM;IACN;IACA;IACA,QAAQ,IAAI,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;IAC1D,QAAQ,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAChD,QAAQ,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IAC1C,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IAC5C,QAAQ,IAAI,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;AAC1D;IACA,QAAQ,IAAI,MAAM,GAAG,8BAA8B,CAAC;IACpD,QAAQ,MAAM,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC;IACvC,QAAQ,MAAM,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC;AACvC;IACA,QAAQ,IAAI,kBAAkB,GAAG,YAAY,CAAC,EAAE;IAChD,cAAc,IAAI,YAAY,CAAC,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC;IAChD,cAAc,SAAS,CAAC;IACxB,QAAQ,IAAI,OAAO,CAAC;IACpB,QAAQ,IAAI,YAAY,CAAC,MAAM,EAAE;IACjC,YAAY,IAAI,iBAAiB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE;IACnD,gBAAgB,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5D,aAAa,MAAM;IACnB,gBAAgB,OAAO,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;IACnD,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO;IAC3C,cAAc,IAAI,YAAY,CAAC,MAAM,CAAC;IACtC,cAAc,SAAS,CAAC;IACxB,QAAQ,IAAI,UAAU,GAAG,YAAY,CAAC,SAAS;IAC/C,cAAc,IAAI,YAAY,CAAC,MAAM,CAAC;IACtC,cAAc,SAAS,CAAC;IACxB,QAAQ,IAAI,cAAc,GAAG,YAAY;IACzC,cAAc,IAAI,YAAY,CAAC,MAAM,CAAC;IACtC,cAAc,SAAS,CAAC;AACxB;IACA,QAAQ,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAClC,QAAQ,IAAI,SAAS,GAAG,CAAC,CAAC;AAC1B;IACA,QAAQ,IAAI,MAAM,GAAG,aAAa,CAAC;IACnC,QAAQ,IAAI,OAAO,GAAG,cAAc,CAAC;IACrC,QAAQ,IAAI,SAAS,GAAG,gBAAgB,CAAC;IACzC,QAAQ,IAAI,eAAe,GAAG,IAAI,CAAC;AACnC;IACA,QAAQ,IAAI,aAAa,GAAG,+BAA+B,CAAC;IAC5D,QAAQ,IAAI,qBAAqB,GAAG,oBAAoB,CAAC;IACzD,QAAQ,IAAI,UAAU,KAAK,GAAG,EAAE;IAChC,YAAY,IAAI,QAAQ,GAAGD,qBAAU,CAAC,aAAa;IACnD,gBAAgB,YAAY,CAAC,MAAM,CAAC,MAAM;IAC1C,gBAAgB,UAAU;IAC1B,gBAAgB,kCAAkC;IAClD,aAAa,CAAC;IACd,YAAY,aAAa,GAAGC,eAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;AAC5E;IACA,YAAY,QAAQ,GAAGD,qBAAU,CAAC,aAAa;IAC/C,gBAAgB,YAAY,CAAC,MAAM,CAAC,MAAM;IAC1C,gBAAgB,CAAC,UAAU;IAC3B,gBAAgB,kCAAkC;IAClD,aAAa,CAAC;IACd,YAAY,qBAAqB,GAAGC,eAAO,CAAC,cAAc;IAC1D,gBAAgB,QAAQ;IACxB,gBAAgB,qBAAqB;IACrC,aAAa,CAAC;IACd,SAAS,MAAM;IACf,YAAY,aAAa,GAAGA,eAAO,CAAC,KAAK,CAACA,eAAO,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC3E,YAAY,qBAAqB,GAAGA,eAAO,CAAC,KAAK;IACjD,gBAAgBA,eAAO,CAAC,QAAQ;IAChC,gBAAgB,qBAAqB;IACrC,aAAa,CAAC;IACd,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,IAAI,aAAa,GAAG,CAAC,CAAC;AAC9B;IACA,QAAQ,IAAI,GAAG,IAAI,MAAM,EAAE;IAC3B,YAAY,YAAY,GAAG,MAAM,GAAG,CAAC,CAAC;IACtC,YAAY,aAAa,GAAG,MAAM,GAAG,CAAC,CAAC;AACvC;IACA,YAAY,MAAM,IAAI,CAAC,CAAC;IACxB,SAAS;AACT;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAC5C,YAAY,IAAI,QAAQ,GAAGH,qBAAU,CAAC,SAAS;IAC/C,gBAAgB,aAAa;IAC7B,gBAAgB,CAAC;IACjB,gBAAgB,kCAAkC;IAClD,aAAa,CAAC;AACd;IACA,YAAY,IAAI,YAAY,CAAC,EAAE,EAAE;IACjC,gBAAgB,IAAI,CAAC,GAAGG,eAAO,CAAC,gBAAgB;IAChD,oBAAoB,aAAa;IACjC,oBAAoB,QAAQ;IAC5B,oBAAoB,eAAe;IACnC,iBAAiB,CAAC;IAClB,gBAAgB,CAAC,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3D,gBAAgB,IAAI,EAAE,GAAG,YAAY,CAAC,qBAAqB;IAC3D,oBAAoB,CAAC;IACrB,oBAAoB,kCAAkC;IACtD,iBAAiB,CAAC;IAClB,gBAAgBF,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;AACpD;IACA,gBAAgB,IAAI,GAAG,GAAGG,qBAAU,CAAC,KAAK;IAC1C,oBAAoB,EAAE,CAAC,CAAC,GAAG,iBAAiB,CAAC,KAAK;IAClD,oBAAoB,CAAC;IACrB,oBAAoB,CAAC;IACrB,iBAAiB,CAAC;IAClB,gBAAgB,IAAI,GAAG,GAAGA,qBAAU,CAAC,KAAK;IAC1C,oBAAoB,EAAE,CAAC,CAAC,GAAG,iBAAiB,CAAC,MAAM;IACnD,oBAAoB,CAAC;IACrB,oBAAoB,CAAC;IACrB,iBAAiB,CAAC;IAClB,gBAAgB,IAAI,MAAM,EAAE;IAC5B,oBAAoB,kBAAkB,CAAC,iBAAiB,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC;IAChF,oBAAoB,kBAAkB;IACtC,wBAAwB,iBAAiB,GAAG,CAAC,GAAG,aAAa;IAC7D,qBAAqB,GAAG,GAAG,CAAC;IAC5B,iBAAiB;IACjB,gBAAgB,IAAI,GAAG,EAAE;IACzB,oBAAoB,kBAAkB,CAAC,iBAAiB,CAAC,GAAG,GAAG,CAAC;IAChE,oBAAoB,kBAAkB,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IACpE,iBAAiB;AACjB;IACA,gBAAgB,iBAAiB,IAAI,CAAC,CAAC;IACvC,aAAa;AACb;IACA,YAAY;IACZ,gBAAgB,YAAY,CAAC,MAAM;IACnC,gBAAgB,YAAY,CAAC,OAAO;IACpC,gBAAgB,YAAY,CAAC,SAAS;IACtC,gBAAgB,YAAY;IAC5B,cAAc;IACd,gBAAgB,IAAI,UAAU,GAAG,SAAS,GAAG,CAAC,CAAC;IAC/C,gBAAgB,IAAI,UAAU,GAAG,SAAS,GAAG,CAAC,CAAC;AAC/C;IACA,gBAAgB,IAAI,IAAI,EAAE;IAC1B,oBAAoB,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE;IACxC,wBAAwB,IAAI,EAAE,GAAGJ,qBAAU,CAAC,SAAS;IACrD,4BAA4B,aAAa;IACzC,4BAA4B,CAAC,GAAG,CAAC;IACjC,4BAA4B,SAAS;IACrC,yBAAyB,CAAC;AAC1B;IACA,wBAAwB,IAAI,eAAe,EAAE;IAC7C,4BAA4B,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS;IACzD,gCAAgC,aAAa;IAC7C,gCAAgC,CAAC,GAAG,MAAM;IAC1C,gCAAgC,SAAS;IACzC,6BAA6B,CAAC;IAC9B,4BAA4B,IAAI,iBAAiB,IAAI,CAAC,WAAW,EAAE;IACnE,gCAAgC,yBAAyB;IACzD,oCAAoC,QAAQ;IAC5C,oCAAoC,EAAE;IACtC,oCAAoC,EAAE;IACtC,oCAAoC,SAAS;IAC7C,iCAAiC,CAAC;IAClC,6BAA6B,KAAK,GAAG,WAAW,CAAC;IACjD,gCAAgC,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAC;IACjD,gCAAgC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAClD,6BAA6B;IAC7B,4BAA4BA,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;IAClE,4BAA4BA,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;IAClE,4BAA4B,MAAM,GAAGA,qBAAU,CAAC,SAAS;IACzD,gCAAgCA,qBAAU,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC;IAChE,gCAAgC,MAAM;IACtC,6BAA6B,CAAC;IAC9B,4BAA4B,eAAe,GAAG,KAAK,CAAC;IACpD,yBAAyB;AACzB;IACA,wBAAwB;IACxB,4BAA4BA,qBAAU,CAAC,aAAa;IACpD,gCAAgC,EAAE;IAClC,gCAAgC,QAAQ;IACxC,gCAAgCI,qBAAU,CAAC,SAAS;IACpD,6BAA6B;IAC7B,0BAA0B;IAC1B;IACA,4BAA4B,eAAe,GAAG,IAAI,CAAC;IACnD,yBAAyB;IACzB,qBAAqB;AACrB;IACA,oBAAoB,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,SAAS,EAAE;IACxE,wBAAwB,SAAS,GAAG,SAAS,CAAC,qBAAqB;IACnE,4BAA4B,QAAQ;IACpC,4BAA4B,SAAS;IACrC,yBAAyB,CAAC;IAC1B,wBAAwB,IAAI,YAAY,CAAC,OAAO,EAAE;IAClD,4BAA4B,OAAO,GAAGJ,qBAAU,CAAC,SAAS;IAC1D,gCAAgCA,qBAAU,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;IAC5E,gCAAgC,OAAO;IACvC,6BAA6B,CAAC;IAC9B,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB,MAAM;IACvB,oBAAoB,GAAG,WAAW,CAAC;IACnC,wBAAwB,MAAM,GAAGA,qBAAU,CAAC,MAAM,CAAC;IACnD,qBAAqB,KAAI;IACzB,wBAAwB,MAAM,GAAG,SAAS,CAAC,qBAAqB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACnF,qBAAqB;IACrB,oBAAoB,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,SAAS,EAAE;IACxE,wBAAwB,IAAI,iBAAiB,EAAE;IAC/C,4BAA4B,mBAAmB,GAAGA,qBAAU,CAAC,SAAS;IACtE,gCAAgC,OAAO;IACvC,gCAAgC,SAAS;IACzC,gCAAgC,mBAAmB;IACnD,6BAA6B,CAAC;IAC9B,4BAA4B,oBAAoB,GAAGA,qBAAU,CAAC,KAAK;IACnE,gCAAgCA,qBAAU,CAAC,MAAM;IACjD,gCAAgC,mBAAmB;IACnD,gCAAgC,oBAAoB;IACpD,6BAA6B,CAAC;IAC9B,4BAA4B,oBAAoB,GAAGA,qBAAU,CAAC,SAAS;IACvE,gCAAgCG,eAAO,CAAC,gBAAgB;IACxD,oCAAoC,qBAAqB;IACzD,oCAAoC,oBAAoB;IACxD,oCAAoC,oBAAoB;IACxD,iCAAiC;IACjC,gCAAgC,oBAAoB;IACpD,6BAA6B,CAAC;IAC9B,4BAA4B,IAAI,YAAY,CAAC,SAAS,EAAE;IACxD,gCAAgC,sBAAsB,GAAGH,qBAAU,CAAC,SAAS;IAC7E,oCAAoCA,qBAAU,CAAC,KAAK;IACpD,wCAAwC,mBAAmB;IAC3D,wCAAwC,oBAAoB;IAC5D,wCAAwC,sBAAsB;IAC9D,qCAAqC;IACrC,oCAAoC,sBAAsB;IAC1D,iCAAiC,CAAC;IAClC,6BAA6B;IAC7B,yBAAyB;AACzB;IACA,wBAAwB,OAAO,GAAGA,qBAAU,CAAC,KAAK;IAClD,4BAA4BA,qBAAU,CAAC,MAAM;IAC7C,4BAA4B,MAAM;IAClC,4BAA4B,OAAO;IACnC,yBAAyB,CAAC;IAC1B,wBAAwB,OAAO,GAAGA,qBAAU,CAAC,SAAS;IACtD,4BAA4BG,eAAO,CAAC,gBAAgB;IACpD,gCAAgC,qBAAqB;IACrD,gCAAgC,OAAO;IACvC,gCAAgC,OAAO;IACvC,6BAA6B;IAC7B,4BAA4B,OAAO;IACnC,yBAAyB,CAAC;IAC1B,wBAAwB,IAAI,YAAY,CAAC,SAAS,EAAE;IACpD,4BAA4B,SAAS,GAAGH,qBAAU,CAAC,SAAS;IAC5D,gCAAgCA,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;IAC5E,gCAAgC,SAAS;IACzC,6BAA6B,CAAC;IAC9B,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,CAAC,MAAM,EAAE;IACzC,oBAAoB,IAAI,OAAO,CAAC,IAAI,EAAE;IACtC,wBAAwB,OAAO,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACrE,wBAAwB,OAAO,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACtE,wBAAwB,OAAO,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACtE,qBAAqB,MAAM,IAAI,MAAM,EAAE;IACvC,wBAAwB,OAAO,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACtE,wBAAwB,OAAO,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACvE,wBAAwB,OAAO,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACvE,qBAAqB;AACrB;IACA,oBAAoB,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;IAC7D,wBAAwB,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACtD,wBAAwB,OAAO,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvD,wBAAwB,OAAO,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvD,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,EAAE;IAClC,oBAAoB,IAAI,IAAI,EAAE;IAC9B,wBAAwB,MAAM,GAAG,SAAS,CAAC,qBAAqB;IAChE,4BAA4B,QAAQ;IACpC,4BAA4B,MAAM;IAClC,yBAAyB,CAAC;IAC1B,qBAAqB;IACrB,oBAAoB,cAAc,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACzE,oBAAoB,cAAc,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1E,oBAAoB,cAAc,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1E,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,CAAC,OAAO,EAAE;IAC1C,oBAAoB,IAAI,OAAO,CAAC,IAAI,EAAE;IACtC,wBAAwB,QAAQ,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACvE,wBAAwB,QAAQ,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACxE,wBAAwB,QAAQ,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACxE,qBAAqB,MAAM,IAAI,MAAM,EAAE;IACvC,wBAAwB,QAAQ,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACxE,wBAAwB,QAAQ,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACzE,wBAAwB,QAAQ,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACzE,qBAAqB;AACrB;IACA,oBAAoB,IAAI,GAAG,EAAE;IAC7B,wBAAwB,IAAI,iBAAiB,EAAE;IAC/C,4BAA4B,QAAQ,CAAC,SAAS,CAAC,GAAG,oBAAoB,CAAC,CAAC,CAAC;IACzE,4BAA4B,QAAQ,CAAC,UAAU,CAAC,GAAG,oBAAoB,CAAC,CAAC,CAAC;IAC1E,4BAA4B,QAAQ,CAAC,UAAU,CAAC,GAAG,oBAAoB,CAAC,CAAC,CAAC;IAC1E,yBAAyB,MAAM;IAC/B,4BAA4B,QAAQ,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAC5D,4BAA4B,QAAQ,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAC7D,4BAA4B,QAAQ,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAC7D,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,CAAC,SAAS,EAAE;IAC5C,oBAAoB,IAAI,MAAM,EAAE;IAChC,wBAAwB,UAAU,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC3E,wBAAwB,UAAU,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC5E,wBAAwB,UAAU,CAAC,UAAU,GAAG,YAAY,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC5E,qBAAqB;IACrB,oBAAoB,IAAI,GAAG,EAAE;IAC7B,wBAAwB,IAAI,iBAAiB,EAAE;IAC/C,4BAA4B,UAAU,CAAC,SAAS,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;IAC7E,4BAA4B,UAAU,CAAC,UAAU,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;IAC9E,4BAA4B,UAAU,CAAC,UAAU,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;IAC9E,yBAAyB,MAAM;IAC/B,4BAA4B,UAAU,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAChE,4BAA4B,UAAU,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACjE,4BAA4B,UAAU,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACjE,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,SAAS,IAAI,CAAC,CAAC;IAC/B,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,EAAE,EAAE;IAC7B,YAAY,QAAQ,CAAC,UAAU,CAAC,EAAE,GAAG,IAAIK,mCAAiB,CAAC;IAC3D,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,kBAAkB;IAC1C,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,MAAM,EAAE;IACjC,YAAY,QAAQ,CAAC,UAAU,CAAC,MAAM,GAAG,IAAID,mCAAiB,CAAC;IAC/D,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,OAAO;IAC/B,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,OAAO,EAAE;IAClC,YAAY,QAAQ,CAAC,UAAU,CAAC,OAAO,GAAG,IAAID,mCAAiB,CAAC;IAChE,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,QAAQ;IAChC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,SAAS,EAAE;IACpC,YAAY,QAAQ,CAAC,UAAU,CAAC,SAAS,GAAG,IAAID,mCAAiB,CAAC;IAClE,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,UAAU;IAClC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,EAAE;IAC1B,YAAY,QAAQ,CAAC,UAAU,CAAC,gBAAgB,GAAG,IAAID,mCAAiB,CAAC;IACzE,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,cAAc;IACtC,aAAa,CAAC,CAAC;IACf,SAAS;IACT,KAAK;AACL;IACA,IAAI,IAAI,OAAO,CAAC,OAAO,IAAIC,YAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;IAC7D,QAAQ,IAAI,IAAI,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5C,QAAQ,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;AACnD;IACA,QAAQ,IAAI,OAAO,CAAC,eAAe,KAAKC,+CAAuB,CAAC,GAAG,EAAE;IACrE,YAAY,IAAI,CAAC,GAAG,IAAI,MAAM,KAAK,IAAI,EAAE;IACzC,gBAAgB,eAAe,GAAGC,iCAAS,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;IAC7E,aAAa,MAAM,IAAI,GAAG,EAAE;IAC5B,gBAAgB,eAAe,GAAGA,iCAAS,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;IAChE,aAAa;IACb,SAAS,MAAM;IACf,YAAY,IAAI,WAAW;IAC3B,gBAAgB,OAAO,CAAC,eAAe,KAAKD,+CAAuB,CAAC,IAAI;IACxE,sBAAsB,CAAC;IACvB,sBAAsB,CAAC,CAAC;IACxB,YAAY,eAAe,GAAGC,iCAAS,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;IACtE,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG,IAAIJ,mCAAiB,CAAC;IAChE,YAAY,iBAAiB,EAAEC,mCAAiB,CAAC,aAAa;IAC9D,YAAY,sBAAsB,EAAE,CAAC;IACrC,YAAY,MAAM,EAAE,eAAe;IACnC,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA,IAAI,OAAO,QAAQ,CAAC;IACpB,CAAC;AACD;IACA,IAAI,wBAAwB,GAAG,IAAIR,uBAAY,EAAE,CAAC;IAClD,IAAI,sBAAsB,GAAG,IAAIA,uBAAY,EAAE,CAAC;IAChD,IAAI,QAAQ,GAAG;IACf,IAAI,WAAW,EAAE,GAAG;IACpB,IAAI,WAAW,EAAE,GAAG;IACpB,CAAC,CAAC;IACF,IAAI,iBAAiB,GAAG,IAAIY,mCAAiB,EAAE,CAAC;IAChD,SAAS,gBAAgB,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE;IAC9E,IAAI,MAAM,GAAGC,iBAAY,CAAC,MAAM,EAAE,IAAIC,oBAAS,EAAE,CAAC,CAAC;IACnD,IAAI,IAAI,CAACL,YAAO,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;IACrD,QAAQ,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC;IAC1B,QAAQ,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;IAC3B,QAAQ,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;IAC3B,QAAQ,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC;IAC1B,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK;AACL;IACA,IAAI,IAAI,OAAO,KAAKM,eAAO,CAAC,KAAK,EAAE;IACnC,QAAQ,OAAOD,oBAAS,CAAC,kBAAkB,CAAC,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAC1E,KAAK;AACL;IACA,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;IACxD,QAAQ,iBAAiB,GAAG,IAAIF,mCAAiB;IACjD,YAAY,SAAS;IACrB,YAAY,SAAS;IACrB,YAAY,SAAS;IACrB,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;IAC3C,IAAI,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;IAC3C,IAAI,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,iBAAiB,CAAC;IAC5C,IAAI,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,iBAAiB,CAAC;AAC5C;IACA,IAAI,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,iBAAiB,CAAC;IACpD,IAAI,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,iBAAiB,CAAC;AACpD;IACA,IAAI,IAAI,kBAAkB;IAC1B,QAAQ,GAAG,GAAGN,qBAAU,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;IAC3E,IAAI,IAAI,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC;IAC3C,IAAI,IAAI,eAAe,GAAG,SAAS,CAAC,uBAAuB;IAC3D,QAAQ,SAAS,CAAC,CAAC,CAAC;IACpB,QAAQ,sBAAsB;IAC9B,KAAK,CAAC;IACN,IAAI,IAAI,iBAAiB,GAAG,wBAAwB,CAAC;IACrD,IAAI,IAAI,IAAI,CAAC;AACb;IACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;IAC9C,QAAQ,IAAI,GAAG,iBAAiB,CAAC;IACjC,QAAQ,iBAAiB,GAAG,eAAe,CAAC;IAC5C,QAAQ,eAAe,GAAG,SAAS,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAChF,QAAQ,iBAAiB,CAAC,YAAY,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;IAC3E,QAAQ,2BAA2B;IACnC,YAAY,iBAAiB;IAC7B,YAAY,kBAAkB;IAC9B,YAAY,MAAM;IAClB,YAAY,QAAQ;IACpB,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,IAAI,GAAG,iBAAiB,CAAC;IAC7B,IAAI,iBAAiB,GAAG,eAAe,CAAC;IACxC,IAAI,eAAe,GAAG,SAAS,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAC5E,IAAI,iBAAiB,CAAC,YAAY,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;IACvE,IAAI,2BAA2B;IAC/B,QAAQ,iBAAiB;IACzB,QAAQ,kBAAkB;IAC1B,QAAQ,MAAM;IACd,QAAQ,QAAQ;IAChB,KAAK,CAAC;AACN;IACA,IAAI;IACJ,QAAQ,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;IACjC,QAAQ,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW;IACnD,MAAM;IACN,QAAQ,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC;IAC3C,QAAQ,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC;AAC3C;IACA,QAAQ,IAAI,MAAM,CAAC,IAAI,GAAGA,qBAAU,CAAC,EAAE,EAAE;IACzC,YAAY,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,GAAGA,qBAAU,CAAC,MAAM,CAAC;IAC1D,SAAS;IACT,QAAQ,IAAI,MAAM,CAAC,IAAI,GAAGA,qBAAU,CAAC,EAAE,EAAE;IACzC,YAAY,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,GAAGA,qBAAU,CAAC,MAAM,CAAC;IAC1D,SAAS;IACT,KAAK;AACL;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;AACD;IACA,IAAI,+BAA+B,GAAG,IAAIN,uBAAY,EAAE,CAAC;IACzD,SAAS,2BAA2B;IACpC,IAAI,iBAAiB;IACrB,IAAI,kBAAkB;IACtB,IAAI,MAAM;IACV,IAAI,QAAQ;IACZ,EAAE;IACF,IAAI,IAAI,aAAa,GAAG,iBAAiB,CAAC,eAAe,CAAC;AAC1D;IACA,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,kBAAkB,CAAC,CAAC;IAClE,IAAI,IAAI,kBAAkB;IAC1B,QAAQ,SAAS,GAAG,CAAC;IACrB,cAAc,aAAa,IAAI,SAAS,GAAG,CAAC,CAAC;IAC7C,cAAc,MAAM,CAAC,iBAAiB,CAAC;IACvC,IAAI,IAAI,qBAAqB,GAAG,GAAG,CAAC;AACpC;IACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IACxC,QAAQ,IAAI,wBAAwB,GAAG,iBAAiB,CAAC,+BAA+B;IACxF,YAAY,qBAAqB;IACjC,YAAY,+BAA+B;IAC3C,SAAS,CAAC;IACV,QAAQ,qBAAqB,IAAI,kBAAkB,CAAC;IACpD,QAAQ,IAAI,SAAS,GAAG,wBAAwB,CAAC,SAAS,CAAC;IAC3D,QAAQ,IAAI,QAAQ,GAAG,wBAAwB,CAAC,QAAQ,CAAC;AACzD;IACA,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACvD,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACvD,QAAQ,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACxD,QAAQ,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACxD;IACA,QAAQ,IAAI,WAAW;IACvB,YAAY,SAAS,IAAI,CAAC,GAAG,SAAS,GAAG,SAAS,GAAGM,qBAAU,CAAC,MAAM,CAAC;IACvE,QAAQ,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAC3E,QAAQ,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAC3E,KAAK;IACL,CAAC;AACD;IACA,IAAI,4CAA4C,GAAG,EAAE,CAAC;AACtD;IACA,SAAS,mCAAmC;IAC5C,IAAI,SAAS;IACb,IAAI,OAAO;IACX,IAAI,WAAW;IACf,IAAI,SAAS;IACb,IAAI,iBAAiB;IACrB,IAAI,QAAQ;IACZ,IAAI,WAAW;IACf,IAAI,YAAY;IAChB,IAAI,OAAO;IACX,IAAI,WAAW;IACf,EAAE;IACF,IAAI,IAAI,IAAI,GAAG;IACf,QAAQ,KAAK,EAAE,EAAE;IACjB,KAAK,CAAC;IACN,IAAI,IAAI,CAAC,CAAC;AACV;IACA,IAAI,IAAI,QAAQ,IAAI,WAAW,EAAE;IACjC,QAAQ,IAAI,MAAM,GAAGU,6CAAsB,CAAC,2BAA2B;IACvE,YAAY,SAAS;IACrB,YAAY,OAAO;IACnB,YAAY,WAAW;IACvB,YAAY,iBAAiB;IAC7B,YAAY,YAAY;IACxB,YAAY,OAAO;IACnB,YAAY,WAAW;IACvB,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC3D,QAAQ,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IACrC,QAAQ,IAAI,YAAY,CAAC;IACzB,QAAQ,IAAI,UAAU,CAAC;AACvB;IACA,QAAQ,IAAI,QAAQ,IAAI,WAAW,EAAE;IACrC,YAAY,IAAI,kBAAkB,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACnE;IACA,YAAY,YAAY,GAAG,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC;AACzD;IACA,YAAY,UAAU,GAAGC,2BAAa,CAAC,gBAAgB;IACvD,gBAAgB,YAAY;IAC5B,gBAAgB,OAAO,CAAC,MAAM,GAAG,CAAC;IAClC,aAAa,CAAC;IACd,YAAY,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACpC,YAAY,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;AACzC;IACA,YAAY,IAAI,MAAM,GAAG,YAAY,GAAG,CAAC,CAAC;AAC1C;IACA,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;IAC7C,gBAAgB,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;IAChD,gBAAgB,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;IACpD,gBAAgB,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;AACpD;IACA,gBAAgB,UAAU,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAC7C,gBAAgB,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IACjD,gBAAgB,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IACjD,aAAa;AACb;IACA,YAAY,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,kBAAkB,CAAC;IACnE,YAAY,IAAI,iBAAiB,IAAI,YAAY,CAAC,MAAM,EAAE;IAC1D,gBAAgB,IAAI,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;IAC9D,gBAAgB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,YAAY;IAClE,oBAAoB,kBAAkB,CAAC,MAAM;IAC7C,iBAAiB,CAAC;IAClB,gBAAgB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC7D,aAAa;IACb,YAAY,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;IACxC,SAAS,MAAM,IAAI,WAAW,EAAE;IAChC,YAAY,YAAY,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IACjD,YAAY,UAAU,GAAGA,2BAAa,CAAC,gBAAgB;IACvD,gBAAgB,YAAY;IAC5B,gBAAgB,OAAO,CAAC,MAAM;IAC9B,aAAa,CAAC;AACd;IACA,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IACpD,gBAAgB,UAAU,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,gBAAgB,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACnD,gBAAgB,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAC/C,aAAa;AACb;IACA,YAAY,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;IACxC,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAIC,iCAAgB,CAAC;IACjD,YAAY,QAAQ,EAAE,MAAM;IAC5B,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA,IAAI,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;IACxC,IAAI,IAAI,YAAY,CAAC;IACrB,IAAI,GAAG,WAAW,CAAC;IACnB,QAAQ,YAAY,GAAGC,WAAK,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,EAAEjB,qBAAU,CAAC,MAAM,CAAC,CAAC;IAC9E,KAAK,KAAI;IACT,QAAQ,YAAY,GAAGkB,2CAAqB,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC9E,KAAK;IACL,IAAI,IAAI,WAAW,GAAG,YAAY,CAAC,sBAAsB;IACzD,QAAQ,SAAS;IACjB,QAAQ,4CAA4C;IACpD,KAAK,CAAC;AACN;IACA,IAAI,IAAI,YAAY,GAAGC,+BAAe,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;IAC1E,IAAI,IAAI,YAAY,KAAKC,4BAAY,CAAC,SAAS,EAAE;IACjD,QAAQ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC;IAChD,KAAK;AACL;IACA,IAAI,IAAI,OAAO,GAAGN,6CAAsB,CAAC,mBAAmB;IAC5D,QAAQ,SAAS;IACjB,QAAQ,SAAS;IACjB,QAAQ,WAAW;IACnB,QAAQ,iBAAiB;IACzB,QAAQ,OAAO;IACf,QAAQ,WAAW;IACnB,KAAK,CAAC;IACN,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;IACnB,QAAQ,IAAIE,iCAAgB,CAAC;IAC7B,YAAY,QAAQ,EAAE,OAAO;IAC7B,SAAS,CAAC;IACV,KAAK,CAAC;AACN;IACA,IAAI,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IAChC,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACvC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B;IACA;IACA,QAAQ,GAAG,WAAW,CAAC;IACvB,YAAY,YAAY,GAAGC,WAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAEjB,qBAAU,CAAC,MAAM,CAAC,CAAC;IAC7E,SAAS,KAAI;IACb,YAAY,YAAY,GAAGkB,2CAAqB,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC7E,SAAS;IACT,QAAQ,WAAW,GAAG,YAAY,CAAC,sBAAsB;IACzD,YAAY,IAAI;IAChB,YAAY,4CAA4C;IACxD,SAAS,CAAC;AACV;IACA,QAAQ,YAAY,GAAGC,+BAAe,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;IAC1E,QAAQ,IAAI,YAAY,KAAKC,4BAAY,CAAC,iBAAiB,EAAE;IAC7D,YAAY,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC;IAC1C,SAAS;AACT;IACA,QAAQ,OAAO,GAAGN,6CAAsB,CAAC,mBAAmB;IAC5D,YAAY,IAAI;IAChB,YAAY,SAAS;IACrB,YAAY,WAAW;IACvB,YAAY,iBAAiB;IAC7B,YAAY,OAAO;IACnB,YAAY,WAAW;IACvB,SAAS,CAAC;IACV,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI;IACvB,YAAY,IAAIE,iCAAgB,CAAC;IACjC,gBAAgB,QAAQ,EAAE,OAAO;IACjC,aAAa,CAAC;IACd,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,OAAO,IAAI,CAAC;IAChB,CAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,eAAe,CAAC,OAAO,EAAE;IAClC;IACA,IAAIK,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC5C,IAAIA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,0BAA0B,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC9E,IAAI;IACJ,QAAQd,YAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC;IAC1C,QAAQ,OAAO,CAAC,iBAAiB;IACjC,QAAQA,YAAO,CAAC,OAAO,CAAC,MAAM,CAAC;IAC/B,MAAM;IACN,QAAQ,MAAM,IAAIe,oBAAc;IAChC,YAAY,8DAA8D;IAC1E,SAAS,CAAC;IACV,KAAK;IACL,IAAI;IACJ,QAAQf,YAAO,CAAC,OAAO,CAAC,OAAO,CAAC;IAChC,QAAQ,OAAO,CAAC,OAAO,KAAKM,eAAO,CAAC,QAAQ;IAC5C,QAAQ,OAAO,CAAC,OAAO,KAAKA,eAAO,CAAC,KAAK;IACzC,MAAM;IACN,QAAQ,MAAM,IAAIS,oBAAc;IAChC,YAAY,wEAAwE;IACpF,SAAS,CAAC;IACV,KAAK;IACL;AACA;IACA,IAAI,IAAI,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;IACpD,IAAI,IAAI,YAAY,GAAGX,iBAAY,CAAC,OAAO,CAAC,YAAY,EAAEY,yBAAY,CAAC,OAAO,CAAC,CAAC;IAChF,IAAI,IAAI,SAAS,GAAGZ,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAEa,oBAAS,CAAC,KAAK,CAAC,CAAC;IACrE,IAAI,IAAI,WAAW,GAAGb,iBAAY;IAClC,QAAQ,OAAO,CAAC,WAAW;IAC3B,QAAQP,qBAAU,CAAC,kBAAkB;IACrC,KAAK,CAAC;IACN,IAAI,IAAI,UAAU,GAAGO,iBAAY,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IAC3D,IAAI,IAAI,iBAAiB,GAAGA,iBAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAC3E,IAAI,IAAI,wBAAwB;IAChC,QAAQ,iBAAiB,IAAIJ,YAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC7D,IAAI,IAAI,MAAM,GAAGI,iBAAY,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACnD,IAAI,IAAI,cAAc,GAAGA,iBAAY,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AACtE;IACA,IAAI,IAAI,CAAC,wBAAwB,EAAE;IACnC,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACjD,QAAQ,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IAC1D,QAAQ,MAAM,GAAG,CAAC,CAAC;IACnB,KAAK;AACL;IACA,IAAI,IAAI,CAAC,aAAa,GAAGY,yBAAY,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC1D,IAAI,IAAI,CAAC,UAAU,GAAGC,oBAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACjD,IAAI,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,IAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,IAAI,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,IAAI,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IAC1C,IAAI,IAAI,CAAC,SAAS,GAAGb,iBAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC1D,IAAI,IAAI,CAAC,YAAY,GAAGA,iBAAY,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAChE,IAAI,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC9C,IAAI,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAChD,IAAI,IAAI,CAAC,yBAAyB,GAAG,wBAAwB,CAAC;IAC9D,IAAI,IAAI,CAAC,aAAa,GAAGA,iBAAY,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IACnE,IAAI,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC;IAC/C,IAAI,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,eAAe,CAAC;IACpD,IAAI,IAAI,CAAC,QAAQ,GAAGA,iBAAY,CAAC,OAAO,CAAC,OAAO,EAAEE,eAAO,CAAC,QAAQ,CAAC,CAAC;AACpE;IACA,IAAI,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,IAAI,IAAI,CAAC,gCAAgC,GAAG,SAAS,CAAC;AACtD;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,YAAY;IACrB,QAAQC,6CAAsB,CAAC,4BAA4B,CAAC,gBAAgB,CAAC;IAC7E,QAAQU,oBAAS,CAAC,YAAY;IAC9B,QAAQD,yBAAY,CAAC,YAAY;IACjC,QAAQ,EAAE,CAAC;IACX,CAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,aAAa,GAAG,UAAU,OAAO,EAAE;IACnD,IAAI,OAAO,GAAGZ,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;AAC/D;IACA;IACA,IAAIU,WAAK,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;IAC1D;AACA;IACA,IAAI,IAAI,UAAU,GAAG;IACrB,QAAQ,gBAAgB,EAAE;IAC1B,YAAY,SAAS,EAAE,OAAO,CAAC,SAAS;IACxC,SAAS;IACT,QAAQ,MAAM,EAAE,OAAO,CAAC,MAAM;IAC9B,QAAQ,cAAc,EAAE,OAAO,CAAC,cAAc;IAC9C,QAAQ,YAAY,EAAE,OAAO,CAAC,YAAY;IAC1C,QAAQ,UAAU,EAAE,OAAO,CAAC,UAAU;IACtC,QAAQ,SAAS,EAAE,OAAO,CAAC,SAAS;IACpC,QAAQ,WAAW,EAAE,OAAO,CAAC,WAAW;IACxC,QAAQ,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;IACpD,QAAQ,QAAQ,EAAE,OAAO,CAAC,QAAQ;IAClC,QAAQ,WAAW,EAAE,OAAO,CAAC,WAAW;IACxC,QAAQ,eAAe,EAAE,OAAO,CAAC,eAAe;IAChD,QAAQ,OAAO,EAAE,OAAO,CAAC,OAAO;IAChC,KAAK,CAAC;IACN,IAAI,OAAO,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,gBAAgB,GAAG,SAAS,MAAM,CAAC;IACnD,IAAI,IAAI,YAAY,EAAE,WAAW,CAAC;IAClC,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC;IAClC,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC/B;IACA,IAAI,GAAG,MAAM,CAAC,aAAa,KAAK,IAAI,CAAC;IACrC;IACA,QAAQ,IAAI,GAAG,GAAG,QAAQ,CAAC;IAC3B,QAAQ,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE;IAC3B,YAAY,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,SAAS,CAAC,CAAC;IACX,QAAQ,YAAY,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;IACtC,YAAY,OAAO,IAAIrB,qBAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IACxD,SAAS,CAAC,CAAC;IACX,QAAQ,WAAW,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;IACrC,YAAY,OAAO,IAAIA,qBAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACjD,SAAS,CAAC,CAAC;IACX,KAAK,KAAI;IACT,QAAQ,YAAY,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;IACtC,YAAY,OAAO,IAAIA,qBAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACxD,SAAS,CAAC,CAAC;IACX,QAAQ,WAAW,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;IACrC,YAAY,OAAO,IAAIA,qBAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,WAAW,EAAE,GAAG,YAAY,CAAC,CAAC;IAC/C,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;IACvB,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE;IAClB,QAAQ,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,KAAK,CAAC,CAAC;IACP,IAAI,IAAI,OAAO,GAAG,EAAE,CAAC;IACrB,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC;IACvB,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG;IAClC,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B,KAAK,CAAC,CAAC;IACP,IAAI,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACzC,IAAI,IAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IACpC,IAAI,IAAI,QAAQ,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE;IACnC,QAAQ,OAAO,CAAC,CAAC,MAAM,CAAC;IACxB,KAAK,EAAC;IACN,IAAI,OAAO,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC;IAC/B,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC,EAAE;IACzB,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAClC,KAAK,CAAC,CAAC;AACP;IACA,IAAI,IAAI,cAAc,GAAGyB,6BAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC3D,IAAI,IAAI,QAAQ,GAAG,IAAIC,0BAAQ,CAAC;IAChC,QAAQ,UAAU,EAAE,IAAIC,qCAAkB,CAAC;IAC3C,YAAY,QAAQ,EAAE,IAAItB,mCAAiB,CAAC;IAC5C,gBAAgB,MAAM,EAAE,IAAI,YAAY,CAAC,SAAS,CAAC;IACnD,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,MAAM;IAC3D,aAAa,CAAC;IACd,SAAS,CAAC;IACV,QAAQ,OAAO,EAAE,IAAI,WAAW,CAAC,OAAO,CAAC;IACzC,QAAQ,aAAa,GAAGsB,2BAAa,CAAC,KAAK;IAC3C,QAAQ,cAAc,GAAG,cAAc;IACvC,KAAK,CAAC,CAAC;IACP,IAAI,OAAO,QAAQ,CAAC;IACpB,EAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,sBAAsB,GAAG,SAAS,MAAM,CAAC;AACzD;IACA,IAAI,IAAI,YAAY,EAAE,WAAW,CAAC;IAClC,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC;IAClC,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC/B;IACA,IAAI,IAAI,UAAU,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAClD,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG;IAC3B,QAAQ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9B,QAAQ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChC,KAAK,CAAC,CAAC;IACP,IAAI,IAAI,OAAO,GAAGC,sBAAM,CAAC,UAAU,CAAC,CAAC;IACrC,IAAI,GAAG,MAAM,CAAC,aAAa,KAAK,IAAI,CAAC;IACrC;IACA,QAAQ,IAAI,GAAG,GAAG,QAAQ,CAAC;IAC3B,QAAQ,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE;IAC3B,YAAY,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,SAAS,CAAC,CAAC;IACX,QAAQ,YAAY,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;IACtC,YAAY,OAAO,IAAI7B,qBAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IACxD,SAAS,CAAC,CAAC;IACX,QAAQ,WAAW,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;IACrC,YAAY,OAAO,IAAIA,qBAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACjD,SAAS,CAAC,CAAC;IACX,KAAK,KAAI;IACT,QAAQ,YAAY,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;IACtC,YAAY,OAAO,IAAIA,qBAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACxD,SAAS,CAAC,CAAC;IACX,QAAQ,WAAW,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;IACrC,YAAY,OAAO,IAAIA,qBAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA;IACA,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;IAC9B,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;AAC5C;IACA,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;AACrB;IACA;IACA,QAAQ,IAAI,MAAM,GAAG,WAAW,CAAC,OAAM;IACvC,QAAQ,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG;IACpC,YAAY,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;IAC5B,gBAAgB,EAAE,CAAC,IAAI;IACvB,oBAAoB,CAAC,EAAE,CAAC,EAAE,MAAM;IAChC,oBAAoB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM;IACvC,iBAAiB,CAAC;IAClB,aAAa,KAAI;IACjB;IACA,gBAAgB,EAAE,CAAC,IAAI;IACvB,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IACtC,oBAAoB,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM;IAC3C,iBAAiB,CAAC;IAClB,aAAa;IACb,SAAS,CAAC,CAAC;AACX;IACA;IACA,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;IACjC,QAAQ,IAAI,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;IACzC,YAAY,OAAO,CAAC,CAAC,MAAM,CAAC;IAC5B,SAAS,EAAC;IACV,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;IAChC,KAAK;IACL,IAAI,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3C,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG;IACvB,QAAQ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7B,QAAQ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/B,QAAQ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/B,KAAK,CAAC,CAAC;AACP;IACA,IAAI,IAAI,cAAc,GAAGyB,6BAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC3D;IACA,IAAIA,6BAAc,CAAC,cAAc,CAAC,cAAc,EAAE,MAAM,GAAG,CAAC,EAAEzB,qBAAU,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACjG,IAAI,IAAI,QAAQ,GAAG,IAAI0B,0BAAQ,CAAC;IAChC,QAAQ,UAAU,EAAE,IAAIC,qCAAkB,CAAC;IAC3C,YAAY,QAAQ,EAAE,IAAItB,mCAAiB,CAAC;IAC5C,gBAAgB,MAAM,EAAE,IAAI,YAAY,CAAC,SAAS,CAAC;IACnD,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,MAAM;IAC3D,aAAa,CAAC;IACd,SAAS,CAAC;IACV,QAAQ,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,CAAC;IACpC,QAAQ,aAAa,GAAGsB,2BAAa,CAAC,SAAS;IAC/C,QAAQ,cAAc,GAAG,cAAc;IACvC,KAAK,CAAC,CAAC;IACP,IAAI,OAAO,QAAQ,CAAC;IACpB,EAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IAC9D;IACA,IAAIP,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACxC,IAAIA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC;AACA;IACA,IAAI,aAAa,GAAGV,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACnD;IACA,IAAI,aAAa,GAAGG,6CAAsB,CAAC,oBAAoB;IAC/D,QAAQ,KAAK,CAAC,iBAAiB;IAC/B,QAAQ,KAAK;IACb,QAAQ,aAAa;IACrB,KAAK,CAAC;AACN;IACA,IAAIU,oBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC3D,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC;IACnC,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC;IACnC,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC;IACnC,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC;IACnC,KAAK,KAAI;IACT,QAAQ,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;IAChD,KAAK;AACL;IACA,IAAID,yBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACjE,IAAI,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;AAC/C;IACA,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;IAC3C,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,eAAe,CAAC;IACnD,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC;IAChD,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;IAC/C,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,yBAAyB,GAAG,GAAG,GAAG,GAAG,CAAC;IACzE,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,kBAAkB,GAAG,GAAG,GAAG,GAAG,CAAC;IAClE,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;IACzD,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC;IAC5D,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,aAAa,GAAG,GAAG,GAAG,GAAG,CAAC;IAC7D,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAGZ,iBAAY,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;IACtE,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC;IAC5C,IAAI,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC;AAC9C;IACA,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;AACF;IACA,IAAI,gBAAgB,GAAGa,oBAAS,CAAC,KAAK,CAACA,oBAAS,CAAC,WAAW,CAAC,CAAC;IAC9D,IAAI,mBAAmB,GAAG,IAAID,yBAAY,EAAE,CAAC;AAC7C;IACA;IACA,IAAI,YAAY,GAAG;IACnB,IAAI,gBAAgB,EAAE,EAAE;IACxB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACjE;IACA,IAAIF,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC;AACA;IACA,IAAI,aAAa,GAAGV,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACnD;IACA,IAAI,IAAI,gBAAgB,GAAGG,6CAAsB,CAAC,sBAAsB;IACxE,QAAQ,KAAK;IACb,QAAQ,aAAa;IACrB,KAAK,CAAC;IACN,IAAI,aAAa,GAAG,gBAAgB,CAAC,aAAa,CAAC;IACnD,IAAI,OAAO,gBAAgB,CAAC,aAAa,CAAC;AAC1C;IACA,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;IACrD,IAAI,IAAI,SAAS,GAAGU,oBAAS,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;IAC7E,IAAI,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;AAC5C;IACA,IAAI,IAAI,YAAY,GAAGD,yBAAY,CAAC,MAAM;IAC1C,QAAQ,KAAK;IACb,QAAQ,aAAa;IACrB,QAAQ,mBAAmB;IAC3B,KAAK,CAAC;IACN,IAAI,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;AAC/C;IACA,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACxC,IAAI,IAAI,cAAc,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAChD,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC7C,IAAI,IAAI,UAAU,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC5C,IAAI,IAAI,wBAAwB,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;IAClE,IAAI,IAAI,iBAAiB,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;IAC3D,IAAI,IAAI,QAAQ,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;IAClD,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;IACrD,IAAI,IAAI,YAAY,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;IACtD,IAAI,IAAI,eAAe,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACjD,IAAI,IAAI,OAAO,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACzC,IAAI,IAAI,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;AAC5C;IACA,IAAI,IAAI,CAAChB,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,GAAG,IAAI,eAAe,CAAC,YAAY,CAAC,CAAC;IACnD,KAAK;AACL;IACA,IAAI,MAAM,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAChD,IAAI,MAAM,CAAC,UAAU,GAAGiB,oBAAS,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;IACtE,IAAI,MAAM,CAAC,aAAa,GAAGD,yBAAY,CAAC,KAAK;IAC7C,QAAQ,YAAY;IACpB,QAAQ,MAAM,CAAC,aAAa;IAC5B,KAAK,CAAC;IACN,IAAI,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;IAC5B,IAAI,MAAM,CAAC,eAAe,GAAG,cAAc,CAAC;IAC5C,IAAI,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;IACtC,IAAI,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;IACpC,IAAI,MAAM,CAAC,yBAAyB,GAAG,wBAAwB,CAAC;IAChE,IAAI,MAAM,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAClD,IAAI,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;IAChC,IAAI,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;IACtC,IAAI,MAAM,CAAC,aAAa,GAAG,YAAY,CAAC;IACxC,IAAI,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;IACtC,IAAI,MAAM,CAAC,gBAAgB;IAC3B,QAAQ,eAAe,KAAK,CAAC,CAAC,GAAG,SAAS,GAAG,eAAe,CAAC;IAC7D,IAAI,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC9B,IAAI,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;IACvC,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,gBAAgB,GAAG,UAAU,OAAO,EAAE,MAAM,EAAE;IAC9D;IACA,IAAIF,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC5C,IAAIA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,0BAA0B,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC9E;AACA;IACA,IAAI,IAAI,WAAW,GAAGV,iBAAY;IAClC,QAAQ,OAAO,CAAC,WAAW;IAC3B,QAAQP,qBAAU,CAAC,kBAAkB;IACrC,KAAK,CAAC;IACN,IAAI,IAAI,OAAO,GAAGO,iBAAY,CAAC,OAAO,CAAC,OAAO,EAAEE,eAAO,CAAC,QAAQ,CAAC,CAAC;IAClE;IACA,IAAI,IAAI,OAAO,KAAKA,eAAO,CAAC,QAAQ,IAAI,OAAO,KAAKA,eAAO,CAAC,KAAK,EAAE;IACnE,QAAQ,MAAM,IAAIS,oBAAc;IAChC,YAAY,wEAAwE;IACpF,SAAS,CAAC;IACV,KAAK;IACL;AACA;IACA,IAAI,IAAI,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;IACpD,IAAI,IAAI,SAAS,GAAGX,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAEa,oBAAS,CAAC,KAAK,CAAC,CAAC;AACrE;IACA,IAAI,OAAO,gBAAgB;IAC3B,QAAQ,gBAAgB,CAAC,SAAS;IAClC,QAAQ,SAAS;IACjB,QAAQ,OAAO;IACf,QAAQ,WAAW;IACnB,QAAQ,MAAM;IACd,KAAK,CAAC;IACN,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,cAAc,GAAG,UAAU,eAAe,EAAE;IAC5D,IAAI,IAAI,YAAY,GAAG,eAAe,CAAC,aAAa,CAAC;IACrD,IAAI,IAAI,SAAS,GAAG,eAAe,CAAC,UAAU,CAAC;IAC/C,IAAI,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IACnD,IAAI,IAAI,UAAU,GAAG,eAAe,CAAC,WAAW,CAAC;IACjD,IAAI,IAAI,gBAAgB,GAAG,eAAe,CAAC,iBAAiB,CAAC;IAC7D,IAAI,IAAI,iBAAiB,GAAG,eAAe,CAAC,kBAAkB,CAAC;IAC/D,IAAI,IAAI,QAAQ,GAAG,eAAe,CAAC,SAAS,CAAC;IAC7C,IAAI,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IACnD,IAAI,IAAI,OAAO,GAAG,eAAe,CAAC,QAAQ,CAAC;IAC3C,IAAI,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;AACnD;IACA,IAAI,IAAI,cAAc,GAAG,gBAAgB,CAAC,SAAS,CAAC;IACpD,IAAI,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;IACnC,QAAQ,OAAO;IACf,KAAK;AACL;IACA,IAAI,IAAI,YAAY,CAAC;IACrB,IAAI,GAAG,WAAW,CAAC;IACnB,QAAQ,YAAY,GAAGP,WAAK,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,EAAEjB,qBAAU,CAAC,MAAM,CAAC,CAAC;IACnF,KAAK,KAAI;IACT,QAAQ,YAAY,GAAGkB,2CAAqB,CAAC,UAAU;IACvD,YAAY,cAAc;IAC1B,YAAY,SAAS;IACrB,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,IAAI,OAAO,GAAGJ,6CAAsB,CAAC,qBAAqB;IAC9D,QAAQ,gBAAgB;IACxB,QAAQ,WAAW,EAAE,SAAS,GAAG,YAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC;IACvF,QAAQ,CAAC,iBAAiB;IAC1B,QAAQ,SAAS;IACjB,KAAK,CAAC;AACN;IACA,IAAI,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IACtC,IAAI,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACpC;IACA,IAAI,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;IAChC,QAAQ,OAAO;IACf,KAAK;AACL;IACA,IAAI,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC5C,IAAI,IAAI,iBAAiB,CAAC;IAC1B,IAAI,GAAG,WAAW,CAAC;IACnB,QAAQ,iBAAiB,GAAGA,6CAAsB,CAAC,iCAAiC,CAAC,cAAc,EAAE,wBAAwB,CAAC,CAAC;IAC/H,KAAK,KAAI;IACT,QAAQ,iBAAiB,GAAGA,6CAAsB,CAAC,wBAAwB;IAC3E,YAAY,YAAY,CAAC,KAAK,CAAC,MAAM;IACrC,YAAY,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC;IACjE,YAAY,cAAc;IAC1B,YAAY,UAAU;IACtB,YAAY,wBAAwB;IACpC,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,IAAI,UAAU,GAAG,EAAE,CAAC;AACxB;IACA,IAAI,IAAI,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC;IACzC,IAAI,IAAI,cAAc,GAAG,eAAe,CAAC,eAAe,CAAC;IACzD,IAAI,IAAI,OAAO;IACf,QAAQ,eAAe,CAAC,yBAAyB;IACjD,QAAQ,CAACV,qBAAU,CAAC,aAAa;IACjC,YAAY,MAAM;IAClB,YAAY,cAAc;IAC1B,YAAY,CAAC;IACb,YAAYA,qBAAU,CAAC,QAAQ;IAC/B,SAAS,CAAC;AACV;IACA,IAAI,IAAI,OAAO,GAAG;IAClB,QAAQ,iBAAiB,EAAE,iBAAiB;IAC5C,QAAQ,YAAY,EAAE,YAAY;IAClC,QAAQ,QAAQ,EAAE,SAAS;IAC3B,QAAQ,YAAY,EAAE,YAAY;IAClC,QAAQ,iBAAiB,EAAE,iBAAiB;IAC5C,QAAQ,SAAS,EAAE,SAAS;IAC5B,QAAQ,UAAU,EAAE,UAAU;IAC9B,QAAQ,MAAM,EAAE,KAAK;IACrB,QAAQ,GAAG,EAAE,IAAI;IACjB,QAAQ,IAAI,EAAE,KAAK;IACnB,QAAQ,OAAO,EAAE,KAAK;IACtB,QAAQ,OAAO,EAAE,OAAO;IACxB,QAAQ,WAAW,EAAE,WAAW;IAChC,KAAK,CAAC;AACN;IACA,IAAI,IAAI,CAAC,CAAC;AACV;IACA,IAAI,IAAI,OAAO,EAAE;IACjB,QAAQ,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;IAC/B,QAAQ,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC;IAC/B,QAAQ,OAAO,CAAC,MAAM,GAAG,WAAW,CAAC;IACrC,QAAQ,OAAO,CAAC,YAAY,GAAG,eAAe,CAAC,aAAa,CAAC;IAC7D,QAAQ,OAAO,CAAC,eAAe,GAAG,eAAe,CAAC,gBAAgB,CAAC;IACnE,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC9C,YAAY,IAAI,aAAa,GAAG,mCAAmC;IACnE,gBAAgB,SAAS;IACzB,gBAAgB,QAAQ,CAAC,CAAC,CAAC;IAC3B,gBAAgB,WAAW;IAC3B,gBAAgB,SAAS,CAAC,CAAC,CAAC;IAC5B,gBAAgB,iBAAiB;IACjC,gBAAgB,QAAQ;IACxB,gBAAgB,WAAW;IAC3B,gBAAgB,YAAY;IAC5B,gBAAgB,OAAO;IACvB,gBAAgB,WAAW;IAC3B,aAAa,CAAC;AACd;IACA,YAAY,IAAI,YAAY,CAAC;IAC7B,YAAY,IAAI,QAAQ,IAAI,WAAW,EAAE;IACzC,gBAAgB,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC;IAC1D,gBAAgB,OAAO,CAAC,QAAQ,GAAGU,6CAAsB,CAAC,6BAA6B;IACvF,oBAAoB,YAAY,CAAC,QAAQ;IACzC,oBAAoB,MAAM;IAC1B,oBAAoB,cAAc;IAClC,oBAAoB,SAAS;IAC7B,oBAAoB,iBAAiB;IACrC,oBAAoB,WAAW;IAC/B,iBAAiB,CAAC;IAClB,aAAa,MAAM,IAAI,QAAQ,EAAE;IACjC,gBAAgB,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC;IAC1D,gBAAgB,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAGK,+BAAe,CAAC,qBAAqB;IACxG,oBAAoB,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM;IACpE,oBAAoB,MAAM;IAC1B,oBAAoB,SAAS;IAC7B,oBAAoB,CAAC,iBAAiB;IACtC,oBAAoB,WAAW;IAC/B,iBAAiB,CAAC;IAClB,gBAAgB,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;IACzD,aAAa,MAAM,IAAI,WAAW,EAAE;IACpC,gBAAgB,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC;IAC1D,gBAAgB,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAGA,+BAAe,CAAC,qBAAqB;IACxG,oBAAoB,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM;IACpE,oBAAoB,cAAc;IAClC,oBAAoB,SAAS;IAC7B,oBAAoB,IAAI;IACxB,oBAAoB,WAAW;IAC/B,iBAAiB,CAAC;IAClB,gBAAgB,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;IACzD,aAAa;IACb,YAAY,IAAI,QAAQ,IAAI,WAAW,EAAE;IACzC,gBAAgB,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC;IACrC,gBAAgB,YAAY,CAAC,QAAQ,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACnE,gBAAgB,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,aAAa;AACb;IACA,YAAY,IAAI,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;IAC5C,YAAY,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;IAChC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnD,gBAAgB,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,gBAAgB,OAAO,CAAC,QAAQ,GAAGL,6CAAsB,CAAC,6BAA6B;IACvF,oBAAoB,IAAI,CAAC,QAAQ;IACjC,oBAAoB,MAAM;IAC1B,oBAAoB,cAAc;IAClC,oBAAoB,SAAS;IAC7B,oBAAoB,iBAAiB;IACrC,oBAAoB,WAAW;IAC/B,iBAAiB,CAAC;IAClB,gBAAgB,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC3D,gBAAgB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,aAAa;IACb,SAAS;IACT,KAAK,MAAM;IACX,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC9C,YAAY,IAAI,gBAAgB,GAAG,IAAIE,iCAAgB,CAAC;IACxD,gBAAgB,QAAQ,EAAEF,6CAAsB,CAAC,2BAA2B;IAC5E,oBAAoB,SAAS;IAC7B,oBAAoB,QAAQ,CAAC,CAAC,CAAC;IAC/B,oBAAoB,WAAW;IAC/B,oBAAoB,iBAAiB;IACrC,oBAAoB,YAAY;IAChC,oBAAoB,OAAO;IAC3B,oBAAoB,WAAW;IAC/B,iBAAiB;IACjB,aAAa,CAAC,CAAC;IACf,YAAY,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAGK,+BAAe,CAAC,qBAAqB;IACxG,gBAAgB,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM;IACpE,gBAAgB,MAAM;IACtB,gBAAgB,SAAS;IACzB,gBAAgB,CAAC,iBAAiB;IAClC,gBAAgB,WAAW;IAC3B,aAAa,CAAC;IACd,YAAY,OAAO,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;IACzD,YAAY,gBAAgB,CAAC,QAAQ,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;AACnE;IACA,YAAY,IAAIZ,YAAO,CAAC,eAAe,CAAC,gBAAgB,CAAC,EAAE;IAC3D,gBAAgB,IAAI,MAAM;IAC1B,oBAAoB,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;IAChF,gBAAgB,IAAI,WAAW,GAAG,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC7D,gBAAgB,IAAI,WAAW;IAC/B,oBAAoB,eAAe,CAAC,gBAAgB;IACpD,oBAAoBC,+CAAuB,CAAC,IAAI;IAChD,0BAA0B,CAAC;IAC3B,0BAA0B,CAAC,CAAC;IAC5B,gBAAgBC,iCAAS,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACpD,gBAAgB,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG,IAAIJ,mCAAiB;IACxF,oBAAoB;IACpB,wBAAwB,iBAAiB,EAAEC,mCAAiB,CAAC,aAAa;IAC1E,wBAAwB,sBAAsB,EAAE,CAAC;IACjD,wBAAwB,MAAM,EAAE,WAAW;IAC3C,qBAAqB;IACrB,iBAAiB,CAAC;IAClB,aAAa;AACb;IACA,YAAY,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC9C,SAAS;IACT,KAAK;AACL;IACA,IAAI,IAAI,QAAQ,GAAGwB,iCAAgB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,IAAI,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,YAAY;IAC1D,QAAQ,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM;IAC3C,KAAK,CAAC;IACN,IAAI,QAAQ,CAAC,OAAO,GAAGf,2BAAa,CAAC,gBAAgB;IACrD,QAAQ,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;IACtD,QAAQ,QAAQ,CAAC,OAAO;IACxB,KAAK,CAAC;AACN;IACA,IAAI,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IACzC,IAAI,IAAI,cAAc,GAAGU,6BAAc,CAAC,YAAY;IACpD,QAAQ,UAAU,CAAC,QAAQ,CAAC,MAAM;IAClC,KAAK,CAAC;AACN;IACA,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;IAChC,QAAQ,OAAO,UAAU,CAAC,QAAQ,CAAC;IACnC,KAAK;AACL;IACA,IAAI,OAAO,IAAIC,0BAAQ,CAAC;IACxB,QAAQ,UAAU,EAAE,UAAU;IAC9B,QAAQ,OAAO,EAAE,QAAQ,CAAC,OAAO;IACjC,QAAQ,aAAa,EAAE,QAAQ,CAAC,aAAa;IAC7C,QAAQ,cAAc,EAAE,cAAc;IACtC,QAAQ,eAAe,EAAE,eAAe,CAAC,gBAAgB;IACzD,KAAK,CAAC,CAAC;IACP,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA,eAAe,CAAC,kBAAkB,GAAG;IACrC,IAAI,eAAe;IACnB,IAAI,aAAa;IACjB,IAAI,aAAa;IACjB,EAAE;IACF,IAAI,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IACnD,IAAI,IAAI,SAAS,GAAG,eAAe,CAAC,UAAU,CAAC;AAC/C;IACA,IAAI,IAAI,SAAS,GAAG,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IAC1D,IAAI,IAAI,SAAS,GAAG,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAC1D;IACA,IAAI,OAAO,IAAI,eAAe,CAAC;IAC/B,QAAQ,gBAAgB,EAAE,eAAe,CAAC,iBAAiB;IAC3D,QAAQ,SAAS,EAAE,SAAS;IAC5B,QAAQ,UAAU,EAAE,eAAe,CAAC,WAAW;IAC/C,QAAQ,WAAW,EAAE,WAAW;IAChC,QAAQ,iBAAiB,EAAE,KAAK;IAChC,QAAQ,cAAc,EAAE,SAAS;IACjC,QAAQ,MAAM,EAAE,SAAS;IACzB,QAAQ,YAAY,EAAEH,yBAAY,CAAC,aAAa;IAChD,QAAQ,YAAY,EAAE,IAAI;IAC1B,QAAQ,OAAO,EAAE,eAAe,CAAC,QAAQ;IACzC,KAAK,CAAC,CAAC;IACP,CAAC,CAAC;AACF;IACA,SAAS,+BAA+B,CAAC,eAAe,EAAE;IAC1D,IAAI,IAAI,UAAU,GAAG,CAAC,eAAe,CAAC,WAAW,CAAC;IAClD,IAAI,IAAI,UAAU,KAAK,GAAG,EAAE;IAC5B,QAAQ,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAClC,KAAK;IACL,IAAI,IAAI,SAAS,GAAG,eAAe,CAAC,UAAU,CAAC;IAC/C,IAAI,IAAI,SAAS,GAAG,eAAe,CAAC,iBAAiB,CAAC,SAAS,CAAC;IAChE,IAAI,IAAI,iBAAiB,GAAG,eAAe,CAAC,SAAS,CAAC;IACtD,IAAI,OAAOG,0BAAQ,CAAC,gCAAgC;IACpD,QAAQ,SAAS;IACjB,QAAQ,UAAU;IAClB,QAAQ,SAAS;IACjB,QAAQ,iBAAiB;IACzB,KAAK,CAAC;IACN,CAAC;AACD;IACA,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,SAAS,EAAE;IACnD;IACA;IACA;IACA,IAAI,SAAS,EAAE;IACf,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAY,IAAI,CAACnB,YAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;IAC3C,gBAAgB,IAAI,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;IACjE,gBAAgB,IAAI,CAAC,UAAU,GAAG,gBAAgB;IAClD,oBAAoB,SAAS;IAC7B,oBAAoB,IAAI,CAAC,UAAU;IACnC,oBAAoB,IAAI,CAAC,QAAQ;IACjC,oBAAoB,IAAI,CAAC,YAAY;IACrC,iBAAiB,CAAC;IAClB,aAAa;AACb;IACA,YAAY,OAAO,IAAI,CAAC,UAAU,CAAC;IACnC,SAAS;IACT,KAAK;IACL;IACA;IACA;IACA;IACA,IAAI,+BAA+B,EAAE;IACrC,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAY,IAAI,CAACA,YAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,EAAE;IACjE,gBAAgB,IAAI,CAAC,gCAAgC,GAAG,+BAA+B;IACvF,oBAAoB,IAAI;IACxB,iBAAiB,CAAC;IAClB,aAAa;IACb,YAAY,OAAO,IAAI,CAAC,gCAAgC,CAAC;IACzD,SAAS;IACT,KAAK;IACL,CAAC,CAAC;;ICrmDE,SAAS,qBAAqB,CAAC,eAAe,EAAE,MAAM,EAAE;IAC5D,QAAQ,IAAIA,YAAO,CAAC,MAAM,CAAC,EAAE;IAC7B,YAAY,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IAC9E,SAAS;IACT,QAAQ,eAAe,CAAC,UAAU,GAAGiB,oBAAS,CAAC,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IACjF,QAAQ,OAAO,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;IAC/D,KAAK;;;;;;;;"}