{"version":3,"file":"WallGeometryLibrary-d6a61982.js","sources":["../../../../Source/Core/WallGeometryLibrary.js"],"sourcesContent":["import Cartographic from \"./Cartographic.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\n/**\n * @private\n */\nvar WallGeometryLibrary = {};\n\nfunction latLonEquals(c0, c1) {\n    return (\n        CesiumMath.equalsEpsilon(\n            c0.latitude,\n            c1.latitude,\n            CesiumMath.EPSILON14\n        ) &&\n        CesiumMath.equalsEpsilon(\n            c0.longitude,\n            c1.longitude,\n            CesiumMath.EPSILON14\n        )\n    );\n}\n\nvar scratchCartographic1 = new Cartographic();\nvar scratchCartographic2 = new Cartographic();\nfunction removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\n    var length = positions.length;\n    if (length < 2) {\n        return;\n    }\n\n    var hasBottomHeights = defined(bottomHeights);\n    var hasTopHeights = defined(topHeights);\n    var hasAllZeroHeights = true;\n\n    var cleanedPositions = new Array(length);\n    var cleanedTopHeights = new Array(length);\n    var cleanedBottomHeights = new Array(length);\n\n    var v0 = positions[0];\n    cleanedPositions[0] = v0;\n\n    var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\n    if (hasTopHeights) {\n        c0.height = topHeights[0];\n    }\n\n    hasAllZeroHeights = hasAllZeroHeights && c0.height <= 0;\n\n    cleanedTopHeights[0] = c0.height;\n\n    if (hasBottomHeights) {\n        cleanedBottomHeights[0] = bottomHeights[0];\n    } else {\n        cleanedBottomHeights[0] = 0.0;\n    }\n\n    var index = 1;\n    for (var i = 1; i < length; ++i) {\n        var v1 = positions[i];\n        var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\n        if (hasTopHeights) {\n            c1.height = topHeights[i];\n        }\n        hasAllZeroHeights = hasAllZeroHeights && c1.height <= 0;\n\n        if (!latLonEquals(c0, c1)) {\n            cleanedPositions[index] = v1; // Shallow copy!\n            cleanedTopHeights[index] = c1.height;\n\n            if (hasBottomHeights) {\n                cleanedBottomHeights[index] = bottomHeights[i];\n            } else {\n                cleanedBottomHeights[index] = 0.0;\n            }\n\n            Cartographic.clone(c1, c0);\n            ++index;\n        } else if (c0.height < c1.height) {\n            cleanedTopHeights[index - 1] = c1.height;\n        }\n    }\n\n    if (hasAllZeroHeights || index < 2) {\n        return;\n    }\n\n    cleanedPositions.length = index;\n    cleanedTopHeights.length = index;\n    cleanedBottomHeights.length = index;\n\n    return {\n        positions: cleanedPositions,\n        topHeights: cleanedTopHeights,\n        bottomHeights: cleanedBottomHeights,\n    };\n}\n\nvar positionsArrayScratch = new Array(2);\nvar heightsArrayScratch = new Array(2);\nvar generateArcOptionsScratch = {\n    positions: undefined,\n    height: undefined,\n    granularity: undefined,\n    ellipsoid: undefined,\n};\n\n/**\n * @private\n */\nWallGeometryLibrary.computePositions = function (\n    ellipsoid,\n    wallPositions,\n    maximumHeights,\n    minimumHeights,\n    granularity,\n    duplicateCorners\n) {\n    var o = removeDuplicates(\n        ellipsoid,\n        wallPositions,\n        maximumHeights,\n        minimumHeights\n    );\n\n    if (!defined(o)) {\n        return;\n    }\n\n    wallPositions = o.positions;\n    maximumHeights = o.topHeights;\n    minimumHeights = o.bottomHeights;\n\n    if (wallPositions.length >= 3) {\n        // Order positions counter-clockwise\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(\n            wallPositions,\n            ellipsoid\n        );\n        var positions2D = tangentPlane.projectPointsOntoPlane(wallPositions);\n\n        if (\n            PolygonPipeline.computeWindingOrder2D(positions2D) ===\n            WindingOrder.CLOCKWISE\n        ) {\n            wallPositions.reverse();\n            maximumHeights.reverse();\n            minimumHeights.reverse();\n        }\n    }\n\n    var length = wallPositions.length;\n    var numCorners = length - 2;\n    var topPositions;\n    var bottomPositions;\n\n    var minDistance = CesiumMath.chordLength(\n        granularity,\n        ellipsoid.maximumRadius\n    );\n\n    var generateArcOptions = generateArcOptionsScratch;\n    generateArcOptions.minDistance = minDistance;\n    generateArcOptions.ellipsoid = ellipsoid;\n\n    if (duplicateCorners) {\n        var count = 0;\n        var i;\n\n        for (i = 0; i < length - 1; i++) {\n            count +=\n                PolylinePipeline.numberOfPoints(\n                    wallPositions[i],\n                    wallPositions[i + 1],\n                    minDistance\n                ) + 1;\n        }\n\n        topPositions = new Float64Array(count * 3);\n        bottomPositions = new Float64Array(count * 3);\n\n        var generateArcPositions = positionsArrayScratch;\n        var generateArcHeights = heightsArrayScratch;\n        generateArcOptions.positions = generateArcPositions;\n        generateArcOptions.height = generateArcHeights;\n\n        var offset = 0;\n        for (i = 0; i < length - 1; i++) {\n            generateArcPositions[0] = wallPositions[i];\n            generateArcPositions[1] = wallPositions[i + 1];\n\n            generateArcHeights[0] = maximumHeights[i];\n            generateArcHeights[1] = maximumHeights[i + 1];\n\n            var pos = PolylinePipeline.generateArc(generateArcOptions);\n            topPositions.set(pos, offset);\n\n            generateArcHeights[0] = minimumHeights[i];\n            generateArcHeights[1] = minimumHeights[i + 1];\n\n            bottomPositions.set(\n                PolylinePipeline.generateArc(generateArcOptions),\n                offset\n            );\n\n            offset += pos.length;\n        }\n    } else {\n        generateArcOptions.positions = wallPositions;\n        generateArcOptions.height = maximumHeights;\n        topPositions = new Float64Array(\n            PolylinePipeline.generateArc(generateArcOptions)\n        );\n\n        generateArcOptions.height = minimumHeights;\n        bottomPositions = new Float64Array(\n            PolylinePipeline.generateArc(generateArcOptions)\n        );\n    }\n\n    return {\n        bottomPositions: bottomPositions,\n        topPositions: topPositions,\n        numCorners: numCorners,\n    };\n};\nexport default WallGeometryLibrary;\n"],"names":["CesiumMath","Cartographic","defined","EllipsoidTangentPlane","PolygonPipeline","WindingOrder","PolylinePipeline"],"mappings":"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"}