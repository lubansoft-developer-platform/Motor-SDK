{"version":3,"file":"AxisAlignedBoundingBox-5231ffa2.js","sources":["../../../../Source/Core/AxisAlignedBoundingBox.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\nimport Matrix4 from './Matrix4.js';\nimport Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Intersect from './Intersect.js';\n\n    /**\n     * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.\n     * @alias AxisAlignedBoundingBox\n     * @constructor\n     *\n     * @param {Cartesian3} [minimum=Cartesian3.ZERO] The minimum point along the x, y, and z axes.\n     * @param {Cartesian3} [maximum=Cartesian3.ZERO] The maximum point along the x, y, and z axes.\n     * @param {Cartesian3} [center] The center of the box; automatically computed if not supplied.\n     *\n     * @see BoundingSphere\n     * @see BoundingRectangle\n     */\n    function AxisAlignedBoundingBox(minimum, maximum, center) {\n        /**\n         * The minimum point defining the bounding box.\n         * @type {Cartesian3}\n         * @default {@link Cartesian3.ZERO}\n         */\n        this.minimum = Cartesian3.clone(defaultValue(minimum, Cartesian3.ZERO));\n\n        /**\n         * The maximum point defining the bounding box.\n         * @type {Cartesian3}\n         * @default {@link Cartesian3.ZERO}\n         */\n        this.maximum = Cartesian3.clone(defaultValue(maximum, Cartesian3.ZERO));\n\n        //If center was not defined, compute it.\n        if (!defined(center)) {\n            center = Cartesian3.midpoint(this.minimum, this.maximum, new Cartesian3());\n        } else {\n            center = Cartesian3.clone(center);\n        }\n\n        /**\n         * The center point of the bounding box.\n         * @type {Cartesian3}\n         */\n        this.center = center;\n    }\n\n    /**\n     * Computes an instance of an AxisAlignedBoundingBox. The box is determined by\n     * finding the points spaced the farthest apart on the x, y, and z axes.\n     *\n     * @param {Cartesian3[]} positions List of points that the bounding box will enclose.  Each point must have a <code>x</code>, <code>y</code>, and <code>z</code> properties.\n     * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n     * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n     *\n     * @example\n     * // Compute an axis aligned bounding box enclosing two points.\n     * var box = Cesium.AxisAlignedBoundingBox.fromPoints([new Cesium.Cartesian3(2, 0, 0), new Cesium.Cartesian3(-2, 0, 0)]);\n     */\n    AxisAlignedBoundingBox.fromPoints = function(positions, result) {\n        if (!defined(result)) {\n            result = new AxisAlignedBoundingBox();\n        }\n\n        if (!defined(positions) || positions.length === 0) {\n            result.minimum = Cartesian3.clone(Cartesian3.ZERO, result.minimum);\n            result.maximum = Cartesian3.clone(Cartesian3.ZERO, result.maximum);\n            result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n            return result;\n        }\n\n        var minimumX = positions[0].x;\n        var minimumY = positions[0].y;\n        var minimumZ = positions[0].z;\n\n        var maximumX = positions[0].x;\n        var maximumY = positions[0].y;\n        var maximumZ = positions[0].z;\n\n        var length = positions.length;\n        for ( var i = 1; i < length; i++) {\n            var p = positions[i];\n            var x = p.x;\n            var y = p.y;\n            var z = p.z;\n\n            minimumX = Math.min(x, minimumX);\n            maximumX = Math.max(x, maximumX);\n            minimumY = Math.min(y, minimumY);\n            maximumY = Math.max(y, maximumY);\n            minimumZ = Math.min(z, minimumZ);\n            maximumZ = Math.max(z, maximumZ);\n        }\n\n        var minimum = result.minimum;\n        minimum.x = minimumX;\n        minimum.y = minimumY;\n        minimum.z = minimumZ;\n\n        var maximum = result.maximum;\n        maximum.x = maximumX;\n        maximum.y = maximumY;\n        maximum.z = maximumZ;\n\n        result.center = Cartesian3.midpoint(minimum, maximum, result.center);\n\n        return result;\n    };\n\n    /**\n     * Duplicates a AxisAlignedBoundingBox instance.\n     *\n     * @param {AxisAlignedBoundingBox} box The bounding box to duplicate.\n     * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n     * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if none was provided. (Returns undefined if box is undefined)\n     */\n    AxisAlignedBoundingBox.clone = function(box, result) {\n        if (!defined(box)) {\n            return undefined;\n        }\n\n        if (!defined(result)) {\n            return new AxisAlignedBoundingBox(box.minimum, box.maximum, box.center);\n        }\n\n        result.minimum = Cartesian3.clone(box.minimum, result.minimum);\n        result.maximum = Cartesian3.clone(box.maximum, result.maximum);\n        result.center = Cartesian3.clone(box.center, result.center);\n        return result;\n    };\n\n    /**\n     * Compares the provided AxisAlignedBoundingBox componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {AxisAlignedBoundingBox} [left] The first AxisAlignedBoundingBox.\n     * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    AxisAlignedBoundingBox.equals = function(left, right) {\n        return (left === right) ||\n               ((defined(left)) &&\n                (defined(right)) &&\n                Cartesian3.equals(left.center, right.center) &&\n                Cartesian3.equals(left.minimum, right.minimum) &&\n                Cartesian3.equals(left.maximum, right.maximum));\n    };\n\n    var intersectScratch = new Cartesian3();\n    /**\n     * Determines which side of a plane a box is located.\n     *\n     * @param {AxisAlignedBoundingBox} box The bounding box to test.\n     * @param {Plane} plane The plane to test against.\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n     *                      intersects the plane.\n     */\n    AxisAlignedBoundingBox.intersectPlane = function(box, plane) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('box', box);\n        Check.defined('plane', plane);\n        //>>includeEnd('debug');\n\n        intersectScratch = Cartesian3.subtract(box.maximum, box.minimum, intersectScratch);\n        var h = Cartesian3.multiplyByScalar(intersectScratch, 0.5, intersectScratch); //The positive half diagonal\n        var normal = plane.normal;\n        var e = h.x * Math.abs(normal.x) + h.y * Math.abs(normal.y) + h.z * Math.abs(normal.z);\n        var s = Cartesian3.dot(box.center, normal) + plane.distance; //signed distance from center\n\n        if (s - e > 0) {\n            return Intersect.INSIDE;\n        }\n\n        if (s + e < 0) {\n            //Not in front because normals point inward\n            return Intersect.OUTSIDE;\n        }\n\n        return Intersect.INTERSECTING;\n    };\n\n    /**\n     * Duplicates this AxisAlignedBoundingBox instance.\n     *\n     * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n     * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n     */\n    AxisAlignedBoundingBox.prototype.clone = function(result) {\n        return AxisAlignedBoundingBox.clone(this, result);\n    };\n\n    /**\n     * Determines which side of a plane this box is located.\n     *\n     * @param {Plane} plane The plane to test against.\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n     *                      intersects the plane.\n     */\n    AxisAlignedBoundingBox.prototype.intersectPlane = function(plane) {\n        return AxisAlignedBoundingBox.intersectPlane(this, plane);\n    };\n\n    /**\n     * Compares this AxisAlignedBoundingBox against the provided AxisAlignedBoundingBox componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {AxisAlignedBoundingBox} [right] The right hand side AxisAlignedBoundingBox.\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n     */\n    AxisAlignedBoundingBox.prototype.equals = function(right) {\n        return AxisAlignedBoundingBox.equals(this, right);\n    };\n\n    /**\n     * transformBy\n     *\n     * @param {Matrix4} matrix input.\n     * @returns {AxisAlignedBoundingBox} self.\n     */\n    AxisAlignedBoundingBox.prototype.transformBy = function(matrix) {\n        const vertices = this.getCornerAry();\n        vertices.forEach((vertex) => {\n            Matrix4.multiplyByPoint(matrix, vertex, vertex);\n        });\n        AxisAlignedBoundingBox.fromPoints(vertices, this);\n        return this;\n    }\n\n    /**\n     * getLength\n     *\n     * @returns {Number} len\n     */\n    AxisAlignedBoundingBox.prototype.getLength = function() {\n        const l1 = (this.maximum.x - this.minimum.x) * (this.maximum.x - this.minimum.x);\n        const l2 = (this.maximum.y - this.minimum.y) * (this.maximum.y - this.minimum.y);\n        return Math.sqrt(l1 + l2);\n    }\n\n    /**\n     * get corner ary.\n     * @returns {Cartesian3[]} corner ary\n     */\n    AxisAlignedBoundingBox.prototype.getCornerAry = function() {\n        const vertices = [];\n        for (let i = 0; i < 2; ++i) {\n            for (let j = 0; j < 2; ++j) {\n                for (let k = 0; k < 2; ++k) {\n                    const x = i !== 0 ? this.maximum.x : this.minimum.x;\n                    const y = j !== 0 ? this.maximum.y : this.minimum.y;\n                    const z = k !== 0 ? this.maximum.z : this.minimum.z;\n                    const vertex = new Cartesian3(x, y, z);\n                    vertices.push(vertex);\n                }\n            }\n        }\n        return vertices;\n    }\n\n    /**\n     * addBox\n     *\n     * @param {AxisAlignedBoundingBox} box input.\n     */\n    AxisAlignedBoundingBox.prototype.addBox = function(box) {\n        const vertices = [this.minimum, this.maximum, box.minimum, box.maximum];\n        AxisAlignedBoundingBox.fromPoints(vertices, this);\n    }\n\n    /**\n     * addPt\n     *\n     * @param {Cartesian3} pt input.\n     */\n     AxisAlignedBoundingBox.prototype.addPt = function(pt) {\n        const vertices = [this.minimum, this.maximum, pt];\n        AxisAlignedBoundingBox.fromPoints(vertices, this);\n    }\n\n    /**\n     * isOverlap\n     *\n     * @param {AxisAlignedBoundingBox} box input.\n     * @returns {Boolean} isOverlap\n     */\n    AxisAlignedBoundingBox.prototype.isOverlap = function(cBox){\n        if (cBox.minimum.x - this.maximum.x > 1e-6 || this.minimum.x - cBox.maximum.x > 1e-6) {\n            return false;\n        }\n\n        if (cBox.minimum.y - this.maximum.y > 1e-6 || this.minimum.y - cBox.maximum.y > 1e-6) {\n            return false;\n        }\n\n        if (cBox.minimum.z - this.maximum.z > 1e-6 || this.minimum.z - cBox.maximum.z > 1e-6) {\n            return false;\n        }\n\n        return true;\n\t}\n\n    /**\n     *\n     * @param {Cartesian3} center\n     * @param {Number} radius\n     * @returns {AxisAlignedBoundingBox}\n     */\n    AxisAlignedBoundingBox.fromBoundingSphere = function(center, radius){\n        let minimum = new Cartesian3(center.x - radius, center.y - radius, center.z - radius);\n        let maximum = new Cartesian3(center.x + radius, center.y + radius, center.z + radius);\n        return new AxisAlignedBoundingBox(minimum, maximum);\n    }\nexport default AxisAlignedBoundingBox;\n"],"names":["Cartesian3","defaultValue","defined","Check","Intersect","Matrix4"],"mappings":"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"}