define(["exports","./when-45f3d25d","./Check-34538dad","./Cartesian3-e69091b9","./Matrix4-c65e6a1b"],(function(e,n,t,a,r){"use strict";function i(e,n){if(t.Check.typeOf.object("normal",e),!a.CesiumMath.equalsEpsilon(a.Cartesian3.magnitude(e),1,a.CesiumMath.EPSILON6))throw new t.DeveloperError("normal must be normalized.");t.Check.typeOf.number("distance",n),this.normal=a.Cartesian3.clone(e),this.distance=n}i.fromPointNormal=function(e,r,o){if(t.Check.typeOf.object("point",e),t.Check.typeOf.object("normal",r),!a.CesiumMath.equalsEpsilon(a.Cartesian3.magnitude(r),1,a.CesiumMath.EPSILON6))throw new t.DeveloperError("normal must be normalized.");var c=-a.Cartesian3.dot(r,e);return n.defined(o)?(a.Cartesian3.clone(r,o.normal),o.distance=c,o):new i(r,c)};var o=new a.Cartesian3;i.fromCartesian4=function(e,r){t.Check.typeOf.object("coefficients",e);var c=a.Cartesian3.fromCartesian4(e,o),s=e.w;if(!a.CesiumMath.equalsEpsilon(a.Cartesian3.magnitude(c),1,a.CesiumMath.EPSILON6))throw new t.DeveloperError("normal must be normalized.");return n.defined(r)?(a.Cartesian3.clone(c,r.normal),r.distance=s,r):new i(c,s)},i.getPointDistance=function(e,n){return t.Check.typeOf.object("plane",e),t.Check.typeOf.object("point",n),a.Cartesian3.dot(e.normal,n)+e.distance};var c=new a.Cartesian3;i.projectPointOntoPlane=function(e,r,o){t.Check.typeOf.object("plane",e),t.Check.typeOf.object("point",r),n.defined(o)||(o=new a.Cartesian3);var s=i.getPointDistance(e,r),l=a.Cartesian3.multiplyByScalar(e.normal,s,c);return a.Cartesian3.subtract(r,l,o)};var s=new a.Cartesian3;i.transform=function(e,n,c){return t.Check.typeOf.object("plane",e),t.Check.typeOf.object("transform",n),r.Matrix4.multiplyByPointAsVector(n,e.normal,o),a.Cartesian3.normalize(o,o),a.Cartesian3.multiplyByScalar(e.normal,-e.distance,s),r.Matrix4.multiplyByPoint(n,s,s),i.fromPointNormal(s,o,c)},i.clone=function(e,r){return t.Check.typeOf.object("plane",e),n.defined(r)?(a.Cartesian3.clone(e.normal,r.normal),r.distance=e.distance,r):new i(e.normal,e.distance)},i.equals=function(e,n){return t.Check.typeOf.object("left",e),t.Check.typeOf.object("right",n),e.distance===n.distance&&a.Cartesian3.equals(e.normal,n.normal)},i.ORIGIN_XY_PLANE=Object.freeze(new i(a.Cartesian3.UNIT_Z,0)),i.ORIGIN_YZ_PLANE=Object.freeze(new i(a.Cartesian3.UNIT_X,0)),i.ORIGIN_ZX_PLANE=Object.freeze(new i(a.Cartesian3.UNIT_Y,0)),e.Plane=i}));