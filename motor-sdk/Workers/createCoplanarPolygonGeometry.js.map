{"version":3,"file":"createCoplanarPolygonGeometry.js","sources":["../../../../Source/Core/CoplanarPolygonGeometry.js","../../../../Source/WorkersES6/createCoplanarPolygonGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nvar scratchPosition = new Cartesian3();\nvar scratchBR = new BoundingRectangle();\nvar stScratch = new Cartesian2();\nvar textureCoordinatesOrigin = new Cartesian2();\nvar scratchNormal = new Cartesian3();\nvar scratchTangent = new Cartesian3();\nvar scratchBitangent = new Cartesian3();\nvar centerScratch = new Cartesian3();\nvar axis1Scratch = new Cartesian3();\nvar axis2Scratch = new Cartesian3();\nvar quaternionScratch = new Quaternion();\nvar textureMatrixScratch = new Matrix3();\nvar tangentRotationScratch = new Matrix3();\nvar surfaceNormalScratch = new Cartesian3();\n\nfunction createGeometryFromPolygon(\n    polygon,\n    vertexFormat,\n    boundingRectangle,\n    stRotation,\n    projectPointTo2D,\n    normal,\n    tangent,\n    bitangent\n) {\n    var positions = polygon.positions;\n    var indices = PolygonPipeline.triangulate(\n        polygon.positions2D,\n        polygon.holes\n    );\n\n    /* If polygon is completely unrenderable, just use the first three vertices */\n    if (indices.length < 3) {\n        indices = [0, 1, 2];\n    }\n\n    var newIndices = IndexDatatype.createTypedArray(\n        positions.length,\n        indices.length\n    );\n    newIndices.set(indices);\n\n    var textureMatrix = textureMatrixScratch;\n    if (stRotation !== 0.0) {\n        var rotation = Quaternion.fromAxisAngle(\n            normal,\n            stRotation,\n            quaternionScratch\n        );\n        textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n        if (vertexFormat.tangent || vertexFormat.bitangent) {\n            rotation = Quaternion.fromAxisAngle(\n                normal,\n                -stRotation,\n                quaternionScratch\n            );\n            var tangentRotation = Matrix3.fromQuaternion(\n                rotation,\n                tangentRotationScratch\n            );\n\n            tangent = Cartesian3.normalize(\n                Matrix3.multiplyByVector(tangentRotation, tangent, tangent),\n                tangent\n            );\n            if (vertexFormat.bitangent) {\n                bitangent = Cartesian3.normalize(\n                    Cartesian3.cross(normal, tangent, bitangent),\n                    bitangent\n                );\n            }\n        }\n    } else {\n        textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n    }\n\n    var stOrigin = textureCoordinatesOrigin;\n    if (vertexFormat.st) {\n        stOrigin.x = boundingRectangle.x;\n        stOrigin.y = boundingRectangle.y;\n    }\n\n    var length = positions.length;\n    var size = length * 3;\n    var flatPositions = new Float64Array(size);\n    var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n    var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n    var bitangents = vertexFormat.bitangent\n        ? new Float32Array(size)\n        : undefined;\n    var textureCoordinates = vertexFormat.st\n        ? new Float32Array(length * 2)\n        : undefined;\n\n    var positionIndex = 0;\n    var normalIndex = 0;\n    var bitangentIndex = 0;\n    var tangentIndex = 0;\n    var stIndex = 0;\n\n    for (var i = 0; i < length; i++) {\n        var position = positions[i];\n        flatPositions[positionIndex++] = position.x;\n        flatPositions[positionIndex++] = position.y;\n        flatPositions[positionIndex++] = position.z;\n\n        if (vertexFormat.st) {\n            var p = Matrix3.multiplyByVector(\n                textureMatrix,\n                position,\n                scratchPosition\n            );\n            var st = projectPointTo2D(p, stScratch);\n            Cartesian2.subtract(st, stOrigin, st);\n\n            var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n            var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n            textureCoordinates[stIndex++] = stx;\n            textureCoordinates[stIndex++] = sty;\n        }\n\n        if (vertexFormat.normal) {\n            normals[normalIndex++] = normal.x;\n            normals[normalIndex++] = normal.y;\n            normals[normalIndex++] = normal.z;\n        }\n\n        if (vertexFormat.tangent) {\n            tangents[tangentIndex++] = tangent.x;\n            tangents[tangentIndex++] = tangent.y;\n            tangents[tangentIndex++] = tangent.z;\n        }\n\n        if (vertexFormat.bitangent) {\n            bitangents[bitangentIndex++] = bitangent.x;\n            bitangents[bitangentIndex++] = bitangent.y;\n            bitangents[bitangentIndex++] = bitangent.z;\n        }\n    }\n\n    var attributes = new GeometryAttributes();\n\n    if (vertexFormat.position) {\n        attributes.position = new GeometryAttribute({\n            componentDatatype: ComponentDatatype.DOUBLE,\n            componentsPerAttribute: 3,\n            values: flatPositions,\n        });\n    }\n\n    if (vertexFormat.normal) {\n        attributes.normal = new GeometryAttribute({\n            componentDatatype: ComponentDatatype.FLOAT,\n            componentsPerAttribute: 3,\n            values: normals,\n        });\n    }\n\n    if (vertexFormat.tangent) {\n        attributes.tangent = new GeometryAttribute({\n            componentDatatype: ComponentDatatype.FLOAT,\n            componentsPerAttribute: 3,\n            values: tangents,\n        });\n    }\n\n    if (vertexFormat.bitangent) {\n        attributes.bitangent = new GeometryAttribute({\n            componentDatatype: ComponentDatatype.FLOAT,\n            componentsPerAttribute: 3,\n            values: bitangents,\n        });\n    }\n\n    if (vertexFormat.st) {\n        attributes.st = new GeometryAttribute({\n            componentDatatype: ComponentDatatype.FLOAT,\n            componentsPerAttribute: 2,\n            values: textureCoordinates,\n        });\n    }\n\n    return new Geometry({\n        attributes: attributes,\n        indices: newIndices,\n        primitiveType: PrimitiveType.TRIANGLES,\n    });\n}\n\n/**\n * A description of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonGeometry\n * @constructor\n * @extends Geometry\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n *\n * @example\n * var polygon = new Cesium.CoplanarPolygonGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 1000.0,\n *      -80.0, 30.0, 1000.0,\n *      -80.0, 30.0, 0.0\n *   ])\n * });\n * var geometry = Cesium.CoplanarPolygonGeometry.createGeometry(polygon);\n *\n * @see CoplanarPolygonGeometry.createGeometry\n */\nfunction CoplanarPolygonGeometry(options) {\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n    var polygonHierarchy = options.polygonHierarchy;\n    //>>includeStart('debug', pragmas.debug);\n    Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n    //>>includeEnd('debug');\n\n    var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n    this._vertexFormat = VertexFormat.clone(vertexFormat);\n    this._polygonHierarchy = polygonHierarchy;\n    this._stRotation = defaultValue(options.stRotation, 0.0);\n    this._ellipsoid = Ellipsoid.clone(\n        defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n    );\n    this._workerName = \"createCoplanarPolygonGeometry\";\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    this.packedLength =\n        PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) +\n        VertexFormat.packedLength +\n        Ellipsoid.packedLength +\n        2;\n}\n\n/**\n * A description of a coplanar polygon from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @returns {CoplanarPolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * var polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nCoplanarPolygonGeometry.fromPositions = function (options) {\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.defined(\"options.positions\", options.positions);\n    //>>includeEnd('debug');\n\n    var newOptions = {\n        polygonHierarchy: {\n            positions: options.positions,\n        },\n        vertexFormat: options.vertexFormat,\n        stRotation: options.stRotation,\n        ellipsoid: options.ellipsoid,\n    };\n    return new CoplanarPolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.object(\"value\", value);\n    Check.defined(\"array\", array);\n    //>>includeEnd('debug');\n\n    startingIndex = defaultValue(startingIndex, 0);\n\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n        value._polygonHierarchy,\n        array,\n        startingIndex\n    );\n\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n    startingIndex += Ellipsoid.packedLength;\n\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\n    startingIndex += VertexFormat.packedLength;\n\n    array[startingIndex++] = value._stRotation;\n    array[startingIndex] = value.packedLength;\n\n    return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n    polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n */\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.defined(\"array\", array);\n    //>>includeEnd('debug');\n\n    startingIndex = defaultValue(startingIndex, 0);\n\n    var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n        array,\n        startingIndex\n    );\n    startingIndex = polygonHierarchy.startingIndex;\n    delete polygonHierarchy.startingIndex;\n\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n    startingIndex += Ellipsoid.packedLength;\n\n    var vertexFormat = VertexFormat.unpack(\n        array,\n        startingIndex,\n        scratchVertexFormat\n    );\n    startingIndex += VertexFormat.packedLength;\n\n    var stRotation = array[startingIndex++];\n    var packedLength = array[startingIndex];\n\n    if (!defined(result)) {\n        result = new CoplanarPolygonGeometry(scratchOptions);\n    }\n\n    result._polygonHierarchy = polygonHierarchy;\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n    result._vertexFormat = VertexFormat.clone(\n        vertexFormat,\n        result._vertexFormat\n    );\n    result._stRotation = stRotation;\n    result.packedLength = packedLength;\n    return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\n    var vertexFormat = polygonGeometry._vertexFormat;\n    var polygonHierarchy = polygonGeometry._polygonHierarchy;\n    var stRotation = polygonGeometry._stRotation;\n\n    var outerPositions = polygonHierarchy.positions;\n    outerPositions = arrayRemoveDuplicates(\n        outerPositions,\n        Cartesian3.equalsEpsilon,\n        true\n    );\n    if (outerPositions.length < 3) {\n        return;\n    }\n\n    var normal = scratchNormal;\n    var tangent = scratchTangent;\n    var bitangent = scratchBitangent;\n    var axis1 = axis1Scratch;\n    var axis2 = axis2Scratch;\n\n    var validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(\n        outerPositions,\n        centerScratch,\n        axis1,\n        axis2\n    );\n    if (!validGeometry) {\n        return undefined;\n    }\n\n    normal = Cartesian3.cross(axis1, axis2, normal);\n    normal = Cartesian3.normalize(normal, normal);\n\n    if (\n        !Cartesian3.equalsEpsilon(\n            centerScratch,\n            Cartesian3.ZERO,\n            CesiumMath.EPSILON6\n        )\n    ) {\n        var surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(\n            centerScratch,\n            surfaceNormalScratch\n        );\n        if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n            normal = Cartesian3.negate(normal, normal);\n            axis1 = Cartesian3.negate(axis1, axis1);\n        }\n    }\n\n    var projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(\n        centerScratch,\n        axis1,\n        axis2\n    );\n    var projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(\n        centerScratch,\n        axis1,\n        axis2\n    );\n\n    if (vertexFormat.tangent) {\n        tangent = Cartesian3.clone(axis1, tangent);\n    }\n    if (vertexFormat.bitangent) {\n        bitangent = Cartesian3.clone(axis2, bitangent);\n    }\n\n    var results = PolygonGeometryLibrary.polygonsFromHierarchy(\n        polygonHierarchy,\n        projectPoints,\n        false\n    );\n    var hierarchy = results.hierarchy;\n    var polygons = results.polygons;\n\n    if (hierarchy.length === 0) {\n        return;\n    }\n    outerPositions = hierarchy[0].outerRing;\n\n    var boundingSphere = BoundingSphere.fromPoints(outerPositions);\n    var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n        normal,\n        projectPoint,\n        outerPositions,\n        stRotation,\n        scratchBR\n    );\n\n    var geometries = [];\n    for (var i = 0; i < polygons.length; i++) {\n        var geometryInstance = new GeometryInstance({\n            geometry: createGeometryFromPolygon(\n                polygons[i],\n                vertexFormat,\n                boundingRectangle,\n                stRotation,\n                projectPoint,\n                normal,\n                tangent,\n                bitangent\n            ),\n        });\n\n        geometries.push(geometryInstance);\n    }\n\n    var geometry = GeometryPipeline.combineInstances(geometries)[0];\n    geometry.attributes.position.values = new Float64Array(\n        geometry.attributes.position.values\n    );\n    geometry.indices = IndexDatatype.createTypedArray(\n        geometry.attributes.position.values.length / 3,\n        geometry.indices\n    );\n\n    var attributes = geometry.attributes;\n    if (!vertexFormat.position) {\n        delete attributes.position;\n    }\n    return new Geometry({\n        attributes: attributes,\n        indices: geometry.indices,\n        primitiveType: geometry.primitiveType,\n        boundingSphere: boundingSphere,\n    });\n};\nexport default CoplanarPolygonGeometry;\n","import CoplanarPolygonGeometry from '../Core/CoplanarPolygonGeometry.js';\nimport defined from '../Core/defined.js';\n\n    function createCoplanarPolygonGeometry(polygonGeometry, offset) {\n        if (defined(offset)) {\n            polygonGeometry = CoplanarPolygonGeometry.unpack(polygonGeometry, offset);\n        }\n        return CoplanarPolygonGeometry.createGeometry(polygonGeometry);\n    }\nexport default createCoplanarPolygonGeometry;\n"],"names":["Cartesian3","BoundingRectangle","Cartesian2","Quaternion","Matrix3","PolygonPipeline","IndexDatatype","CesiumMath","GeometryAttributes","GeometryAttribute","ComponentDatatype","Geometry","PrimitiveType","defaultValue","Check","VertexFormat","Ellipsoid","PolygonGeometryLibrary","defined","arrayRemoveDuplicates","CoplanarPolygonGeometryLibrary","BoundingSphere","GeometryInstance","GeometryPipeline"],"mappings":"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"}