{"version":3,"file":"upsampleQuantizedTerrainMesh.js","sources":["../../Source/WorkersES6/upsampleQuantizedTerrainMesh.js"],"sourcesContent":["import AttributeCompression from '../Core/AttributeCompression.js';\r\nimport BoundingSphere from '../Core/BoundingSphere.js';\r\nimport Cartesian2 from '../Core/Cartesian2.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport EllipsoidalOccluder from '../Core/EllipsoidalOccluder.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport Intersections2D from '../Core/Intersections2D.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport TerrainEncoding from '../Core/TerrainEncoding.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\nimport EmLBDeal from '../Extension/Source/Worker/EmLBDeal.js';\r\nimport EmWrapperManager from '../Extension/Source/Worker/EmWrapperManager.js';\r\nimport Cartesian4 from '../Core/Cartesian4.js';\r\n\r\n    var maxShort = 32767;\r\n    var halfMaxShort = (maxShort / 2) | 0;\r\n\r\n    var clipScratch = [];\r\n    var clipScratch2 = [];\r\n    var verticesScratch = [];\r\n    var cartographicScratch = new Cartographic();\r\n    var cartesian3Scratch = new Cartesian3();\r\n    var uScratch = [];\r\n    var vScratch = [];\r\n    var heightScratch = [];\r\n    var indicesScratch = [];\r\n    var normalsScratch = [];\r\n    var horizonOcclusionPointScratch = new Cartesian3();\r\n    var boundingSphereScratch = new BoundingSphere();\r\n    var orientedBoundingBoxScratch = new OrientedBoundingBox();\r\n    var decodeTexCoordsScratch = new Cartesian2();\r\n    var octEncodedNormalScratch = new Cartesian3();\r\n\r\n    function clipInterpolate(triBuffer, triIndices, tests, pre, cur) {\r\n        var curIndex = triBuffer.uBuffer.length;\r\n        var ratio = 0;\r\n        var delta = tests[pre] - tests[cur];\r\n        if (Math.abs(delta) > 1e-9) {\r\n            ratio = tests[pre] / (tests[pre] - tests[cur]);\r\n        }\r\n\r\n        var preU = triBuffer.uBuffer[triIndices[pre]];\r\n        var preV = triBuffer.vBuffer[triIndices[pre]];\r\n        var preH = triBuffer.hBuffer[triIndices[pre]];\r\n        var curU = triBuffer.uBuffer[triIndices[cur]];\r\n        var curV = triBuffer.vBuffer[triIndices[cur]];\r\n        var curH = triBuffer.hBuffer[triIndices[cur]];\r\n\r\n        curU = preU + ratio*(curU - preU);\r\n        curV = preV + ratio*(curV - preV);\r\n        curH = preH + ratio*(curH - preH);\r\n\r\n        triBuffer.uBuffer.push(curU);\r\n        triBuffer.vBuffer.push(curV);\r\n        triBuffer.hBuffer.push(curH);\r\n\r\n        if (defined(triBuffer.nBuffer)) {\r\n            var preN0 = triBuffer.nBuffer[triIndices[pre]*2];\r\n            var preN1 = triBuffer.nBuffer[triIndices[pre]*2 + 1];\r\n            var curN0 = triBuffer.nBuffer[triIndices[cur]*2];\r\n            var curN1 = triBuffer.nBuffer[triIndices[cur]*2 + 1];\r\n\r\n            curN0 = preN0 + ratio*(curN0 - preN0);\r\n            curN1 = preN1 + ratio*(curN1 - preN1);\r\n\r\n            triBuffer.nBuffer.push(curN0);\r\n            triBuffer.nBuffer.push(curN1);\r\n        }\r\n\r\n        return curIndex;\r\n    }\r\n\r\n    function clipTriPolygonAgainPlane(triBuffer, triIndices, tests, firstPosIndex, numIndices) {\r\n        var iCQuantity = 0;\r\n        var iCurr = 0;\r\n        var iPrev = 0;\r\n        var iCIndex = [];\r\n        iCIndex.length = 32;\r\n\r\n        var cApNew = function() {\r\n            iCIndex[iCQuantity] = clipInterpolate(triBuffer, triIndices, tests, iPrev, iCurr);\r\n            iCQuantity++;\r\n        };\r\n\r\n        var cApOld = function() {\r\n            iCIndex[iCQuantity] = triIndices[iCurr];\r\n            iCQuantity++;\r\n        };\r\n\r\n        if (firstPosIndex > 0) {\r\n            iCurr = firstPosIndex;\r\n            iPrev = iCurr - 1;\r\n            cApNew();\r\n\r\n            while (iCurr < numIndices && tests[iCurr] >= 0.0) {\r\n                cApOld();\r\n                iCurr++;\r\n            }\r\n\r\n            if (iCurr < numIndices)\r\n            {\r\n                iPrev = iCurr - 1;\r\n            }\r\n            else\r\n            {\r\n                iCurr = 0;\r\n                iPrev = numIndices - 1;\r\n            }\r\n            cApNew();\r\n        }\r\n        else\r\n        {\r\n            iCurr = 0;\r\n            while (iCurr < numIndices && tests[iCurr] >= 0)\r\n            {\r\n                cApOld();\r\n                iCurr++;\r\n            }\r\n\r\n            iPrev = iCurr - 1;\r\n            cApNew();\r\n\r\n            while (iCurr < numIndices && tests[iCurr] < 0)\r\n            {\r\n                iCurr++;\r\n            }\r\n\r\n            if (iCurr < numIndices)\r\n            {\r\n                iPrev = iCurr - 1;\r\n                cApNew();\r\n\r\n                while (iCurr < numIndices && tests[iCurr] >= 0)\r\n                {\r\n                    cApOld();\r\n                    iCurr++;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                iCurr = 0;\r\n                iPrev = numIndices - 1;\r\n                cApNew();\r\n            }\r\n        }\r\n\r\n        numIndices = iCQuantity;\r\n        for (let index = 0; index < iCQuantity; index++) {\r\n            triIndices[index] = iCIndex[index];\r\n        }\r\n\r\n        return numIndices;\r\n    }\r\n\r\n    function clipTriPolygonPlane(cPlane, triBuffer, numIndices, triIndices) {\r\n        var iPositive = 0, iNegative = 0, iFirstPosIndex = -1;\r\n        var tests = [];\r\n        tests.length = 32;\r\n        for (let i = 0; i < numIndices; i++) {\r\n            const cU = triBuffer.uBuffer[triIndices[i]];\r\n            const cV = triBuffer.vBuffer[triIndices[i]];\r\n            const cH = triBuffer.hBuffer[triIndices[i]];\r\n\r\n            tests[i] = cU*cPlane.x + cV*cPlane.y + cH*cPlane.z + cPlane.w;\r\n            if (tests[i] > 1e-9) {\r\n                iPositive++;\r\n                if (iFirstPosIndex < 0) {\r\n                    iFirstPosIndex = i;\r\n                }\r\n            }\r\n            else if (tests[i] < -1e-9) {\r\n                iNegative++;\r\n            }\r\n        }\r\n\r\n        if (iPositive === 0 && iNegative > 0) {\r\n            numIndices = 0;\r\n            return numIndices;\r\n        }\r\n\r\n        if (iPositive >= 0 && iNegative === 0) {\r\n            return numIndices;\r\n        }\r\n\r\n        return clipTriPolygonAgainPlane(triBuffer, triIndices, tests, iFirstPosIndex, numIndices);\r\n    }\r\n\r\n    function clipTriPolygon(minU, minV, maxU, maxV, triBuffer, triIndices, numIndices) {\r\n        var cClipPlanes = [\r\n            new Cartesian4(1, 0, 0, -minU), new Cartesian4(-1, 0, 0, maxU),\r\n            new Cartesian4(0, 1, 0, -minV), new Cartesian4(0, -1, 0, maxV),\r\n        ];\r\n        for (let i = 0; i < 4; i++) {\r\n            numIndices = clipTriPolygonPlane(cClipPlanes[i], triBuffer, numIndices, triIndices);\r\n            if (numIndices < 3) {\r\n                return numIndices;\r\n            }\r\n        }\r\n\r\n        return numIndices;\r\n    }\r\n\r\n    function clipGeoBox(minU, minV, maxU, maxV, triBuffer, triIndices, triNewBuffer, triNewIndices) {\r\n        var iTriNum = triIndices.length / 3;\r\n        var cNewIndices = [];\r\n        for (let i = 0; i < iTriNum; ++i) {\r\n            let iNumIndices = 3;\r\n\r\n            let iTriIndices = [];\r\n            iTriIndices.length = 32;\r\n            iTriIndices[0] = triIndices[3 * i];\r\n            iTriIndices[1] = triIndices[3 * i + 1];\r\n            iTriIndices[2] = triIndices[3 * i + 2];\r\n\r\n            iNumIndices = clipTriPolygon(minU, minV, maxU, maxV, triBuffer, iTriIndices, iNumIndices);\r\n            if (iNumIndices >= 3) {\r\n                let iNumTriangles = iNumIndices - 2;\r\n                for (let j = 1; j <= iNumTriangles; ++j) {\r\n                    cNewIndices.push(iTriIndices[0]);\r\n                    cNewIndices.push(iTriIndices[j]);\r\n                    cNewIndices.push(iTriIndices[j + 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var cVertDel = [];\r\n        var cVertIds = [];\r\n        cVertDel.length = triBuffer.uBuffer.length;\r\n        cVertIds.length = cVertDel.length;\r\n        for (let i = 0; i < cVertDel.length; i++) {\r\n            cVertDel[i] = true;\r\n            cVertIds[i] = -1;\r\n        }\r\n        for (let i = 0; i < cNewIndices.length; i++) {\r\n            cVertDel[cNewIndices[i]] = false;\r\n        }\r\n\r\n        for (let i = 0, iNewId = 0; i < cVertDel.length; ++i) {\r\n            if (!cVertDel[i]) {\r\n                cVertIds[i] = iNewId;\r\n                iNewId++;\r\n\r\n                triNewBuffer.uBuffer.push(triBuffer.uBuffer[i]);\r\n                triNewBuffer.vBuffer.push(triBuffer.vBuffer[i]);\r\n                triNewBuffer.hBuffer.push(triBuffer.hBuffer[i]);\r\n                if (defined(triBuffer.nBuffer)) {\r\n                    triNewBuffer.nBuffer.push(triBuffer.nBuffer[i*2]);\r\n                    triNewBuffer.nBuffer.push(triBuffer.nBuffer[i*2 + 1]);\r\n                }\r\n            }\r\n        }\r\n        let iNumNewIndices = cNewIndices.length;\r\n        for (let i = 0; i < iNumNewIndices; ++i) {\r\n            triNewIndices.push(cVertIds[cNewIndices[i]]);\r\n        }\r\n    }\r\n\r\n    function createSplitVertices(parameters, transferableObjects) {\r\n        var isEastChild = parameters.isEastChild;\r\n        var isNorthChild = parameters.isNorthChild;\r\n\r\n        var minU = isEastChild ? halfMaxShort : 0;\r\n        var maxU = isEastChild ? maxShort : halfMaxShort;\r\n        var minV = isNorthChild ? halfMaxShort : 0;\r\n        var maxV = isNorthChild ? maxShort : halfMaxShort;\r\n\r\n        var uBuffer = uScratch;\r\n        var vBuffer = vScratch;\r\n        var heightBuffer = heightScratch;\r\n        var normalBuffer = normalsScratch;\r\n\r\n        uBuffer.length = 0;\r\n        vBuffer.length = 0;\r\n        heightBuffer.length = 0;\r\n        normalBuffer.length = 0;\r\n\r\n        var indices = indicesScratch;\r\n        indices.length = 0;\r\n\r\n        var parentVertices = parameters.vertices;\r\n        var parentIndices = parameters.indices;\r\n        parentIndices = parentIndices.subarray(0, parameters.indexCountWithoutSkirts);\r\n\r\n        var encoding = TerrainEncoding.clone(parameters.encoding);\r\n        var hasVertexNormals = encoding.hasVertexNormals;\r\n        var exaggeration = parameters.exaggeration;\r\n\r\n        var vertexCount = 0;\r\n        var quantizedVertexCount = parameters.vertexCountWithoutSkirts;\r\n\r\n        var parentMinimumHeight = parameters.minimumHeight;\r\n        var parentMaximumHeight = parameters.maximumHeight;\r\n\r\n        var parentUBuffer = new Array(quantizedVertexCount);\r\n        var parentVBuffer = new Array(quantizedVertexCount);\r\n        var parentHeightBuffer = new Array(quantizedVertexCount);\r\n        var parentNormalBuffer = hasVertexNormals ? new Array(quantizedVertexCount * 2) : undefined;\r\n\r\n        var threshold = 20;\r\n        var height;\r\n\r\n        var i, n;\r\n        var u, v;\r\n        for (i = 0, n = 0; i < quantizedVertexCount; ++i, n += 2) {\r\n            var texCoords = encoding.decodeTextureCoordinates(parentVertices, i, decodeTexCoordsScratch);\r\n            height  = encoding.decodeHeight(parentVertices, i) / exaggeration;\r\n\r\n            u = CesiumMath.clamp((texCoords.x * maxShort) | 0, 0, maxShort);\r\n            v = CesiumMath.clamp((texCoords.y * maxShort) | 0, 0, maxShort);\r\n            parentHeightBuffer[i] = CesiumMath.clamp((((height - parentMinimumHeight) / (parentMaximumHeight - parentMinimumHeight)) * maxShort) | 0, 0, maxShort);\r\n\r\n            if (u < threshold) {\r\n                u = 0;\r\n            }\r\n\r\n            if (v < threshold) {\r\n                v = 0;\r\n            }\r\n\r\n            if (maxShort - u < threshold) {\r\n                u = maxShort;\r\n            }\r\n\r\n            if (maxShort - v < threshold) {\r\n                v = maxShort;\r\n            }\r\n\r\n            parentUBuffer[i] = u;\r\n            parentVBuffer[i] = v;\r\n\r\n            if (hasVertexNormals) {\r\n                var encodedNormal = encoding.getOctEncodedNormal(parentVertices, i, octEncodedNormalScratch);\r\n                parentNormalBuffer[n] = encodedNormal.x;\r\n                parentNormalBuffer[n + 1] = encodedNormal.y;\r\n            }\r\n        }\r\n\r\n        var triBuffer = {\r\n            uBuffer: parentUBuffer,\r\n            vBuffer: parentVBuffer,\r\n            hBuffer: parentHeightBuffer,\r\n            nBuffer: parentNormalBuffer\r\n        }\r\n\r\n        var triNewBuffer = {\r\n            uBuffer: uBuffer,\r\n            vBuffer: vBuffer,\r\n            hBuffer: heightBuffer,\r\n            nBuffer: normalBuffer\r\n        }\r\n\r\n        clipGeoBox(minU, minV, maxU, maxV, triBuffer, parentIndices, triNewBuffer, indices);\r\n\r\n        var uOffset = isEastChild ? -maxShort : 0;\r\n        var vOffset = isNorthChild ? -maxShort : 0;\r\n\r\n        var westIndices = [];\r\n        var southIndices = [];\r\n        var eastIndices = [];\r\n        var northIndices = [];\r\n\r\n        var minimumHeight = Number.MAX_VALUE;\r\n        var maximumHeight = -minimumHeight;\r\n\r\n        var cartesianVertices = verticesScratch;\r\n        cartesianVertices.length = 0;\r\n\r\n        var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n        var rectangle = Rectangle.clone(parameters.childRectangle);\r\n\r\n        var north = rectangle.north;\r\n        var south = rectangle.south;\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var emLBDeal;\r\n        if (parameters.isPlaneMode) {\r\n            var projectionString = parameters.projectionString;\r\n            var dCenX = parameters.dCenX;\r\n            var dCenY = parameters.dCenY;\r\n            var dCenZ = parameters.dCenZ;\r\n\r\n            emLBDeal = new EmLBDeal();\r\n            var isInit = emLBDeal.init(projectionString, new Cartesian3(dCenX, dCenY, dCenZ));\r\n            if (!isInit) {\r\n                emLBDeal.destroy();\r\n                emLBDeal = undefined;\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < uBuffer.length; ++i) {\r\n            u = Math.round(uBuffer[i]);\r\n            if (u <= minU) {\r\n                westIndices.push(i);\r\n                u = 0;\r\n            } else if (u >= maxU) {\r\n                eastIndices.push(i);\r\n                u = maxShort;\r\n            } else {\r\n                u = u * 2 + uOffset;\r\n            }\r\n\r\n            uBuffer[i] = u;\r\n\r\n            v = Math.round(vBuffer[i]);\r\n            if (v <= minV) {\r\n                southIndices.push(i);\r\n                v = 0;\r\n            } else if (v >= maxV) {\r\n                northIndices.push(i);\r\n                v = maxShort;\r\n            } else {\r\n                v = v * 2 + vOffset;\r\n            }\r\n\r\n            vBuffer[i] = v;\r\n\r\n            height = CesiumMath.lerp(parentMinimumHeight, parentMaximumHeight, heightBuffer[i] / maxShort);\r\n            if (height < minimumHeight) {\r\n                minimumHeight = height;\r\n            }\r\n            if (height > maximumHeight) {\r\n                maximumHeight = height;\r\n            }\r\n\r\n            heightBuffer[i] = height;\r\n\r\n            cartographicScratch.longitude = CesiumMath.lerp(west, east, u / maxShort);\r\n            cartographicScratch.latitude = CesiumMath.lerp(south, north, v / maxShort);\r\n            cartographicScratch.height = height;\r\n\r\n            ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n\r\n            if (defined(emLBDeal)) {\r\n                emLBDeal.computeCartesianToProj(cartesian3Scratch, false, undefined, cartesian3Scratch);\r\n            }\r\n\r\n            cartesianVertices.push(cartesian3Scratch.x);\r\n            cartesianVertices.push(cartesian3Scratch.y);\r\n            cartesianVertices.push(cartesian3Scratch.z);\r\n        }\r\n\r\n        var boundingSphere = BoundingSphere.fromVertices(cartesianVertices, Cartesian3.ZERO, 3, boundingSphereScratch);\r\n        var orientedBoundingBox;\r\n        var horizonOcclusionPoint;\r\n        if (defined(emLBDeal)) {\r\n            orientedBoundingBox = OrientedBoundingBox.fromPoints(boundingSphere.getCornerAry());\r\n            horizonOcclusionPoint = new Cartesian3();\r\n        } else {\r\n            orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, ellipsoid, orientedBoundingBoxScratch);\r\n            var occluder = new EllipsoidalOccluder(ellipsoid);\r\n            horizonOcclusionPoint = occluder.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid(boundingSphere.center, cartesianVertices, 3, boundingSphere.center, minimumHeight, horizonOcclusionPointScratch);\r\n        }\r\n\r\n        var heightRange = maximumHeight - minimumHeight;\r\n\r\n        var vertices = new Uint16Array(uBuffer.length + vBuffer.length + heightBuffer.length);\r\n\r\n        for (i = 0; i < uBuffer.length; ++i) {\r\n            vertices[i] = uBuffer[i];\r\n        }\r\n\r\n        var start = uBuffer.length;\r\n\r\n        for (i = 0; i < vBuffer.length; ++i) {\r\n            vertices[start + i] = vBuffer[i];\r\n        }\r\n\r\n        start += vBuffer.length;\r\n\r\n        for (i = 0; i < heightBuffer.length; ++i) {\r\n            vertices[start + i] = maxShort * (heightBuffer[i] - minimumHeight) / heightRange;\r\n        }\r\n\r\n        var indicesTypedArray = IndexDatatype.createTypedArray(uBuffer.length, indices);\r\n\r\n        var encodedNormals;\r\n        if (hasVertexNormals) {\r\n            var normalArray = new Uint8Array(normalBuffer);\r\n            transferableObjects.push(vertices.buffer, indicesTypedArray.buffer, normalArray.buffer);\r\n            encodedNormals = normalArray.buffer;\r\n        } else {\r\n            transferableObjects.push(vertices.buffer, indicesTypedArray.buffer);\r\n        }\r\n\r\n        if (defined(emLBDeal)) {\r\n            emLBDeal.destroy();\r\n        }\r\n\r\n        return {\r\n            vertices : vertices.buffer,\r\n            encodedNormals : encodedNormals,\r\n            indices : indicesTypedArray.buffer,\r\n            minimumHeight : minimumHeight,\r\n            maximumHeight : maximumHeight,\r\n            westIndices : westIndices,\r\n            southIndices : southIndices,\r\n            eastIndices : eastIndices,\r\n            northIndices : northIndices,\r\n            boundingSphere : boundingSphere,\r\n            orientedBoundingBox : orientedBoundingBox,\r\n            horizonOcclusionPoint : horizonOcclusionPoint\r\n        };\r\n    }\r\n\r\n    function Vertex() {\r\n        this.vertexBuffer = undefined;\r\n        this.index = undefined;\r\n        this.first = undefined;\r\n        this.second = undefined;\r\n        this.ratio = undefined;\r\n    }\r\n\r\n    Vertex.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new Vertex();\r\n        }\r\n\r\n        result.uBuffer = this.uBuffer;\r\n        result.vBuffer = this.vBuffer;\r\n        result.heightBuffer = this.heightBuffer;\r\n        result.normalBuffer = this.normalBuffer;\r\n        result.index = this.index;\r\n        result.first = this.first;\r\n        result.second = this.second;\r\n        result.ratio = this.ratio;\r\n\r\n        return result;\r\n    };\r\n\r\n    Vertex.prototype.initializeIndexed = function(uBuffer, vBuffer, heightBuffer, normalBuffer, index) {\r\n        this.uBuffer = uBuffer;\r\n        this.vBuffer = vBuffer;\r\n        this.heightBuffer = heightBuffer;\r\n        this.normalBuffer = normalBuffer;\r\n        this.index = index;\r\n        this.first = undefined;\r\n        this.second = undefined;\r\n        this.ratio = undefined;\r\n    };\r\n\r\n    Vertex.prototype.initializeFromClipResult = function(clipResult, index, vertices) {\r\n        var nextIndex = index + 1;\r\n\r\n        if (clipResult[index] !== -1) {\r\n            vertices[clipResult[index]].clone(this);\r\n        } else {\r\n            this.vertexBuffer = undefined;\r\n            this.index = undefined;\r\n            this.first = vertices[clipResult[nextIndex]];\r\n            ++nextIndex;\r\n            this.second = vertices[clipResult[nextIndex]];\r\n            ++nextIndex;\r\n            this.ratio = clipResult[nextIndex];\r\n            ++nextIndex;\r\n        }\r\n\r\n        return nextIndex;\r\n    };\r\n\r\n    Vertex.prototype.getKey = function() {\r\n        if (this.isIndexed()) {\r\n            return this.index;\r\n        }\r\n        return JSON.stringify({\r\n            first : this.first.getKey(),\r\n            second : this.second.getKey(),\r\n            ratio : this.ratio\r\n        });\r\n    };\r\n\r\n    Vertex.prototype.isIndexed = function() {\r\n        return defined(this.index);\r\n    };\r\n\r\n    Vertex.prototype.getH = function() {\r\n        if (defined(this.index)) {\r\n            return this.heightBuffer[this.index];\r\n        }\r\n        return CesiumMath.lerp(this.first.getH(), this.second.getH(), this.ratio);\r\n    };\r\n\r\n    Vertex.prototype.getU = function() {\r\n        if (defined(this.index)) {\r\n            return this.uBuffer[this.index];\r\n        }\r\n        return CesiumMath.lerp(this.first.getU(), this.second.getU(), this.ratio);\r\n    };\r\n\r\n    Vertex.prototype.getV = function() {\r\n        if (defined(this.index)) {\r\n            return this.vBuffer[this.index];\r\n        }\r\n        return CesiumMath.lerp(this.first.getV(), this.second.getV(), this.ratio);\r\n    };\r\n\r\n    var encodedScratch = new Cartesian2();\r\n    // An upsampled triangle may be clipped twice before it is assigned an index\r\n    // In this case, we need a buffer to handle the recursion of getNormalX() and getNormalY().\r\n    var depth = -1;\r\n    var cartesianScratch1 = [new Cartesian3(), new Cartesian3()];\r\n    var cartesianScratch2 = [new Cartesian3(), new Cartesian3()];\r\n    function lerpOctEncodedNormal(vertex, result) {\r\n        ++depth;\r\n\r\n        var first = cartesianScratch1[depth];\r\n        var second = cartesianScratch2[depth];\r\n\r\n        first = AttributeCompression.octDecode(vertex.first.getNormalX(), vertex.first.getNormalY(), first);\r\n        second = AttributeCompression.octDecode(vertex.second.getNormalX(), vertex.second.getNormalY(), second);\r\n        cartesian3Scratch = Cartesian3.lerp(first, second, vertex.ratio, cartesian3Scratch);\r\n        Cartesian3.normalize(cartesian3Scratch, cartesian3Scratch);\r\n\r\n        AttributeCompression.octEncode(cartesian3Scratch, result);\r\n\r\n        --depth;\r\n\r\n        return result;\r\n    }\r\n\r\n    Vertex.prototype.getNormalX = function() {\r\n        if (defined(this.index)) {\r\n            return this.normalBuffer[this.index * 2];\r\n        }\r\n\r\n        encodedScratch = lerpOctEncodedNormal(this, encodedScratch);\r\n        return encodedScratch.x;\r\n    };\r\n\r\n    Vertex.prototype.getNormalY = function() {\r\n        if (defined(this.index)) {\r\n            return this.normalBuffer[this.index * 2 + 1];\r\n        }\r\n\r\n        encodedScratch = lerpOctEncodedNormal(this, encodedScratch);\r\n        return encodedScratch.y;\r\n    };\r\n\r\n    var polygonVertices = [];\r\n    polygonVertices.push(new Vertex());\r\n    polygonVertices.push(new Vertex());\r\n    polygonVertices.push(new Vertex());\r\n    polygonVertices.push(new Vertex());\r\n\r\n    function addClippedPolygon(uBuffer, vBuffer, heightBuffer, normalBuffer, indices, vertexMap, clipped, triangleVertices, hasVertexNormals) {\r\n        if (clipped.length === 0) {\r\n            return;\r\n        }\r\n\r\n        var numVertices = 0;\r\n        var clippedIndex = 0;\r\n        while (clippedIndex < clipped.length) {\r\n            clippedIndex = polygonVertices[numVertices++].initializeFromClipResult(clipped, clippedIndex, triangleVertices);\r\n        }\r\n\r\n        for (var i = 0; i < numVertices; ++i) {\r\n            var polygonVertex = polygonVertices[i];\r\n            if (!polygonVertex.isIndexed()) {\r\n                var key = polygonVertex.getKey();\r\n                if (defined(vertexMap[key])) {\r\n                    polygonVertex.newIndex = vertexMap[key];\r\n                } else {\r\n                    var newIndex = uBuffer.length;\r\n                    uBuffer.push(polygonVertex.getU());\r\n                    vBuffer.push(polygonVertex.getV());\r\n                    heightBuffer.push(polygonVertex.getH());\r\n                    if (hasVertexNormals) {\r\n                        normalBuffer.push(polygonVertex.getNormalX());\r\n                        normalBuffer.push(polygonVertex.getNormalY());\r\n                    }\r\n                    polygonVertex.newIndex = newIndex;\r\n                    vertexMap[key] = newIndex;\r\n                }\r\n            } else {\r\n                polygonVertex.newIndex = vertexMap[polygonVertex.index];\r\n                polygonVertex.uBuffer = uBuffer;\r\n                polygonVertex.vBuffer = vBuffer;\r\n                polygonVertex.heightBuffer = heightBuffer;\r\n                if (hasVertexNormals) {\r\n                    polygonVertex.normalBuffer = normalBuffer;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (numVertices === 3) {\r\n            // A triangle.\r\n            indices.push(polygonVertices[0].newIndex);\r\n            indices.push(polygonVertices[1].newIndex);\r\n            indices.push(polygonVertices[2].newIndex);\r\n        } else if (numVertices === 4) {\r\n            // A quad - two triangles.\r\n            indices.push(polygonVertices[0].newIndex);\r\n            indices.push(polygonVertices[1].newIndex);\r\n            indices.push(polygonVertices[2].newIndex);\r\n\r\n            indices.push(polygonVertices[0].newIndex);\r\n            indices.push(polygonVertices[2].newIndex);\r\n            indices.push(polygonVertices[3].newIndex);\r\n        }\r\n    }\r\n\r\n    function upsampleQuantizedTerrainMesh(event) {\r\n        var data = event.data;\r\n        var wasmConfig = data.webAssemblyConfig;\r\n        if (defined(wasmConfig)) {\r\n            EmWrapperManager.initWebAssembly(wasmConfig.wasmBinaryFileES6).then(function () {\r\n                self.onmessage = createTaskProcessorWorker(createSplitVertices);\r\n                self.postMessage(true);\r\n            });\r\n        }\r\n    }\r\n\r\nexport default upsampleQuantizedTerrainMesh;\r\n"],"names":["Cartographic","Cartesian3","BoundingSphere","OrientedBoundingBox","Cartesian2","defined","Cartesian4","TerrainEncoding","CesiumMath","Ellipsoid","Rectangle","EmLBDeal","EllipsoidalOccluder","IndexDatatype","EmWrapperManager"],"mappings":"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"}