{"version":3,"file":"decodeDraco.js","sources":["../../Source/Extension/Source/Draco/DracoType.js","../../Source/WorkersES6/decodeDraco.js"],"sourcesContent":["/**\r\n * @private\r\n */\r\nvar DracoType = {\r\n    DRACO_COMPRESSION: 0,\r\n    MATER_COMPRESSION: 1, //mater 压缩\r\n    PROJECTIVE_TRANSFORM: 2, //球面投影变换\r\n    POINT_CLOUD: 3,\r\n};\r\nexport default Object.freeze(DracoType);\r\n","import ComponentDatatype from \"../Core/ComponentDatatype.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\r\nimport RuntimeError from \"../Core/RuntimeError.js\";\r\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\r\nimport DracoType from \"../Extension/Source/Draco/DracoType.js\";\r\nimport CreatePhysicalArray from \"../Extension/Source/Worker/CreatePhysicalArray.js\";\r\nimport EmWrapperManager,{emMod} from \"../Extension/Source/Worker/EmWrapperManager.js\";\r\nimport EmLBDeal from \"../Extension/Source/Worker/EmLBDeal.js\";\r\nimport Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport Matrix4 from \"../Core/Matrix4.js\";\r\n\r\nvar draco;\r\nvar physical;\r\nvar lbSpaMgr;\r\n\r\nfunction decodeIndexArray(dracoGeometry, dracoDecoder) {\r\n    var numPoints = dracoGeometry.num_points();\r\n    var numFaces = dracoGeometry.num_faces();\r\n    var faceIndices = new draco.DracoInt32Array();\r\n    var numIndices = numFaces * 3;\r\n    var indexArray = IndexDatatype.createTypedArray(numPoints, numIndices);\r\n\r\n    var offset = 0;\r\n    for (var i = 0; i < numFaces; ++i) {\r\n        dracoDecoder.GetFaceFromMesh(dracoGeometry, i, faceIndices);\r\n\r\n        indexArray[offset + 0] = faceIndices.GetValue(0);\r\n        indexArray[offset + 1] = faceIndices.GetValue(1);\r\n        indexArray[offset + 2] = faceIndices.GetValue(2);\r\n        offset += 3;\r\n    }\r\n\r\n    draco.destroy(faceIndices);\r\n\r\n    return {\r\n        typedArray: indexArray,\r\n        numberOfIndices: numIndices,\r\n    };\r\n}\r\n\r\nfunction decodeQuantizedDracoTypedArray(\r\n    dracoGeometry,\r\n    dracoDecoder,\r\n    dracoAttribute,\r\n    quantization,\r\n    vertexArrayLength\r\n) {\r\n    var vertexArray;\r\n    var attributeData;\r\n    if (quantization.quantizationBits <= 8) {\r\n        attributeData = new draco.DracoUInt8Array();\r\n        vertexArray = new Uint8Array(vertexArrayLength);\r\n        dracoDecoder.GetAttributeUInt8ForAllPoints(\r\n            dracoGeometry,\r\n            dracoAttribute,\r\n            attributeData\r\n        );\r\n    } else {\r\n        attributeData = new draco.DracoUInt16Array();\r\n        vertexArray = new Uint16Array(vertexArrayLength);\r\n        dracoDecoder.GetAttributeUInt16ForAllPoints(\r\n            dracoGeometry,\r\n            dracoAttribute,\r\n            attributeData\r\n        );\r\n    }\r\n\r\n    for (var i = 0; i < vertexArrayLength; ++i) {\r\n        vertexArray[i] = attributeData.GetValue(i);\r\n    }\r\n\r\n    draco.destroy(attributeData);\r\n    return vertexArray;\r\n}\r\n\r\nfunction decodeDracoTypedArray(\r\n    dracoGeometry,\r\n    dracoDecoder,\r\n    dracoAttribute,\r\n    vertexArrayLength\r\n) {\r\n    var vertexArray;\r\n    var attributeData;\r\n\r\n    // Some attribute types are casted down to 32 bit since Draco only returns 32 bit values\r\n    switch (dracoAttribute.data_type()) {\r\n        case 1:\r\n        case 11: // DT_INT8 or DT_BOOL\r\n            attributeData = new draco.DracoInt8Array();\r\n            vertexArray = new Int8Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeInt8ForAllPoints(\r\n                dracoGeometry,\r\n                dracoAttribute,\r\n                attributeData\r\n            );\r\n            break;\r\n        case 2: // DT_UINT8\r\n            attributeData = new draco.DracoUInt8Array();\r\n            vertexArray = new Uint8Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt8ForAllPoints(\r\n                dracoGeometry,\r\n                dracoAttribute,\r\n                attributeData\r\n            );\r\n            break;\r\n        case 3: // DT_INT16\r\n            attributeData = new draco.DracoInt16Array();\r\n            vertexArray = new Int16Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeInt16ForAllPoints(\r\n                dracoGeometry,\r\n                dracoAttribute,\r\n                attributeData\r\n            );\r\n            break;\r\n        case 4: // DT_UINT16\r\n            attributeData = new draco.DracoUInt16Array();\r\n            vertexArray = new Uint16Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt16ForAllPoints(\r\n                dracoGeometry,\r\n                dracoAttribute,\r\n                attributeData\r\n            );\r\n            break;\r\n        case 5:\r\n        case 7: // DT_INT32 or DT_INT64\r\n            attributeData = new draco.DracoInt32Array();\r\n            vertexArray = new Int32Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeInt32ForAllPoints(\r\n                dracoGeometry,\r\n                dracoAttribute,\r\n                attributeData\r\n            );\r\n            break;\r\n        case 6:\r\n        case 8: // DT_UINT32 or DT_UINT64\r\n            attributeData = new draco.DracoUInt32Array();\r\n            vertexArray = new Uint32Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt32ForAllPoints(\r\n                dracoGeometry,\r\n                dracoAttribute,\r\n                attributeData\r\n            );\r\n            break;\r\n        case 9:\r\n        case 10: // DT_FLOAT32 or DT_FLOAT64\r\n            attributeData = new draco.DracoFloat32Array();\r\n            vertexArray = new Float32Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeFloatForAllPoints(\r\n                dracoGeometry,\r\n                dracoAttribute,\r\n                attributeData\r\n            );\r\n            break;\r\n    }\r\n\r\n    for (var i = 0; i < vertexArrayLength; ++i) {\r\n        vertexArray[i] = attributeData.GetValue(i);\r\n    }\r\n\r\n    draco.destroy(attributeData);\r\n    return vertexArray;\r\n}\r\n\r\nfunction decodeAttribute(dracoGeometry, dracoDecoder, dracoAttribute) {\r\n    var numPoints = dracoGeometry.num_points();\r\n    var numComponents = dracoAttribute.num_components();\r\n\r\n    var quantization;\r\n    var transform = new draco.AttributeQuantizationTransform();\r\n    if (transform.InitFromAttribute(dracoAttribute)) {\r\n        var minValues = new Array(numComponents);\r\n        for (var i = 0; i < numComponents; ++i) {\r\n            minValues[i] = transform.min_value(i);\r\n        }\r\n        quantization = {\r\n            quantizationBits: transform.quantization_bits(),\r\n            minValues: minValues,\r\n            range: transform.range(),\r\n            octEncoded: false,\r\n        };\r\n    }\r\n    draco.destroy(transform);\r\n\r\n    transform = new draco.AttributeOctahedronTransform();\r\n    if (transform.InitFromAttribute(dracoAttribute)) {\r\n        quantization = {\r\n            quantizationBits: transform.quantization_bits(),\r\n            octEncoded: true,\r\n        };\r\n    }\r\n    draco.destroy(transform);\r\n\r\n    var vertexArrayLength = numPoints * numComponents;\r\n    var vertexArray;\r\n    if (defined(quantization)) {\r\n        vertexArray = decodeQuantizedDracoTypedArray(\r\n            dracoGeometry,\r\n            dracoDecoder,\r\n            dracoAttribute,\r\n            quantization,\r\n            vertexArrayLength\r\n        );\r\n    } else {\r\n        vertexArray = decodeDracoTypedArray(\r\n            dracoGeometry,\r\n            dracoDecoder,\r\n            dracoAttribute,\r\n            vertexArrayLength\r\n        );\r\n    }\r\n\r\n    var componentDatatype = ComponentDatatype.fromTypedArray(vertexArray);\r\n\r\n    return {\r\n        array: vertexArray,\r\n        data: {\r\n            componentsPerAttribute: numComponents,\r\n            componentDatatype: componentDatatype,\r\n            byteOffset: dracoAttribute.byte_offset(),\r\n            byteStride:\r\n                ComponentDatatype.getSizeInBytes(componentDatatype) *\r\n                numComponents,\r\n            normalized: dracoAttribute.normalized(),\r\n            quantization: quantization,\r\n        },\r\n    };\r\n}\r\n\r\nfunction decodePointCloud(parameters) {\r\n    var dracoDecoder = new draco.Decoder();\r\n\r\n    if (parameters.dequantizeInShader) {\r\n        dracoDecoder.SkipAttributeTransform(draco.POSITION);\r\n        dracoDecoder.SkipAttributeTransform(draco.NORMAL);\r\n    }\r\n\r\n    var buffer = new draco.DecoderBuffer();\r\n    buffer.Init(parameters.buffer, parameters.buffer.length);\r\n\r\n    var geometryType = dracoDecoder.GetEncodedGeometryType(buffer);\r\n    if (geometryType !== draco.POINT_CLOUD) {\r\n        throw new RuntimeError(\"Draco geometry type must be POINT_CLOUD.\");\r\n    }\r\n\r\n    var dracoPointCloud = new draco.PointCloud();\r\n    var decodingStatus = dracoDecoder.DecodeBufferToPointCloud(\r\n        buffer,\r\n        dracoPointCloud\r\n    );\r\n    if (!decodingStatus.ok() || dracoPointCloud.ptr === 0) {\r\n        throw new RuntimeError(\r\n            \"Error decoding draco point cloud: \" + decodingStatus.error_msg()\r\n        );\r\n    }\r\n\r\n    draco.destroy(buffer);\r\n\r\n    var result = {};\r\n\r\n    var properties = parameters.properties;\r\n    for (var propertyName in properties) {\r\n        if (properties.hasOwnProperty(propertyName)) {\r\n            var attributeId = properties[propertyName];\r\n            var dracoAttribute = dracoDecoder.GetAttributeByUniqueId(\r\n                dracoPointCloud,\r\n                attributeId\r\n            );\r\n            result[propertyName] = decodeAttribute(\r\n                dracoPointCloud,\r\n                dracoDecoder,\r\n                dracoAttribute\r\n            );\r\n        }\r\n    }\r\n\r\n    draco.destroy(dracoPointCloud);\r\n    draco.destroy(dracoDecoder);\r\n\r\n    return result;\r\n}\r\n\r\nfunction decodePrimitive(parameters) {\r\n    var dracoDecoder = new draco.Decoder();\r\n\r\n    // Skip all parameter types except generic\r\n    var attributesToSkip = [\"POSITION\", \"NORMAL\", \"COLOR\", \"TEX_COORD\"];\r\n    if (parameters.dequantizeInShader) {\r\n        for (var i = 0; i < attributesToSkip.length; ++i) {\r\n            dracoDecoder.SkipAttributeTransform(draco[attributesToSkip[i]]);\r\n        }\r\n    }\r\n\r\n    var bufferView = parameters.bufferView;\r\n    var buffer = new draco.DecoderBuffer();\r\n    buffer.Init(parameters.array, bufferView.byteLength);\r\n\r\n    var geometryType = dracoDecoder.GetEncodedGeometryType(buffer);\r\n    if (geometryType !== draco.TRIANGULAR_MESH) {\r\n        throw new RuntimeError(\"Unsupported draco mesh geometry type.\");\r\n    }\r\n\r\n    var dracoGeometry = new draco.Mesh();\r\n    var decodingStatus = dracoDecoder.DecodeBufferToMesh(buffer, dracoGeometry);\r\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\r\n        throw new RuntimeError(\r\n            \"Error decoding draco mesh geometry: \" + decodingStatus.error_msg()\r\n        );\r\n    }\r\n\r\n    draco.destroy(buffer);\r\n\r\n    var attributeData = {};\r\n    var min = [\r\n        Number.POSITIVE_INFINITY,\r\n        Number.POSITIVE_INFINITY,\r\n        Number.POSITIVE_INFINITY,\r\n    ];\r\n    var max = [\r\n        Number.NEGATIVE_INFINITY,\r\n        Number.NEGATIVE_INFINITY,\r\n        Number.NEGATIVE_INFINITY,\r\n    ];\r\n\r\n    var compressedAttributes = parameters.compressedAttributes;\r\n    for (var attributeName in compressedAttributes) {\r\n        if (compressedAttributes.hasOwnProperty(attributeName)) {\r\n            var compressedAttribute = compressedAttributes[attributeName];\r\n            var dracoAttribute = dracoDecoder.GetAttributeByUniqueId(\r\n                dracoGeometry,\r\n                compressedAttribute\r\n            );\r\n            attributeData[attributeName] = decodeAttribute(\r\n                dracoGeometry,\r\n                dracoDecoder,\r\n                dracoAttribute\r\n            );\r\n            //投影变换\r\n            if (\r\n                attributeName === \"POSITION\" &&\r\n                (parameters.projected || parameters.absPlaned) &&\r\n                !parameters.isInstance\r\n            ) {\r\n                var isYUp = parameters.isYUp;\r\n                var projectionString = parameters.projectionString;\r\n                var dCenX = parameters.dCenX;\r\n                var dCenY = parameters.dCenY;\r\n                var dCenZ = parameters.dCenZ;\r\n                var emLBDeal = new EmLBDeal();\r\n                var isInit = emLBDeal.init(projectionString, new Cartesian3(dCenX, dCenY, dCenZ));\r\n                if (isInit) {\r\n                    if (defined(parameters.planishBorderInfoAry)) {\r\n                        emLBDeal.setPlanishBorderInfoAry(parameters.planishBorderInfoAry);\r\n                    }\r\n\r\n                    var typedArray = attributeData[attributeName].array;\r\n                    var matrix = parameters.matrix;\r\n\r\n                    if (parameters.projected) {\r\n                        emLBDeal.computeProjToCartesianAry(typedArray, isYUp, Matrix4.fromArray(matrix));\r\n                    } else {\r\n                        emLBDeal.computeCartesianToProjAry(typedArray, isYUp, Matrix4.fromArray(matrix));\r\n                    }\r\n\r\n                    var resultAttributeData = new Float32Array(typedArray.length);\r\n                    for (var index = 0; index < typedArray.length; ++index) {\r\n                        resultAttributeData[index] = typedArray[index];\r\n                        if (min[index % 3] > resultAttributeData[index]) {\r\n                            min[index % 3] = resultAttributeData[index];\r\n                        }\r\n                        if (max[index % 3] < resultAttributeData[index]) {\r\n                            max[index % 3] = resultAttributeData[index];\r\n                        }\r\n                    }\r\n                    attributeData[attributeName].array = resultAttributeData;\r\n                }\r\n                emLBDeal.destroy();\r\n            }\r\n        }\r\n    }\r\n    var indexArray = decodeIndexArray(dracoGeometry, dracoDecoder);\r\n\r\n    if (parameters.isNeedPhy) {\r\n        var pPtAry = defined(attributeData[\"POSITION\"]) ? attributeData[\"POSITION\"].array : undefined;\r\n        var pBatchIdAry = defined(attributeData[\"_BATCHID\"]) ? attributeData[\"_BATCHID\"].array : undefined;\r\n        var pIndexAry = indexArray.typedArray;\r\n        var pEdgeCheckAry;\r\n        var physicalArray = CreatePhysicalArray.createPhysicalArrayFromModel(\r\n            physical,\r\n            lbSpaMgr,\r\n            parameters.primitiveMode,\r\n            pPtAry,\r\n            pBatchIdAry,\r\n            pIndexAry,\r\n            pEdgeCheckAry\r\n        );\r\n        attributeData[\"_PHYSICAL\"] = {\r\n            array: physicalArray,\r\n        };\r\n    }\r\n\r\n    var result = {\r\n        indexArray: indexArray,\r\n        attributeData: attributeData,\r\n        min: min,\r\n        max: max,\r\n    };\r\n\r\n    draco.destroy(dracoGeometry);\r\n    draco.destroy(dracoDecoder);\r\n    return result;\r\n}\r\n\r\nfunction projectiveTransform(parameters, transferableObjects) {\r\n    var result = {};\r\n    if (parameters.projected) {\r\n        var isYUp = parameters.isYUp;\r\n        var projectionString = parameters.projectionString;\r\n        var dCenX = parameters.dCenX;\r\n        var dCenY = parameters.dCenY;\r\n        var dCenZ = parameters.dCenZ;\r\n        var emLBDeal = new EmLBDeal();\r\n        var isInit = emLBDeal.init(projectionString, new Cartesian3(dCenX, dCenY, dCenZ));\r\n        if (isInit) {\r\n            var typedArray = new Float32Array(parameters.array.buffer, 0);\r\n            var matrix = parameters.matrix;\r\n\r\n            emLBDeal.computeProjToCartesianAry(typedArray, isYUp, Matrix4.fromArray(matrix));\r\n\r\n            var resultAttributeData = new Float32Array(typedArray.length);\r\n            for (var index = 0; index < typedArray.length; ++index) {\r\n                resultAttributeData[index] = typedArray[index];\r\n            }\r\n            result = {\r\n                attributeData: resultAttributeData,\r\n            };\r\n\r\n            transferableObjects.push(resultAttributeData.buffer);\r\n        }\r\n        emLBDeal.destroy();\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction materAttribute(vertexArray, numComponents, bnorm) {\r\n    var componentDatatype = ComponentDatatype.fromTypedArray(vertexArray);\r\n    return {\r\n        array: vertexArray,\r\n        data: {\r\n            componentsPerAttribute: numComponents,\r\n            componentDatatype: componentDatatype,\r\n            byteOffset: 0,\r\n            byteStride:\r\n                ComponentDatatype.getSizeInBytes(componentDatatype) *\r\n                numComponents,\r\n            normalized: bnorm,\r\n            quantization: undefined,\r\n        },\r\n    };\r\n}\r\n\r\nfunction materPrimitive(parameters) {\r\n    var bufferView = parameters.bufferView;\r\n    var materdecoder = new physical.MaterPrimitiveDecoder();\r\n    if (!materdecoder.Decode(parameters.array, bufferView.byteLength)) {\r\n        physical.destroy(materdecoder);\r\n        throw new RuntimeError(\"error mater compress.\");\r\n    }\r\n\r\n    var numPoints = materdecoder.GetPtNum();\r\n    var numIndices = materdecoder.GetIndexNum();\r\n    var indexArray = IndexDatatype.createTypedArray(numPoints, numIndices);\r\n    var i = 0;\r\n    for (; i < numIndices; ++i) {\r\n        indexArray[i] = materdecoder.GetIndex(i);\r\n    }\r\n    var edgeCheck;\r\n    if (materdecoder.IsHaveEdgeCheck()) {\r\n        edgeCheck = new Int8Array(numIndices);\r\n        for (i = 0; i < numIndices; ++i) {\r\n            edgeCheck[i] = materdecoder.GetEdgeCheck(i);\r\n        }\r\n    }\r\n\r\n    var attributeData = {};\r\n    var min = [\r\n        Number.POSITIVE_INFINITY,\r\n        Number.POSITIVE_INFINITY,\r\n        Number.POSITIVE_INFINITY,\r\n    ];\r\n    var max = [\r\n        Number.NEGATIVE_INFINITY,\r\n        Number.NEGATIVE_INFINITY,\r\n        Number.NEGATIVE_INFINITY,\r\n    ];\r\n\r\n    //POSITION\r\n    var cPtAry = new Float32Array(numPoints * 3);\r\n    for (i = 0; i < numPoints; ++i) {\r\n        cPtAry[i * 3] = materdecoder.GetPtVal(i, 0);\r\n        cPtAry[i * 3 + 1] = materdecoder.GetPtVal(i, 1);\r\n        cPtAry[i * 3 + 2] = materdecoder.GetPtVal(i, 2);\r\n    }\r\n    attributeData[\"POSITION\"] = materAttribute(cPtAry, 3, false);\r\n    if (\r\n        (parameters.projected || parameters.absPlaned) &&\r\n        !parameters.isInstance\r\n    ) {\r\n        var isYUp = parameters.isYUp;\r\n        var projectionString = parameters.projectionString;\r\n        var dCenX = parameters.dCenX;\r\n        var dCenY = parameters.dCenY;\r\n        var dCenZ = parameters.dCenZ;\r\n        var emLBDeal = new EmLBDeal();\r\n        var isInit = emLBDeal.init(projectionString, new Cartesian3(dCenX, dCenY, dCenZ));\r\n        if (isInit) {\r\n            var typedArray = attributeData[\"POSITION\"].array;\r\n            var matrix = parameters.matrix;\r\n\r\n            if (parameters.projected) {\r\n                emLBDeal.computeProjToCartesianAry(typedArray, isYUp, Matrix4.fromArray(matrix));\r\n            } else {\r\n                emLBDeal.computeCartesianToProjAry(typedArray, isYUp, Matrix4.fromArray(matrix));\r\n            }\r\n\r\n            var resultAttributeData = new Float32Array(typedArray.length);\r\n            for (var index = 0; index < typedArray.length; ++index) {\r\n                resultAttributeData[index] = typedArray[index];\r\n                if (min[index % 3] > resultAttributeData[index]) {\r\n                    min[index % 3] = resultAttributeData[index];\r\n                }\r\n                if (max[index % 3] < resultAttributeData[index]) {\r\n                    max[index % 3] = resultAttributeData[index];\r\n                }\r\n            }\r\n            attributeData[\"POSITION\"].array = resultAttributeData;\r\n        }\r\n        emLBDeal.destroy();\r\n    }\r\n\r\n    //TEXCOORD_0\r\n    if (materdecoder.IsHaveUV()) {\r\n        var cUVAry = new Float32Array(numPoints * 2);\r\n        for (i = 0; i < numPoints; ++i) {\r\n            cUVAry[i * 2] = materdecoder.GetUVVal(i, 0);\r\n            cUVAry[i * 2 + 1] = materdecoder.GetUVVal(i, 1);\r\n        }\r\n        attributeData[\"TEXCOORD_0\"] = materAttribute(cUVAry, 2, false);\r\n    }\r\n\r\n    //NORMAL\r\n    if (materdecoder.IsHaveNormal()) {\r\n        var cNormAry = new Float32Array(numPoints * 3);\r\n        for (i = 0; i < numPoints; ++i) {\r\n            cNormAry[i * 3] = materdecoder.GetNormalVal(i, 0);\r\n            cNormAry[i * 3 + 1] = materdecoder.GetNormalVal(i, 1);\r\n            cNormAry[i * 3 + 2] = materdecoder.GetNormalVal(i, 2);\r\n        }\r\n        attributeData[\"NORMAL\"] = materAttribute(cNormAry, 3, true);\r\n    }\r\n\r\n    //_BATCHID\r\n    if (materdecoder.IsHaveBatchId()) {\r\n        var cBatchIdAry = new Float32Array(numPoints);\r\n        for (i = 0; i < numPoints; ++i) {\r\n            cBatchIdAry[i] = materdecoder.GetBatchId(i);\r\n        }\r\n        attributeData[\"_BATCHID\"] = materAttribute(cBatchIdAry, 1, false);\r\n    }\r\n\r\n    //_MATERIALID\r\n    if (materdecoder.IsHaveMaterialId()) {\r\n        var cMaterialIdAry = new Float32Array(numPoints);\r\n        for (i = 0; i < numPoints; ++i) {\r\n            cMaterialIdAry[i] = materdecoder.GetMaterialId(i);\r\n        }\r\n        attributeData[\"_MATERIALID\"] = materAttribute(cMaterialIdAry, 1, false);\r\n    }\r\n\r\n    //_OUTLINECOORD\r\n    if (materdecoder.IsHaveOutlineCoord()) {\r\n        var cOutlineCoordAry = new Int8Array(numPoints);\r\n        for (i = 0; i < numPoints; ++i) {\r\n            cOutlineCoordAry[i] = materdecoder.GetOutlineCoord(i);\r\n        }\r\n        attributeData[\"_OUTLINECOORD\"] = materAttribute(\r\n            cOutlineCoordAry,\r\n            1,\r\n            false\r\n        );\r\n    }\r\n\r\n    if (parameters.isNeedPhy) {\r\n        var pPtAry = defined(attributeData[\"POSITION\"]) ? attributeData[\"POSITION\"].array : undefined;\r\n        var pBatchIdAry = defined(attributeData[\"_BATCHID\"]) ? attributeData[\"_BATCHID\"].array : undefined;\r\n        var pIndexAry = indexArray;\r\n        var pEdgeCheckAry = edgeCheck;\r\n        var physicalArray = CreatePhysicalArray.createPhysicalArrayFromModel(\r\n            physical,\r\n            lbSpaMgr,\r\n            parameters.primitiveMode,\r\n            pPtAry,\r\n            pBatchIdAry,\r\n            pIndexAry,\r\n            pEdgeCheckAry\r\n        );\r\n        attributeData[\"_PHYSICAL\"] = {\r\n            array: physicalArray,\r\n        };\r\n    }\r\n\r\n    var result = {\r\n        indexArray: { typedArray: indexArray, numberOfIndices: numIndices },\r\n        attributeData: attributeData,\r\n        min: min,\r\n        max: max,\r\n    };\r\n\r\n    physical.destroy(materdecoder);\r\n    return result;\r\n}\r\n\r\nfunction decode(parameters, transferableObjects) {\r\n    if (\r\n        defined(parameters.dracoType) &&\r\n        parameters.dracoType === DracoType.PROJECTIVE_TRANSFORM\r\n    ) {\r\n        //非压缩模型，直接球面投影变换\r\n        return projectiveTransform(parameters, transferableObjects);\r\n    }\r\n    if (defined(parameters.primitive)) {\r\n        if (\r\n            defined(parameters.dracoType) &&\r\n            parameters.dracoType === DracoType.MATER_COMPRESSION\r\n        ) {\r\n            return materPrimitive(parameters);\r\n        }\r\n        return decodePrimitive(parameters);\r\n    }\r\n    return decodePointCloud(parameters);\r\n}\r\n\r\nfunction initWorker(dracoModule, wasmBinaryFileES6) {\r\n    EmWrapperManager.initWebAssembly(wasmBinaryFileES6).then(function() {\r\n        physical = emMod;\r\n        lbSpaMgr = new physical.LBSpaMgr();\r\n        draco = dracoModule;\r\n        self.onmessage = createTaskProcessorWorker(decode);\r\n        self.postMessage(true);\r\n    });\r\n}\r\n\r\nfunction decodeDraco(event) {\r\n    var data = event.data;\r\n\r\n    // Expect the first message to be to load a web assembly module\r\n    var wasmConfig = data.webAssemblyConfig;\r\n    if (defined(wasmConfig)) {\r\n        // Require and compile WebAssembly module, or use fallback if not supported\r\n        return require([wasmConfig.modulePath], function (dracoModule) {\r\n            if (defined(wasmConfig.wasmBinaryFile)) {\r\n                if (!defined(dracoModule)) {\r\n                    dracoModule = self.DracoDecoderModule;\r\n                }\r\n\r\n                dracoModule(wasmConfig).then(function (compiledModule) {\r\n                    initWorker(compiledModule, wasmConfig.wasmBinaryFileES6);\r\n                });\r\n            } else {\r\n                initWorker(dracoModule(), wasmConfig.wasmBinaryFileES6);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default decodeDraco;\r\n"],"names":["IndexDatatype","defined","ComponentDatatype","RuntimeError","EmLBDeal","Cartesian3","Matrix4","CreatePhysicalArray","DracoType","EmWrapperManager","emMod"],"mappings":"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"}