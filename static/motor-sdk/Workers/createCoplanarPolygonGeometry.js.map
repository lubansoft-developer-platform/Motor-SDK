{"version":3,"file":"createCoplanarPolygonGeometry.js","sources":["../../Source/Core/CoplanarPolygonGeometry.js","../../Source/WorkersES6/createCoplanarPolygonGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingRectangle from \"./BoundingRectangle.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryInstance from \"./GeometryInstance.js\";\r\nimport GeometryPipeline from \"./GeometryPipeline.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport Quaternion from \"./Quaternion.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nvar scratchPosition = new Cartesian3();\r\nvar scratchBR = new BoundingRectangle();\r\nvar stScratch = new Cartesian2();\r\nvar textureCoordinatesOrigin = new Cartesian2();\r\nvar scratchNormal = new Cartesian3();\r\nvar scratchTangent = new Cartesian3();\r\nvar scratchBitangent = new Cartesian3();\r\nvar centerScratch = new Cartesian3();\r\nvar axis1Scratch = new Cartesian3();\r\nvar axis2Scratch = new Cartesian3();\r\nvar quaternionScratch = new Quaternion();\r\nvar textureMatrixScratch = new Matrix3();\r\nvar tangentRotationScratch = new Matrix3();\r\nvar surfaceNormalScratch = new Cartesian3();\r\n\r\nfunction createGeometryFromPolygon(\r\n    polygon,\r\n    vertexFormat,\r\n    boundingRectangle,\r\n    stRotation,\r\n    projectPointTo2D,\r\n    normal,\r\n    tangent,\r\n    bitangent\r\n) {\r\n    var positions = polygon.positions;\r\n    var indices = PolygonPipeline.triangulate(\r\n        polygon.positions2D,\r\n        polygon.holes\r\n    );\r\n\r\n    /* If polygon is completely unrenderable, just use the first three vertices */\r\n    if (indices.length < 3) {\r\n        indices = [0, 1, 2];\r\n    }\r\n\r\n    var newIndices = IndexDatatype.createTypedArray(\r\n        positions.length,\r\n        indices.length\r\n    );\r\n    newIndices.set(indices);\r\n\r\n    var textureMatrix = textureMatrixScratch;\r\n    if (stRotation !== 0.0) {\r\n        var rotation = Quaternion.fromAxisAngle(\r\n            normal,\r\n            stRotation,\r\n            quaternionScratch\r\n        );\r\n        textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n        if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n            rotation = Quaternion.fromAxisAngle(\r\n                normal,\r\n                -stRotation,\r\n                quaternionScratch\r\n            );\r\n            var tangentRotation = Matrix3.fromQuaternion(\r\n                rotation,\r\n                tangentRotationScratch\r\n            );\r\n\r\n            tangent = Cartesian3.normalize(\r\n                Matrix3.multiplyByVector(tangentRotation, tangent, tangent),\r\n                tangent\r\n            );\r\n            if (vertexFormat.bitangent) {\r\n                bitangent = Cartesian3.normalize(\r\n                    Cartesian3.cross(normal, tangent, bitangent),\r\n                    bitangent\r\n                );\r\n            }\r\n        }\r\n    } else {\r\n        textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n    }\r\n\r\n    var stOrigin = textureCoordinatesOrigin;\r\n    if (vertexFormat.st) {\r\n        stOrigin.x = boundingRectangle.x;\r\n        stOrigin.y = boundingRectangle.y;\r\n    }\r\n\r\n    var length = positions.length;\r\n    var size = length * 3;\r\n    var flatPositions = new Float64Array(size);\r\n    var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n    var bitangents = vertexFormat.bitangent\r\n        ? new Float32Array(size)\r\n        : undefined;\r\n    var textureCoordinates = vertexFormat.st\r\n        ? new Float32Array(length * 2)\r\n        : undefined;\r\n\r\n    var positionIndex = 0;\r\n    var normalIndex = 0;\r\n    var bitangentIndex = 0;\r\n    var tangentIndex = 0;\r\n    var stIndex = 0;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n        var position = positions[i];\r\n        flatPositions[positionIndex++] = position.x;\r\n        flatPositions[positionIndex++] = position.y;\r\n        flatPositions[positionIndex++] = position.z;\r\n\r\n        if (vertexFormat.st) {\r\n            var p = Matrix3.multiplyByVector(\r\n                textureMatrix,\r\n                position,\r\n                scratchPosition\r\n            );\r\n            var st = projectPointTo2D(p, stScratch);\r\n            Cartesian2.subtract(st, stOrigin, st);\r\n\r\n            var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\r\n            var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\r\n            textureCoordinates[stIndex++] = stx;\r\n            textureCoordinates[stIndex++] = sty;\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            normals[normalIndex++] = normal.x;\r\n            normals[normalIndex++] = normal.y;\r\n            normals[normalIndex++] = normal.z;\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            tangents[tangentIndex++] = tangent.x;\r\n            tangents[tangentIndex++] = tangent.y;\r\n            tangents[tangentIndex++] = tangent.z;\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            bitangents[bitangentIndex++] = bitangent.x;\r\n            bitangents[bitangentIndex++] = bitangent.y;\r\n            bitangents[bitangentIndex++] = bitangent.z;\r\n        }\r\n    }\r\n\r\n    var attributes = new GeometryAttributes();\r\n\r\n    if (vertexFormat.position) {\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: flatPositions,\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n        attributes.normal = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: normals,\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n        attributes.tangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: tangents,\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n        attributes.bitangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: bitangents,\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n        attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: textureCoordinates,\r\n        });\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: newIndices,\r\n        primitiveType: PrimitiveType.TRIANGLES,\r\n    });\r\n}\r\n\r\n/**\r\n * A description of a polygon composed of arbitrary coplanar positions.\r\n *\r\n * @alias CoplanarPolygonGeometry\r\n * @constructor\r\n * @extends Geometry\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n *\r\n * @example\r\n * var polygon = new Cesium.CoplanarPolygonGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n *      -90.0, 30.0, 0.0,\r\n *      -90.0, 30.0, 1000.0,\r\n *      -80.0, 30.0, 1000.0,\r\n *      -80.0, 30.0, 0.0\r\n *   ])\r\n * });\r\n * var geometry = Cesium.CoplanarPolygonGeometry.createGeometry(polygon);\r\n *\r\n * @see CoplanarPolygonGeometry.createGeometry\r\n */\r\nfunction CoplanarPolygonGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var polygonHierarchy = options.polygonHierarchy;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\r\n    //>>includeEnd('debug');\r\n\r\n    var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n    this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n    this._polygonHierarchy = polygonHierarchy;\r\n    this._stRotation = defaultValue(options.stRotation, 0.0);\r\n    this._ellipsoid = Ellipsoid.clone(\r\n        defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n    );\r\n    this._workerName = \"createCoplanarPolygonGeometry\";\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength =\r\n        PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) +\r\n        VertexFormat.packedLength +\r\n        Ellipsoid.packedLength +\r\n        2;\r\n}\r\n\r\n/**\r\n * A description of a coplanar polygon from an array of positions.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @returns {CoplanarPolygonGeometry}\r\n *\r\n * @example\r\n * // create a polygon from points\r\n * var polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     -72.0, 40.0,\r\n *     -70.0, 35.0,\r\n *     -75.0, 30.0,\r\n *     -70.0, 30.0,\r\n *     -68.0, 40.0\r\n *   ])\r\n * });\r\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n *\r\n * @see PolygonGeometry#createGeometry\r\n */\r\nCoplanarPolygonGeometry.fromPositions = function (options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined(\"options.positions\", options.positions);\r\n    //>>includeEnd('debug');\r\n\r\n    var newOptions = {\r\n        polygonHierarchy: {\r\n            positions: options.positions,\r\n        },\r\n        vertexFormat: options.vertexFormat,\r\n        stRotation: options.stRotation,\r\n        ellipsoid: options.ellipsoid,\r\n    };\r\n    return new CoplanarPolygonGeometry(newOptions);\r\n};\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CoplanarPolygonGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object(\"value\", value);\r\n    Check.defined(\"array\", array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\r\n        value._polygonHierarchy,\r\n        array,\r\n        startingIndex\r\n    );\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    array[startingIndex++] = value._stRotation;\r\n    array[startingIndex] = value.packedLength;\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n    polygonHierarchy: {},\r\n};\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\r\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\r\n */\r\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined(\"array\", array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\r\n        array,\r\n        startingIndex\r\n    );\r\n    startingIndex = polygonHierarchy.startingIndex;\r\n    delete polygonHierarchy.startingIndex;\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var vertexFormat = VertexFormat.unpack(\r\n        array,\r\n        startingIndex,\r\n        scratchVertexFormat\r\n    );\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    var stRotation = array[startingIndex++];\r\n    var packedLength = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        result = new CoplanarPolygonGeometry(scratchOptions);\r\n    }\r\n\r\n    result._polygonHierarchy = polygonHierarchy;\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._vertexFormat = VertexFormat.clone(\r\n        vertexFormat,\r\n        result._vertexFormat\r\n    );\r\n    result._stRotation = stRotation;\r\n    result.packedLength = packedLength;\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\r\n    var vertexFormat = polygonGeometry._vertexFormat;\r\n    var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n    var stRotation = polygonGeometry._stRotation;\r\n\r\n    var outerPositions = polygonHierarchy.positions;\r\n    outerPositions = arrayRemoveDuplicates(\r\n        outerPositions,\r\n        Cartesian3.equalsEpsilon,\r\n        true\r\n    );\r\n    if (outerPositions.length < 3) {\r\n        return;\r\n    }\r\n\r\n    var normal = scratchNormal;\r\n    var tangent = scratchTangent;\r\n    var bitangent = scratchBitangent;\r\n    var axis1 = axis1Scratch;\r\n    var axis2 = axis2Scratch;\r\n\r\n    var validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(\r\n        outerPositions,\r\n        centerScratch,\r\n        axis1,\r\n        axis2\r\n    );\r\n    if (!validGeometry) {\r\n        return undefined;\r\n    }\r\n\r\n    normal = Cartesian3.cross(axis1, axis2, normal);\r\n    normal = Cartesian3.normalize(normal, normal);\r\n\r\n    if (\r\n        !Cartesian3.equalsEpsilon(\r\n            centerScratch,\r\n            Cartesian3.ZERO,\r\n            CesiumMath.EPSILON6\r\n        )\r\n    ) {\r\n        var surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(\r\n            centerScratch,\r\n            surfaceNormalScratch\r\n        );\r\n        if (Cartesian3.dot(normal, surfaceNormal) < 0) {\r\n            normal = Cartesian3.negate(normal, normal);\r\n            axis1 = Cartesian3.negate(axis1, axis1);\r\n        }\r\n    }\r\n\r\n    var projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(\r\n        centerScratch,\r\n        axis1,\r\n        axis2\r\n    );\r\n    var projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(\r\n        centerScratch,\r\n        axis1,\r\n        axis2\r\n    );\r\n\r\n    if (vertexFormat.tangent) {\r\n        tangent = Cartesian3.clone(axis1, tangent);\r\n    }\r\n    if (vertexFormat.bitangent) {\r\n        bitangent = Cartesian3.clone(axis2, bitangent);\r\n    }\r\n\r\n    var results = PolygonGeometryLibrary.polygonsFromHierarchy(\r\n        polygonHierarchy,\r\n        projectPoints,\r\n        false\r\n    );\r\n    var hierarchy = results.hierarchy;\r\n    var polygons = results.polygons;\r\n\r\n    if (hierarchy.length === 0) {\r\n        return;\r\n    }\r\n    outerPositions = hierarchy[0].outerRing;\r\n\r\n    var boundingSphere = BoundingSphere.fromPoints(outerPositions);\r\n    var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\r\n        normal,\r\n        projectPoint,\r\n        outerPositions,\r\n        stRotation,\r\n        scratchBR\r\n    );\r\n\r\n    var geometries = [];\r\n    for (var i = 0; i < polygons.length; i++) {\r\n        var geometryInstance = new GeometryInstance({\r\n            geometry: createGeometryFromPolygon(\r\n                polygons[i],\r\n                vertexFormat,\r\n                boundingRectangle,\r\n                stRotation,\r\n                projectPoint,\r\n                normal,\r\n                tangent,\r\n                bitangent\r\n            ),\r\n        });\r\n\r\n        geometries.push(geometryInstance);\r\n    }\r\n\r\n    var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n    geometry.attributes.position.values = new Float64Array(\r\n        geometry.attributes.position.values\r\n    );\r\n    geometry.indices = IndexDatatype.createTypedArray(\r\n        geometry.attributes.position.values.length / 3,\r\n        geometry.indices\r\n    );\r\n\r\n    var attributes = geometry.attributes;\r\n    if (!vertexFormat.position) {\r\n        delete attributes.position;\r\n    }\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: geometry.indices,\r\n        primitiveType: geometry.primitiveType,\r\n        boundingSphere: boundingSphere,\r\n    });\r\n};\r\nexport default CoplanarPolygonGeometry;\r\n","import CoplanarPolygonGeometry from '../Core/CoplanarPolygonGeometry.js';\r\nimport defined from '../Core/defined.js';\r\n\r\n    function createCoplanarPolygonGeometry(polygonGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polygonGeometry = CoplanarPolygonGeometry.unpack(polygonGeometry, offset);\r\n        }\r\n        return CoplanarPolygonGeometry.createGeometry(polygonGeometry);\r\n    }\r\nexport default createCoplanarPolygonGeometry;\r\n"],"names":["Cartesian3","BoundingRectangle","Cartesian2","Quaternion","Matrix3","PolygonPipeline","IndexDatatype","CesiumMath","GeometryAttributes","GeometryAttribute","ComponentDatatype","Geometry","PrimitiveType","defaultValue","Check","VertexFormat","Ellipsoid","PolygonGeometryLibrary","defined","arrayRemoveDuplicates","CoplanarPolygonGeometryLibrary","BoundingSphere","GeometryInstance","GeometryPipeline"],"mappings":"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"}