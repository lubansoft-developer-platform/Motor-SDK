{"version":3,"file":"createVerticesFromQuantizedTerrainMesh.js","sources":["../../Source/WorkersES6/createVerticesFromQuantizedTerrainMesh.js"],"sourcesContent":["import AttributeCompression from '../Core/AttributeCompression.js';\r\nimport AxisAlignedBoundingBox from '../Core/AxisAlignedBoundingBox.js';\r\nimport BoundingSphere from '../Core/BoundingSphere.js';\r\nimport Cartesian2 from '../Core/Cartesian2.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport EllipsoidalOccluder from '../Core/EllipsoidalOccluder.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport Matrix4 from '../Core/Matrix4.js';\r\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport TerrainEncoding from '../Core/TerrainEncoding.js';\r\nimport TerrainProvider from '../Core/TerrainProvider.js';\r\nimport Transforms from '../Core/Transforms.js';\r\nimport WebMercatorProjection from '../Core/WebMercatorProjection.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\nimport materem from '../ThirdParty/Workers/materem.js';\r\nimport CreatePhysicalArray from '../Extension/Source/Worker/CreatePhysicalArray.js';\r\nimport EmWrapperManager,{emMod} from '../Extension/Source/Worker/EmWrapperManager.js';\r\nimport EmLBDeal from '../Extension/Source/Worker/EmLBDeal.js';\r\nimport BorderInfo from '../Extension/Source/Planish/BorderInfo.js';\r\nimport defaultValue from '../Core/defaultValue.js';\r\n\r\nvar maxShort = 32767;\r\n\r\nvar cartesian3Scratch = new Cartesian3();\r\nvar scratchMinimum = new Cartesian3();\r\nvar scratchMaximum = new Cartesian3();\r\nvar cartographicScratch = new Cartographic();\r\nvar toPack = new Cartesian2();\r\nvar scratchNormal = new Cartesian3();\r\nvar scratchToENU = new Matrix4();\r\nvar scratchFromENU = new Matrix4();\r\nvar lbSpaMgr;\r\n\r\nfunction createVertices(parameters, transferableObjects) {\r\n    var quantizedVertices = parameters.quantizedVertices;\r\n    var quantizedVertexCount = quantizedVertices.length / 3;\r\n    if (quantizedVertexCount < 3) {\r\n        return {\r\n            holeAllData: true,\r\n        }\r\n    }\r\n\r\n    var octEncodedNormals = parameters.octEncodedNormals;\r\n    var edgeVertexCount = parameters.westIndices.length + parameters.eastIndices.length +\r\n                          parameters.southIndices.length + parameters.northIndices.length - 4;\r\n    var includeWebMercatorT = parameters.includeWebMercatorT;\r\n    var holeAry = parameters.holeAry;\r\n    var planishBorderInfoAry = parameters.planishBorderInfoAry;\r\n    var hasHole = defined(holeAry) && holeAry.length > 0;\r\n    var hasPlanish = defined(planishBorderInfoAry) && planishBorderInfoAry.length > 0;\r\n    var tileInfo = parameters.tileInfo;\r\n    var needDownLoad = parameters.needDownLoad;\r\n    var needPhy = parameters.isNeedPhy;\r\n\r\n    var rectangle = Rectangle.clone(parameters.rectangle);\r\n    var west = rectangle.west;\r\n    var south = rectangle.south;\r\n    var east = rectangle.east;\r\n    var north = rectangle.north;\r\n\r\n    var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n\r\n    var exaggeration = parameters.exaggeration;\r\n    var minimumHeight = parameters.minimumHeight * exaggeration;\r\n    var maximumHeight = parameters.maximumHeight * exaggeration;\r\n\r\n    var center = parameters.relativeToCenter;\r\n    var fromENU;\r\n    if (parameters.isPlaneMode) {\r\n        fromENU = Matrix4.fromTranslation(center);\r\n    } else {\r\n        fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid);\r\n    }\r\n    var toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\r\n\r\n    var southMercatorY;\r\n    var oneOverMercatorHeight;\r\n    if (includeWebMercatorT) {\r\n        southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(south);\r\n        oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(north) - southMercatorY);\r\n    }\r\n\r\n    var uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);\r\n    var vBuffer = quantizedVertices.subarray(quantizedVertexCount, 2 * quantizedVertexCount);\r\n    var heightBuffer = quantizedVertices.subarray(quantizedVertexCount * 2, 3 * quantizedVertexCount);\r\n    var hasVertexNormals = defined(octEncodedNormals);\r\n\r\n    var uvs = new Array(quantizedVertexCount);\r\n    var heights = new Array(quantizedVertexCount);\r\n    var positions = new Array(quantizedVertexCount);\r\n    var webMercatorTs = includeWebMercatorT ? new Array(quantizedVertexCount) : [];\r\n    var normals;\r\n    if (hasVertexNormals) {\r\n        normals = [...octEncodedNormals];\r\n    }\r\n    var indexes = [...parameters.indices];\r\n\r\n    var minimum = scratchMinimum;\r\n    minimum.x = Number.POSITIVE_INFINITY;\r\n    minimum.y = Number.POSITIVE_INFINITY;\r\n    minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n    var maximum = scratchMaximum;\r\n    maximum.x = Number.NEGATIVE_INFINITY;\r\n    maximum.y = Number.NEGATIVE_INFINITY;\r\n    maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n    var minLongitude = Number.POSITIVE_INFINITY;\r\n    var maxLongitude = Number.NEGATIVE_INFINITY;\r\n    var minLatitude = Number.POSITIVE_INFINITY;\r\n    var maxLatitude = Number.NEGATIVE_INFINITY;\r\n\r\n    var emLBDeal;\r\n    var isDefaultTer = false;\r\n    if (parameters.isPlaneMode) {\r\n        var projectionString = parameters.projectionString;\r\n        var dCenX = parameters.dCenX;\r\n        var dCenY = parameters.dCenY;\r\n        var dCenZ = parameters.dCenZ;\r\n\r\n        emLBDeal = new EmLBDeal();\r\n        var isInit = emLBDeal.init(projectionString, new Cartesian3(dCenX, dCenY, dCenZ));\r\n        if (!isInit) {\r\n            emLBDeal.destroy();\r\n            emLBDeal = undefined;\r\n        }\r\n        else if (hasPlanish) {\r\n            emLBDeal.setPlanishBorderInfoAry(planishBorderInfoAry);\r\n        }\r\n        isDefaultTer = parameters.isDefaultTer;\r\n    }\r\n\r\n    for (var i = 0; i < quantizedVertexCount; ++i) {\r\n        var rawU = uBuffer[i];\r\n        var rawV = vBuffer[i];\r\n\r\n        var u = rawU / maxShort;\r\n        var v = rawV / maxShort;\r\n        var height = CesiumMath.lerp(minimumHeight, maximumHeight, heightBuffer[i] / maxShort);\r\n\r\n        cartographicScratch.longitude = CesiumMath.lerp(west, east, u);\r\n        cartographicScratch.latitude = CesiumMath.lerp(south, north, v);\r\n        cartographicScratch.height = height;\r\n\r\n        minLongitude = Math.min(cartographicScratch.longitude, minLongitude);\r\n        maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);\r\n        minLatitude = Math.min(cartographicScratch.latitude, minLatitude);\r\n        maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);\r\n\r\n        var position = ellipsoid.cartographicToCartesian(cartographicScratch);\r\n\r\n        if (defined(emLBDeal)) {\r\n            position = emLBDeal.computeCartesianToProj(position);\r\n            if (isDefaultTer) {\r\n                position.z = 0;\r\n            }\r\n        }\r\n\r\n        uvs[i] = new Cartesian2(u, v);\r\n        heights[i] = height;\r\n        positions[i] = position;\r\n\r\n        if (includeWebMercatorT) {\r\n            webMercatorTs[i] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\r\n        }\r\n\r\n        Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\r\n\r\n        Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\r\n        Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\r\n    }\r\n\r\n    var westIndicesSouthToNorth = copyAndSort(parameters.westIndices, function (a, b) {\r\n        return uvs[a].y - uvs[b].y;\r\n    });\r\n    var eastIndicesNorthToSouth = copyAndSort(parameters.eastIndices, function (a, b) {\r\n        return uvs[b].y - uvs[a].y;\r\n    });\r\n    var southIndicesEastToWest = copyAndSort(parameters.southIndices, function (a, b) {\r\n        return uvs[b].x - uvs[a].x;\r\n    });\r\n    var northIndicesWestToEast = copyAndSort(parameters.northIndices, function (a, b) {\r\n        return uvs[a].x - uvs[b].x;\r\n    });\r\n\r\n    var percentage = 0.0001;\r\n    var lonOffset = (maxLongitude - minLongitude) * percentage;\r\n    var latOffset = (maxLatitude - minLatitude) * percentage;\r\n    var westLongitudeOffset = -lonOffset;\r\n    var westLatitudeOffset = 0.0;\r\n    var eastLongitudeOffset = lonOffset;\r\n    var eastLatitudeOffset = 0.0;\r\n    var northLongitudeOffset = 0.0;\r\n    var northLatitudeOffset = latOffset;\r\n    var southLongitudeOffset = 0.0;\r\n    var southLatitudeOffset = -latOffset;\r\n\r\n    // Add skirts pt\r\n    var vertexCountWithoutSkirts = positions.length;\r\n    var hMin = minimumHeight;\r\n    var indexVer0 = positions.length;\r\n    hMin = Math.min(hMin, addSkirt(westIndicesSouthToNorth, positions, heights, uvs, normals, webMercatorTs, ellipsoid, rectangle, parameters.westSkirtHeight, westLongitudeOffset, westLatitudeOffset, emLBDeal));\r\n    var indexVer1 = positions.length;\r\n    hMin = Math.min(hMin, addSkirt(southIndicesEastToWest, positions, heights, uvs, normals, webMercatorTs, ellipsoid, rectangle, parameters.southSkirtHeight, southLongitudeOffset, southLatitudeOffset, emLBDeal));\r\n    var indexVer2 = positions.length;\r\n    hMin = Math.min(hMin, addSkirt(eastIndicesNorthToSouth, positions, heights, uvs, normals, webMercatorTs, ellipsoid, rectangle, parameters.eastSkirtHeight, eastLongitudeOffset, eastLatitudeOffset, emLBDeal));\r\n    var indexVer3 = positions.length;\r\n    hMin = Math.min(hMin, addSkirt(northIndicesWestToEast, positions, heights, uvs, normals, webMercatorTs, ellipsoid, rectangle, parameters.northSkirtHeight, northLongitudeOffset, northLatitudeOffset, emLBDeal));\r\n\r\n    // Add skirts indexes\r\n    var indexCountWithoutSkirts = indexes.length;\r\n    var edgeTriangleIndexLength = Math.max(0, edgeVertexCount * 2) * 3;\r\n    for (var index = 0; index < edgeTriangleIndexLength; index++) {\r\n        indexes.push(0);\r\n    }\r\n\r\n    TerrainProvider.addSkirtIndices(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, indexVer0, indexVer1, indexVer2, indexVer3, indexes, indexCountWithoutSkirts);\r\n\r\n    //deal bot\r\n    // indexes.push(indexVer2);\r\n    // indexes.push(indexVer1);\r\n    // indexes.push(indexVer0);\r\n    // indexes.push(indexVer0);\r\n    // indexes.push(indexVer3);\r\n    // indexes.push(indexVer2);\r\n\r\n    var orientedBoundingBox;\r\n    var boundingSphere;\r\n    if (exaggeration !== 1.0) {\r\n        // Bounding volumes need to be recomputed since the tile payload assumes no exaggeration.\r\n        boundingSphere = BoundingSphere.fromPoints(positions);\r\n        orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, ellipsoid);\r\n    }\r\n\r\n    var occludeePointInScaledSpace;\r\n    if (exaggeration !== 1.0 || minimumHeight < 0.0) {\r\n        // Horizon culling point needs to be recomputed since the tile payload assumes no exaggeration.\r\n        var occluder = new EllipsoidalOccluder(ellipsoid);\r\n        occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(center, positions, minimumHeight);\r\n    }\r\n\r\n    const downloadAry = [];\r\n    var downloadTriangleByBlobFunc = (fileName, tiangle) => {\r\n        let pSerialWrite = new emMod.LBSpaSerial();\r\n        pSerialWrite.WriteTriangle(tiangle);\r\n        let cSerialArray = new Uint8Array(pSerialWrite.GetBufferSize());\r\n        for (let i = 0; i < cSerialArray.length; ++i)\r\n        {\r\n            cSerialArray[i] = pSerialWrite.GetBufferVal(i);\r\n        }\r\n        emMod.destroy(pSerialWrite);\r\n        downloadAry.push({serial: cSerialArray, fileName: fileName});\r\n    };\r\n\r\n    //deal hole\r\n    var createBodyFunc = (ptAry, indexAry, inIndexSectIndex) => {\r\n        let indexSectIndex = 0;//defaultValue(inIndexSectIndex, 0);\r\n\r\n        let triangle = new emMod.LBSpaTriangle();\r\n        triangle.SetPtNum(ptAry.length, false, false);\r\n        for (let index = 0; index < ptAry.length; index++) {\r\n            const pt = ptAry[index];\r\n            triangle.SetPtVal(index, pt.x, pt.y, pt.z);\r\n        }\r\n        triangle.SetIndexNum(indexAry.length);\r\n        for (let index = 0; index < indexAry.length; index++) {\r\n            triangle.SetIndexVal(index, indexAry[index]);\r\n        }\r\n\r\n        if (needDownLoad) {\r\n            if (inIndexSectIndex > 0) {\r\n                downloadTriangleByBlobFunc(\"ter2.tri\", triangle);\r\n            } else {\r\n                downloadTriangleByBlobFunc(\"hole2.tri\", triangle);\r\n            }\r\n        }\r\n\r\n        let pBody = new emMod.LBSpaBody();\r\n        pBody.Init(triangle, indexSectIndex);\r\n        emMod.destroy(triangle);\r\n        return pBody;\r\n    };\r\n\r\n    var getBodyTriangle = (pBody) => {\r\n        positions.length = 0;\r\n        indexes.length = 0;\r\n        uvs.length = 0;\r\n        heights.length = 0;\r\n        if (includeWebMercatorT) {\r\n            webMercatorTs.length = 0;\r\n        }\r\n        if (hasVertexNormals) {\r\n            normals.length = 0;\r\n            hasVertexNormals = false;//force\r\n        }\r\n\r\n        let triangle = new emMod.LBSpaTriangle();\r\n        let skirtInfo = new emMod.LBSpaSkirtInfo();\r\n        pBody.GetTriangle(triangle, skirtInfo);\r\n\r\n        let iPtNum = triangle.GetPtNum();\r\n        let iIndexNum = triangle.GetIndexNum();\r\n        if (iPtNum < 3 || iIndexNum < 3) {\r\n            emMod.destroy(triangle);\r\n            emMod.destroy(skirtInfo);\r\n            return;\r\n        }\r\n\r\n        vertexCountWithoutSkirts = skirtInfo.iPtSectIndex;\r\n        indexCountWithoutSkirts = skirtInfo.iIndexSectIndex;\r\n\r\n        for (let index = 0; index < iPtNum; index++)\r\n        {\r\n            let cPt = triangle.GetPt(index);\r\n            let pos = new Cartesian3(cPt.x, cPt.y, cPt.z);\r\n            positions.push(pos);\r\n\r\n            if (defined(emLBDeal)) {\r\n                emLBDeal.computeProjToDegree(pos, true, cartesian3Scratch);\r\n                Cartographic.fromDegrees(cartesian3Scratch.x, cartesian3Scratch.y, cartesian3Scratch.z, cartographicScratch);\r\n            } else {\r\n                ellipsoid.cartesianToCartographic(pos, cartographicScratch);\r\n            }\r\n\r\n            let uv = new Cartesian2((cartographicScratch.longitude - west)/(east - west), (cartographicScratch.latitude - south)/(north - south));\r\n            uvs.push(uv);\r\n\r\n            heights.push(cartographicScratch.height);\r\n            if (includeWebMercatorT) {\r\n                webMercatorTs.push((WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight);\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < iIndexNum; index++) {\r\n            indexes.push(triangle.GetIndex(index));\r\n        }\r\n\r\n        emMod.destroy(triangle);\r\n        emMod.destroy(skirtInfo);\r\n    };\r\n\r\n    var substractHoleAryFunc = () => {\r\n        let terBody;\r\n        let haveDiff = false;\r\n        const terBox = AxisAlignedBoundingBox.fromPoints(positions);\r\n        for (let index = 0; index < holeAry.length; index++) {\r\n            const borderInfo = BorderInfo.clone(holeAry[index]);\r\n\r\n            let ptAry = [];\r\n            let indexAry = [];\r\n            borderInfo.createTriangle(ptAry, indexAry);\r\n            const borderBox = AxisAlignedBoundingBox.fromPoints(ptAry);\r\n            if (!terBox.isOverlap(borderBox)) {\r\n                continue;\r\n            }\r\n\r\n            if (terBody === undefined) {\r\n                terBody = createBodyFunc(positions, indexes, indexCountWithoutSkirts);\r\n            }\r\n            let holeBody = createBodyFunc(ptAry, indexAry);\r\n            if (!terBody.CheckReference(holeBody)) {\r\n                emMod.destroy(holeBody);\r\n                continue;\r\n            }\r\n\r\n            if (!terBody.ComputeDifference(holeBody)) {\r\n                emMod.destroy(holeBody);\r\n                continue;\r\n            }\r\n\r\n            emMod.destroy(holeBody);\r\n            haveDiff = true;\r\n        }\r\n\r\n        if (haveDiff) {\r\n            getBodyTriangle(terBody);\r\n        }\r\n        if (terBody !== undefined) {\r\n            emMod.destroy(terBody);\r\n        }\r\n        return haveDiff;\r\n    };\r\n\r\n    let haveDiff = false;\r\n    if (hasHole) {\r\n        haveDiff = substractHoleAryFunc();\r\n\r\n        if (positions.length < 3) {\r\n            return {\r\n                holeAllData: true,\r\n            }\r\n        }\r\n    }\r\n\r\n    var aaBox = new AxisAlignedBoundingBox(minimum, maximum, center);\r\n    var encoding = new TerrainEncoding(aaBox, hMin, maximumHeight, fromENU, hasVertexNormals, includeWebMercatorT);\r\n    var vertexStride = encoding.getStride();\r\n    var size = positions.length * vertexStride;\r\n    var vertexBuffer = new Float32Array(size);\r\n    var bufferIndex = 0;\r\n    for (var j = 0; j < positions.length; ++j) {\r\n        if (hasVertexNormals) {\r\n            var n = j * 2.0;\r\n            toPack.x = normals[n];\r\n            toPack.y = normals[n + 1];\r\n\r\n            if (exaggeration !== 1.0) {\r\n                var normal = AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal);\r\n                var fromENUNormal = Transforms.eastNorthUpToFixedFrame(positions[j], ellipsoid, scratchFromENU);\r\n                var toENUNormal = Matrix4.inverseTransformation(fromENUNormal, scratchToENU);\r\n\r\n                Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\r\n                normal.z *= exaggeration;\r\n                Cartesian3.normalize(normal, normal);\r\n\r\n                Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\r\n                Cartesian3.normalize(normal, normal);\r\n\r\n                AttributeCompression.octEncode(normal, toPack);\r\n            }\r\n        }\r\n\r\n        bufferIndex = encoding.encode(vertexBuffer, bufferIndex, positions[j], uvs[j], heights[j], toPack, webMercatorTs[j]);\r\n    }\r\n\r\n    var indexBuffer = IndexDatatype.createTypedArray(positions.length, indexes.length);\r\n    indexBuffer.set(indexes, 0);\r\n\r\n    var physicalArray;\r\n    if (needPhy) {\r\n        physicalArray = CreatePhysicalArray.createPhysicalArrayFromTerrain(emMod, lbSpaMgr, parameters.relativeToCenter, positions, indexes);\r\n        transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer, physicalArray.buffer);\r\n    }\r\n    else {\r\n        transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer);\r\n    }\r\n\r\n    if (defined(emLBDeal)) {\r\n        emLBDeal.destroy();\r\n    }\r\n\r\n    return {\r\n        vertices: vertexBuffer.buffer,\r\n        indices: indexBuffer.buffer,\r\n        vertexStride: vertexStride,\r\n        center: center,\r\n        minimumHeight: minimumHeight,\r\n        maximumHeight: maximumHeight,\r\n        boundingSphere: boundingSphere,\r\n        orientedBoundingBox: orientedBoundingBox,\r\n        occludeePointInScaledSpace: occludeePointInScaledSpace,\r\n        encoding: encoding,\r\n        indexCountWithoutSkirts: indexCountWithoutSkirts,\r\n        vertexCountWithoutSkirts: vertexCountWithoutSkirts,\r\n        vertexCount: positions.length,\r\n        physicalArray: physicalArray,\r\n        downloadAry: downloadAry,\r\n        haveDiff: haveDiff,\r\n    };\r\n}\r\n\r\nfunction addSkirt(edgeVertices, positions, heights, uvs, normals, webMercatorTs, ellipsoid, rectangle, skirtLength, longitudeOffset, latitudeOffset, emLBDeal) {\r\n    var hasVertexNormals = defined(normals);\r\n    var hasWebMercatorT = webMercatorTs.length > 0;\r\n    var hMin = Number.POSITIVE_INFINITY;\r\n\r\n    var north = rectangle.north;\r\n    var south = rectangle.south;\r\n    var east = rectangle.east;\r\n    var west = rectangle.west;\r\n\r\n    if (east < west) {\r\n        east += CesiumMath.TWO_PI;\r\n    }\r\n\r\n    var length = edgeVertices.length - 1;//last use next\r\n    for (var i = 0; i < length; ++i) {\r\n        var index = edgeVertices[i];\r\n        var h = heights[index];\r\n        var uv = uvs[index];\r\n\r\n        cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x) + longitudeOffset;\r\n        cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y) + latitudeOffset;\r\n        cartographicScratch.height = h - skirtLength;\r\n        // cartographicScratch.height = -10;\r\n        // if (h < 0) {\r\n        //     cartographicScratch.height = -50;\r\n        // }\r\n\r\n        var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n        if (defined(emLBDeal)) {\r\n            position = emLBDeal.computeCartesianToProj(position);\r\n        }\r\n\r\n        positions.push(position);\r\n        uvs.push(uv);\r\n        heights.push(cartographicScratch.height);\r\n        if (hasVertexNormals) {\r\n            var n = index * 2.0;\r\n            normals.push(normals[n]);\r\n            normals.push(normals[n + 1]);\r\n        }\r\n\r\n        if (hasWebMercatorT) {\r\n            var webMercatorT = webMercatorTs[index];\r\n            webMercatorTs.push(webMercatorT);\r\n        }\r\n\r\n        hMin = Math.min(hMin, cartographicScratch.height);\r\n    }\r\n\r\n    return hMin;\r\n}\r\n\r\nfunction copyAndSort(typedArray, comparator) {\r\n    var copy;\r\n    if (typeof typedArray.slice === 'function') {\r\n        copy = typedArray.slice();\r\n        if (typeof copy.sort !== 'function') {\r\n            // Sliced typed array isn't sortable, so we can't use it.\r\n            copy = undefined;\r\n        }\r\n    }\r\n\r\n    if (!defined(copy)) {\r\n        copy = Array.prototype.slice.call(typedArray);\r\n    }\r\n\r\n    copy.sort(comparator);\r\n\r\n    return copy;\r\n}\r\n\r\nfunction createVerticesFromQuantizedTerrainMesh(event) {\r\n    var data = event.data;\r\n    var wasmConfig = data.webAssemblyConfig;\r\n    if (defined(wasmConfig)) {\r\n        EmWrapperManager.initWebAssembly(wasmConfig.wasmBinaryFileES6).then(function () {\r\n            lbSpaMgr = new emMod.LBSpaMgr();\r\n            self.onmessage = createTaskProcessorWorker(createVertices);\r\n            self.postMessage(true);\r\n        });\r\n    }\r\n}\r\n\r\nexport default createVerticesFromQuantizedTerrainMesh;\r\n"],"names":["Cartesian3","Cartographic","Cartesian2","Matrix4","defined","Rectangle","Ellipsoid","Transforms","WebMercatorProjection","EmLBDeal","CesiumMath","TerrainProvider","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","emMod","AxisAlignedBoundingBox","BorderInfo","TerrainEncoding","AttributeCompression","IndexDatatype","CreatePhysicalArray","EmWrapperManager"],"mappings":"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"}